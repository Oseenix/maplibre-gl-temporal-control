{"version":3,"file":"index.js","sources":["../src/icons.ts","../src/temparal.ts","../node_modules/.pnpm/@maplibre+maplibre-gl-style-spec@22.0.1/node_modules/@maplibre/maplibre-gl-style-spec/dist/index.mjs","../src/colorbar.ts"],"sourcesContent":["// https://materialdesignicons.com/\nexport const pauseSvg =\n\t'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>pause</title><path d=\"M14,19H18V5H14M6,19H10V5H6V19Z\" /></svg>';\nexport const playSvg =\n\t'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>play</title><path d=\"M8,5.14V19.14L19,12.14L8,5.14Z\" /></svg>';\nexport const reloadSvg =\n\t'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>reload</title><path d=\"M2 12C2 16.97 6.03 21 11 21C13.39 21 15.68 20.06 17.4 18.4L15.9 16.9C14.63 18.25 12.86 19 11 19C4.76 19 1.64 11.46 6.05 7.05C10.46 2.64 18 5.77 18 12H15L19 16H19.1L23 12H20C20 7.03 15.97 3 11 3C6.03 3 2 7.03 2 12Z\" /></svg>';\nexport const skipBackwardSvg =\n\t'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>skip-backward</title><path d=\"M20,5V19L13,12M6,5V19H4V5M13,5V19L6,12\" /></svg>';\nexport const skipForwardSvg =\n\t'<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>skip-forward</title><path d=\"M4,5V19L11,12M18,5V19H20V5M11,5V19L18,12\" /></svg>';\n","import type {\n\tIControl,\n\tMap,\n\tLayerSpecification,\n\tControlPosition,\n} from 'maplibre-gl';\n\nimport {\n\tplaySvg,\n\tpauseSvg,\n\treloadSvg,\n\tskipBackwardSvg,\n\tskipForwardSvg,\n} from './icons';\n\nconst ACTIVE_BUTTON_COLOR = 'rgb(204, 204, 204)';\n\ntype ContainerOptions = {\n\tlength: number;\n\tinterval: number;\n\tonSliderValueChange: () => void;\n};\n\nconst makeImg = (svg: string): HTMLImageElement => {\n\tconst img = document.createElement('img');\n\timg.src = `data:image/svg+xml,${encodeURIComponent(svg)}`;\n\timg.style.width = '24px';\n\timg.style.height = '24px';\n\treturn img;\n};\n\nlet timerId: number | undefined;\n\nconst makeContainer = ({\n\tlength,\n\tinterval,\n\tonSliderValueChange,\n}: ContainerOptions) => {\n\t// outest div\n\tconst container = document.createElement('div');\n\tcontainer.classList.add('maplibregl-ctrl');\n\tcontainer.classList.add('maplibregl-ctrl-group');\n\tcontainer.style.width = 'calc(min((500% - 29px), 260px))';\n\tcontainer.style.height = '84px';\n\tcontainer.style.backgroundColor = 'rgba(0, 36, 71, 0.8)';\n\tcontainer.style.textAlign = 'center';\n\n\tconst titleDiv = document.createElement('div');\n\ttitleDiv.innerHTML = '<br />';\n\ttitleDiv.style.marginTop = '4px';\n\tcontainer.appendChild(titleDiv);\n\n\t// temporal slider\n\tconst slider = document.createElement('input');\n\tslider.type = 'range';\n\tslider.value = '0';\n\tslider.min = '0';\n\tslider.max = String(length - 1);\n\tslider.addEventListener('input', () => {\n\t\tonSliderValueChange();\n\t});\n\tslider.style.width = '80%';\n\tslider.style.margin = '4px 0';\n\tcontainer.appendChild(slider);\n\n\t// buttons div\n\t// loop, prev, pause, play, next\n\tconst buttonsDiv = document.createElement('div');\n\tbuttonsDiv.style.display = 'flex';\n\tbuttonsDiv.style.justifyContent = 'center';\n\tbuttonsDiv.style.margin = '4px 0 0 0';\n\n\t// loop button\n\tconst setLoopEnabled = (enabled: boolean) => {\n\t\tloopButton.style.backgroundColor = enabled ? ACTIVE_BUTTON_COLOR : '';\n\t};\n\tconst isLoopEnabled = () =>\n\t\tloopButton.style.backgroundColor === ACTIVE_BUTTON_COLOR;\n\tconst loopButton = document.createElement('button');\n\tloopButton.appendChild(makeImg(reloadSvg));\n\tloopButton.style.border = '0';\n\tloopButton.style.borderRadius = '0';\n\tloopButton.style.marginRight = '16px';\n\tloopButton.style.height = '24px';\n\tloopButton.style.borderRadius = '4px';\n\tloopButton.onclick = () => setLoopEnabled(!isLoopEnabled());\n\tbuttonsDiv.appendChild(loopButton);\n\n\tconst decrement = () => {\n\t\tslider.value = String(Math.max(0, Number(slider.value) - 1));\n\t\tonSliderValueChange();\n\t\treturn Number(slider.min) < Number(slider.value);\n\t};\n\tconst increment = () => {\n\t\tif (\n\t\t\tloopButton.style.backgroundColor !== '' &&\n\t\t\tNumber(slider.value) == Number(slider.max)\n\t\t) {\n\t\t\twhile (decrement()) {}\n\t\t} else {\n\t\t\tslider.value = String(\n\t\t\t\tMath.min(Number(slider.max), Number(slider.value) + 1),\n\t\t\t);\n\t\t}\n\t\tonSliderValueChange();\n\t\treturn Number(slider.value) < Number(slider.max);\n\t};\n\n\t// prev button\n\tconst prevButton = document.createElement('button');\n\tprevButton.appendChild(makeImg(skipBackwardSvg));\n\tprevButton.onclick = decrement;\n\tprevButton.style.border = '0';\n\tprevButton.style.height = '24px';\n\tprevButton.style.borderRadius = '4px';\n\n\t// pause button\n\tconst pause = () => {\n\t\tif (timerId === undefined) return;\n\t\tclearInterval(timerId);\n\t\ttimerId = undefined;\n\t\tpauseButton.onclick = null;\n\t\tplayButton.style.backgroundColor = '';\n\t};\n\tconst pauseButton = document.createElement('button');\n\tpauseButton.appendChild(makeImg(pauseSvg));\n\tpauseButton.style.border = '0';\n\tpauseButton.style.height = '24px';\n\tpauseButton.style.borderRadius = '4px';\n\tpauseButton.onclick = pause;\n\n\t// play button\n\tconst isPlaying = () =>\n\t\tplayButton.style.backgroundColor === ACTIVE_BUTTON_COLOR;\n\tconst play = () => {\n\t\tif (isPlaying()) return;\n\t\tplayButton.style.backgroundColor = ACTIVE_BUTTON_COLOR;\n\t\ttimerId = setInterval(() => {\n\t\t\tincrement();\n\t\t}, interval);\n\t};\n\n\tconst playButton = document.createElement('button');\n\tplayButton.appendChild(makeImg(playSvg));\n\tplayButton.style.border = '0';\n\tplayButton.style.height = '24px';\n\tplayButton.style.borderRadius = '4px';\n\tplayButton.onclick = play;\n\n\t// next button\n\tconst nextButton = document.createElement('button');\n\tnextButton.appendChild(makeImg(skipForwardSvg));\n\tnextButton.style.border = '0';\n\tnextButton.style.height = '24px';\n\tnextButton.style.borderRadius = '4px';\n\tnextButton.onclick = increment;\n\n\tbuttonsDiv.appendChild(prevButton);\n\tbuttonsDiv.appendChild(pauseButton);\n\tbuttonsDiv.appendChild(playButton);\n\tbuttonsDiv.appendChild(nextButton);\n\n\tcontainer.appendChild(buttonsDiv);\n\n\treturn {\n\t\tcontainer,\n\t\ttitleDiv,\n\t\tslider,\n\t\tincrement,\n\t\tdecrement,\n\t\tisPlaying,\n\t\tplay,\n\t\tpause,\n\t\tisLoopEnabled,\n\t\tsetLoopEnabled,\n\t};\n};\n\ntype TemporalFrame = {\n\ttitle: string;\n\tlayers: LayerSpecification[];\n};\n\ntype Options = {\n\tposition?: ControlPosition;\n\tinterval?: number;\n\tperformance?: boolean;\n};\n\nexport default class TemporalControl implements IControl {\n\tprivate map: Map | undefined;\n\tprivate options: Options;\n\n\tprivate container: HTMLDivElement;\n\tprivate containerTitle!: HTMLDivElement;\n\tprivate temporalSlider!: HTMLInputElement;\n\tprivate temporalFrames: TemporalFrame[];\n\n\tnext: () => boolean;\n\tprev: () => boolean;\n\tplay: () => void;\n\tpause: () => void;\n\tisPlaying: () => boolean;\n\tisLoopEnabled: () => boolean;\n\tsetLoopEnabled: (enabled: boolean) => void;\n\tgoto: (index: number) => void;\n\n\tconstructor(temporalFrames: TemporalFrame[], options: Options = {}) {\n\t\tthis.temporalFrames = temporalFrames;\n\t\tthis.options = options;\n\n\t\tconst containerOptions: ContainerOptions = {\n\t\t\tlength: this.temporalFrames.length,\n\t\t\tinterval: this.options.interval || 500,\n\t\t\tonSliderValueChange: () => this.refresh(),\n\t\t};\n\n\t\tconst {\n\t\t\tcontainer,\n\t\t\ttitleDiv,\n\t\t\tslider,\n\t\t\tincrement,\n\t\t\tdecrement,\n\t\t\tplay,\n\t\t\tpause,\n\t\t\tisPlaying,\n\t\t\tisLoopEnabled,\n\t\t\tsetLoopEnabled,\n\t\t} = makeContainer(containerOptions);\n\n\t\tthis.container = container;\n\t\tthis.containerTitle = titleDiv;\n\t\tthis.temporalSlider = slider;\n\t\tthis.next = increment;\n\t\tthis.prev = decrement;\n\t\tthis.play = play;\n\t\tthis.pause = pause;\n\t\tthis.isPlaying = isPlaying;\n\t\tthis.isLoopEnabled = isLoopEnabled;\n\t\tthis.setLoopEnabled = setLoopEnabled;\n\t\tthis.goto = (idx: number) => {\n\t\t\tslider.value = String(\n\t\t\t\tMath.min(this.temporalFrames.length - 1, Math.max(0, idx)),\n\t\t\t);\n\t\t\tthis.refresh();\n\t\t};\n\t}\n\n\tonAdd(map: Map) {\n\t\tthis.map = map;\n\t\tmap.getContainer().appendChild(this.container);\n\n\t\tthis.map.once('styledata', () => {\n\t\t\tthis.refresh();\n\t\t});\n\n\t\treturn this.container;\n\t}\n\n\tonRemove() {\n\t\tthis.container.parentNode?.removeChild(this.container);\n\t\tthis.map = undefined;\n\t}\n\n\tgetDefaultPosition(): ControlPosition {\n\t\treturn 'bottom-left';\n\t}\n\n\trefresh() {\n\t\tconst sliderValue = Number(this.temporalSlider.value);\n\t\tthis.containerTitle.innerHTML = this.temporalFrames[sliderValue].title;\n\t\tconst visibleLayerIds = this.temporalFrames[sliderValue].layers.map(\n\t\t\t(layer) => layer.id,\n\t\t);\n\t\tthis.temporalFrames.forEach((temporalFrame) => {\n\t\t\ttemporalFrame.layers.forEach((layer) =>\n\t\t\t\tthis.setVisible(layer, visibleLayerIds.includes(layer.id)),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate setVisible(layer: LayerSpecification, isVisible = true) {\n\t\tif (\n\t\t\tlayer.type === 'raster' ||\n\t\t\tlayer.type === 'fill' ||\n\t\t\tlayer.type === 'circle' ||\n\t\t\tlayer.type === 'line'\n\t\t) {\n\t\t\tif (layer.type === 'raster') {\n\t\t\t\t// when raster, set opacity as visibility for background loading\n\t\t\t\tthis.map?.setPaintProperty(\n\t\t\t\t\tlayer.id,\n\t\t\t\t\t`${layer.type}-opacity-transition`,\n\t\t\t\t\t{\n\t\t\t\t\t\t// set disable fade-in transition\n\t\t\t\t\t\tduration: 0,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tlet opacity;\n\t\t\tif (isVisible) {\n\t\t\t\t// @ts-ignore\n\t\t\t\topacity = layer.paint?.[`${layer.type}-opacity`] || 1;\n\t\t\t} else {\n\t\t\t\topacity = this.options.performance ? 0.000000000000000000001 : 0;\n\t\t\t}\n\n\t\t\tthis.map?.setPaintProperty(layer.id, `${layer.type}-opacity`, opacity);\n\t\t} else {\n\t\t\tthis.map?.setLayoutProperty(\n\t\t\t\tlayer.id,\n\t\t\t\t'visibility',\n\t\t\t\tisVisible ? 'visible' : 'none',\n\t\t\t);\n\t\t}\n\t}\n}\n\n","var $version = 8;\nvar $root = {\n\tversion: {\n\t\trequired: true,\n\t\ttype: \"enum\",\n\t\tvalues: [\n\t\t\t8\n\t\t]\n\t},\n\tname: {\n\t\ttype: \"string\"\n\t},\n\tmetadata: {\n\t\ttype: \"*\"\n\t},\n\tcenter: {\n\t\ttype: \"array\",\n\t\tvalue: \"number\"\n\t},\n\tcenterAltitude: {\n\t\ttype: \"number\"\n\t},\n\tzoom: {\n\t\ttype: \"number\"\n\t},\n\tbearing: {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tperiod: 360,\n\t\tunits: \"degrees\"\n\t},\n\tpitch: {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tunits: \"degrees\"\n\t},\n\troll: {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tunits: \"degrees\"\n\t},\n\tlight: {\n\t\ttype: \"light\"\n\t},\n\tsky: {\n\t\ttype: \"sky\"\n\t},\n\tprojection: {\n\t\ttype: \"projection\"\n\t},\n\tterrain: {\n\t\ttype: \"terrain\"\n\t},\n\tsources: {\n\t\trequired: true,\n\t\ttype: \"sources\"\n\t},\n\tsprite: {\n\t\ttype: \"sprite\"\n\t},\n\tglyphs: {\n\t\ttype: \"string\"\n\t},\n\ttransition: {\n\t\ttype: \"transition\"\n\t},\n\tlayers: {\n\t\trequired: true,\n\t\ttype: \"array\",\n\t\tvalue: \"layer\"\n\t}\n};\nvar sources = {\n\t\"*\": {\n\t\ttype: \"source\"\n\t}\n};\nvar source = [\n\t\"source_vector\",\n\t\"source_raster\",\n\t\"source_raster_dem\",\n\t\"source_geojson\",\n\t\"source_video\",\n\t\"source_image\"\n];\nvar source_vector = {\n\ttype: {\n\t\trequired: true,\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvector: {\n\t\t\t}\n\t\t}\n\t},\n\turl: {\n\t\ttype: \"string\"\n\t},\n\ttiles: {\n\t\ttype: \"array\",\n\t\tvalue: \"string\"\n\t},\n\tbounds: {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 4,\n\t\t\"default\": [\n\t\t\t-180,\n\t\t\t-85.051129,\n\t\t\t180,\n\t\t\t85.051129\n\t\t]\n\t},\n\tscheme: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\txyz: {\n\t\t\t},\n\t\t\ttms: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"xyz\"\n\t},\n\tminzoom: {\n\t\ttype: \"number\",\n\t\t\"default\": 0\n\t},\n\tmaxzoom: {\n\t\ttype: \"number\",\n\t\t\"default\": 22\n\t},\n\tattribution: {\n\t\ttype: \"string\"\n\t},\n\tpromoteId: {\n\t\ttype: \"promoteId\"\n\t},\n\tvolatile: {\n\t\ttype: \"boolean\",\n\t\t\"default\": false\n\t},\n\t\"*\": {\n\t\ttype: \"*\"\n\t}\n};\nvar source_raster = {\n\ttype: {\n\t\trequired: true,\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\traster: {\n\t\t\t}\n\t\t}\n\t},\n\turl: {\n\t\ttype: \"string\"\n\t},\n\ttiles: {\n\t\ttype: \"array\",\n\t\tvalue: \"string\"\n\t},\n\tbounds: {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 4,\n\t\t\"default\": [\n\t\t\t-180,\n\t\t\t-85.051129,\n\t\t\t180,\n\t\t\t85.051129\n\t\t]\n\t},\n\tminzoom: {\n\t\ttype: \"number\",\n\t\t\"default\": 0\n\t},\n\tmaxzoom: {\n\t\ttype: \"number\",\n\t\t\"default\": 22\n\t},\n\ttileSize: {\n\t\ttype: \"number\",\n\t\t\"default\": 512,\n\t\tunits: \"pixels\"\n\t},\n\tscheme: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\txyz: {\n\t\t\t},\n\t\t\ttms: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"xyz\"\n\t},\n\tattribution: {\n\t\ttype: \"string\"\n\t},\n\tvolatile: {\n\t\ttype: \"boolean\",\n\t\t\"default\": false\n\t},\n\t\"*\": {\n\t\ttype: \"*\"\n\t}\n};\nvar source_raster_dem = {\n\ttype: {\n\t\trequired: true,\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\t\"raster-dem\": {\n\t\t\t}\n\t\t}\n\t},\n\turl: {\n\t\ttype: \"string\"\n\t},\n\ttiles: {\n\t\ttype: \"array\",\n\t\tvalue: \"string\"\n\t},\n\tbounds: {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 4,\n\t\t\"default\": [\n\t\t\t-180,\n\t\t\t-85.051129,\n\t\t\t180,\n\t\t\t85.051129\n\t\t]\n\t},\n\tminzoom: {\n\t\ttype: \"number\",\n\t\t\"default\": 0\n\t},\n\tmaxzoom: {\n\t\ttype: \"number\",\n\t\t\"default\": 22\n\t},\n\ttileSize: {\n\t\ttype: \"number\",\n\t\t\"default\": 512,\n\t\tunits: \"pixels\"\n\t},\n\tattribution: {\n\t\ttype: \"string\"\n\t},\n\tencoding: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tterrarium: {\n\t\t\t},\n\t\t\tmapbox: {\n\t\t\t},\n\t\t\tcustom: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"mapbox\"\n\t},\n\tredFactor: {\n\t\ttype: \"number\",\n\t\t\"default\": 1\n\t},\n\tblueFactor: {\n\t\ttype: \"number\",\n\t\t\"default\": 1\n\t},\n\tgreenFactor: {\n\t\ttype: \"number\",\n\t\t\"default\": 1\n\t},\n\tbaseShift: {\n\t\ttype: \"number\",\n\t\t\"default\": 0\n\t},\n\tvolatile: {\n\t\ttype: \"boolean\",\n\t\t\"default\": false\n\t},\n\t\"*\": {\n\t\ttype: \"*\"\n\t}\n};\nvar source_geojson = {\n\ttype: {\n\t\trequired: true,\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tgeojson: {\n\t\t\t}\n\t\t}\n\t},\n\tdata: {\n\t\trequired: true,\n\t\ttype: \"*\"\n\t},\n\tmaxzoom: {\n\t\ttype: \"number\",\n\t\t\"default\": 18\n\t},\n\tattribution: {\n\t\ttype: \"string\"\n\t},\n\tbuffer: {\n\t\ttype: \"number\",\n\t\t\"default\": 128,\n\t\tmaximum: 512,\n\t\tminimum: 0\n\t},\n\tfilter: {\n\t\ttype: \"*\"\n\t},\n\ttolerance: {\n\t\ttype: \"number\",\n\t\t\"default\": 0.375\n\t},\n\tcluster: {\n\t\ttype: \"boolean\",\n\t\t\"default\": false\n\t},\n\tclusterRadius: {\n\t\ttype: \"number\",\n\t\t\"default\": 50,\n\t\tminimum: 0\n\t},\n\tclusterMaxZoom: {\n\t\ttype: \"number\"\n\t},\n\tclusterMinPoints: {\n\t\ttype: \"number\"\n\t},\n\tclusterProperties: {\n\t\ttype: \"*\"\n\t},\n\tlineMetrics: {\n\t\ttype: \"boolean\",\n\t\t\"default\": false\n\t},\n\tgenerateId: {\n\t\ttype: \"boolean\",\n\t\t\"default\": false\n\t},\n\tpromoteId: {\n\t\ttype: \"promoteId\"\n\t}\n};\nvar source_video = {\n\ttype: {\n\t\trequired: true,\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvideo: {\n\t\t\t}\n\t\t}\n\t},\n\turls: {\n\t\trequired: true,\n\t\ttype: \"array\",\n\t\tvalue: \"string\"\n\t},\n\tcoordinates: {\n\t\trequired: true,\n\t\ttype: \"array\",\n\t\tlength: 4,\n\t\tvalue: {\n\t\t\ttype: \"array\",\n\t\t\tlength: 2,\n\t\t\tvalue: \"number\"\n\t\t}\n\t}\n};\nvar source_image = {\n\ttype: {\n\t\trequired: true,\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\timage: {\n\t\t\t}\n\t\t}\n\t},\n\turl: {\n\t\trequired: true,\n\t\ttype: \"string\"\n\t},\n\tcoordinates: {\n\t\trequired: true,\n\t\ttype: \"array\",\n\t\tlength: 4,\n\t\tvalue: {\n\t\t\ttype: \"array\",\n\t\t\tlength: 2,\n\t\t\tvalue: \"number\"\n\t\t}\n\t}\n};\nvar layer = {\n\tid: {\n\t\ttype: \"string\",\n\t\trequired: true\n\t},\n\ttype: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tfill: {\n\t\t\t},\n\t\t\tline: {\n\t\t\t},\n\t\t\tsymbol: {\n\t\t\t},\n\t\t\tcircle: {\n\t\t\t},\n\t\t\theatmap: {\n\t\t\t},\n\t\t\t\"fill-extrusion\": {\n\t\t\t},\n\t\t\traster: {\n\t\t\t},\n\t\t\thillshade: {\n\t\t\t},\n\t\t\tbackground: {\n\t\t\t}\n\t\t},\n\t\trequired: true\n\t},\n\tmetadata: {\n\t\ttype: \"*\"\n\t},\n\tsource: {\n\t\ttype: \"string\"\n\t},\n\t\"source-layer\": {\n\t\ttype: \"string\"\n\t},\n\tminzoom: {\n\t\ttype: \"number\",\n\t\tminimum: 0,\n\t\tmaximum: 24\n\t},\n\tmaxzoom: {\n\t\ttype: \"number\",\n\t\tminimum: 0,\n\t\tmaximum: 24\n\t},\n\tfilter: {\n\t\ttype: \"filter\"\n\t},\n\tlayout: {\n\t\ttype: \"layout\"\n\t},\n\tpaint: {\n\t\ttype: \"paint\"\n\t}\n};\nvar layout = [\n\t\"layout_fill\",\n\t\"layout_line\",\n\t\"layout_circle\",\n\t\"layout_heatmap\",\n\t\"layout_fill-extrusion\",\n\t\"layout_symbol\",\n\t\"layout_raster\",\n\t\"layout_hillshade\",\n\t\"layout_background\"\n];\nvar layout_background = {\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar layout_fill = {\n\t\"fill-sort-key\": {\n\t\ttype: \"number\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar layout_circle = {\n\t\"circle-sort-key\": {\n\t\ttype: \"number\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar layout_heatmap = {\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar layout_line = {\n\t\"line-cap\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tbutt: {\n\t\t\t},\n\t\t\tround: {\n\t\t\t},\n\t\t\tsquare: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"butt\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"line-join\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tbevel: {\n\t\t\t},\n\t\t\tround: {\n\t\t\t},\n\t\t\tmiter: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"miter\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"line-miter-limit\": {\n\t\ttype: \"number\",\n\t\t\"default\": 2,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"line-join\": \"miter\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"line-round-limit\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1.05,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"line-join\": \"round\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"line-sort-key\": {\n\t\ttype: \"number\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar layout_symbol = {\n\t\"symbol-placement\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tpoint: {\n\t\t\t},\n\t\t\tline: {\n\t\t\t},\n\t\t\t\"line-center\": {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"point\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"symbol-spacing\": {\n\t\ttype: \"number\",\n\t\t\"default\": 250,\n\t\tminimum: 1,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"symbol-placement\": \"line\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"symbol-avoid-edges\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"symbol-sort-key\": {\n\t\ttype: \"number\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"symbol-z-order\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tauto: {\n\t\t\t},\n\t\t\t\"viewport-y\": {\n\t\t\t},\n\t\t\tsource: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"auto\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-allow-overlap\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\trequires: [\n\t\t\t\"icon-image\",\n\t\t\t{\n\t\t\t\t\"!\": \"icon-overlap\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-overlap\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tnever: {\n\t\t\t},\n\t\t\talways: {\n\t\t\t},\n\t\t\tcooperative: {\n\t\t\t}\n\t\t},\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-ignore-placement\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-optional\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\trequires: [\n\t\t\t\"icon-image\",\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-rotation-alignment\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t},\n\t\t\tauto: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"auto\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-size\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tunits: \"factor of the original icon size\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-text-fit\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tnone: {\n\t\t\t},\n\t\t\twidth: {\n\t\t\t},\n\t\t\theight: {\n\t\t\t},\n\t\t\tboth: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"none\",\n\t\trequires: [\n\t\t\t\"icon-image\",\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-text-fit-padding\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 4,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"icon-image\",\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"icon-text-fit\": [\n\t\t\t\t\t\"both\",\n\t\t\t\t\t\"width\",\n\t\t\t\t\t\"height\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-image\": {\n\t\ttype: \"resolvedImage\",\n\t\ttokens: true,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-rotate\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tperiod: 360,\n\t\tunits: \"degrees\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-padding\": {\n\t\ttype: \"padding\",\n\t\t\"default\": [\n\t\t\t2\n\t\t],\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-keep-upright\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\trequires: [\n\t\t\t\"icon-image\",\n\t\t\t{\n\t\t\t\t\"icon-rotation-alignment\": \"map\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"symbol-placement\": [\n\t\t\t\t\t\"line\",\n\t\t\t\t\t\"line-center\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-offset\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tcenter: {\n\t\t\t},\n\t\t\tleft: {\n\t\t\t},\n\t\t\tright: {\n\t\t\t},\n\t\t\ttop: {\n\t\t\t},\n\t\t\tbottom: {\n\t\t\t},\n\t\t\t\"top-left\": {\n\t\t\t},\n\t\t\t\"top-right\": {\n\t\t\t},\n\t\t\t\"bottom-left\": {\n\t\t\t},\n\t\t\t\"bottom-right\": {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"center\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-pitch-alignment\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t},\n\t\t\tauto: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"auto\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-pitch-alignment\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t},\n\t\t\tauto: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"auto\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-rotation-alignment\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t},\n\t\t\t\"viewport-glyph\": {\n\t\t\t},\n\t\t\tauto: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"auto\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-field\": {\n\t\ttype: \"formatted\",\n\t\t\"default\": \"\",\n\t\ttokens: true,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-font\": {\n\t\ttype: \"array\",\n\t\tvalue: \"string\",\n\t\t\"default\": [\n\t\t\t\"Open Sans Regular\",\n\t\t\t\"Arial Unicode MS Regular\"\n\t\t],\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-size\": {\n\t\ttype: \"number\",\n\t\t\"default\": 16,\n\t\tminimum: 0,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-max-width\": {\n\t\ttype: \"number\",\n\t\t\"default\": 10,\n\t\tminimum: 0,\n\t\tunits: \"ems\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-line-height\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1.2,\n\t\tunits: \"ems\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-letter-spacing\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tunits: \"ems\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-justify\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tauto: {\n\t\t\t},\n\t\t\tleft: {\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t},\n\t\t\tright: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"center\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-radial-offset\": {\n\t\ttype: \"number\",\n\t\tunits: \"ems\",\n\t\t\"default\": 0,\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\t\"property-type\": \"data-driven\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t}\n\t},\n\t\"text-variable-anchor\": {\n\t\ttype: \"array\",\n\t\tvalue: \"enum\",\n\t\tvalues: {\n\t\t\tcenter: {\n\t\t\t},\n\t\t\tleft: {\n\t\t\t},\n\t\t\tright: {\n\t\t\t},\n\t\t\ttop: {\n\t\t\t},\n\t\t\tbottom: {\n\t\t\t},\n\t\t\t\"top-left\": {\n\t\t\t},\n\t\t\t\"top-right\": {\n\t\t\t},\n\t\t\t\"bottom-left\": {\n\t\t\t},\n\t\t\t\"bottom-right\": {\n\t\t\t}\n\t\t},\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"symbol-placement\": [\n\t\t\t\t\t\"point\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-variable-anchor-offset\": {\n\t\ttype: \"variableAnchorOffsetCollection\",\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"symbol-placement\": [\n\t\t\t\t\t\"point\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tcenter: {\n\t\t\t},\n\t\t\tleft: {\n\t\t\t},\n\t\t\tright: {\n\t\t\t},\n\t\t\ttop: {\n\t\t\t},\n\t\t\tbottom: {\n\t\t\t},\n\t\t\t\"top-left\": {\n\t\t\t},\n\t\t\t\"top-right\": {\n\t\t\t},\n\t\t\t\"bottom-left\": {\n\t\t\t},\n\t\t\t\"bottom-right\": {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"center\",\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"!\": \"text-variable-anchor\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-max-angle\": {\n\t\ttype: \"number\",\n\t\t\"default\": 45,\n\t\tunits: \"degrees\",\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"symbol-placement\": [\n\t\t\t\t\t\"line\",\n\t\t\t\t\t\"line-center\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-writing-mode\": {\n\t\ttype: \"array\",\n\t\tvalue: \"enum\",\n\t\tvalues: {\n\t\t\thorizontal: {\n\t\t\t},\n\t\t\tvertical: {\n\t\t\t}\n\t\t},\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"symbol-placement\": [\n\t\t\t\t\t\"point\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-rotate\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tperiod: 360,\n\t\tunits: \"degrees\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-padding\": {\n\t\ttype: \"number\",\n\t\t\"default\": 2,\n\t\tminimum: 0,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-keep-upright\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": true,\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"text-rotation-alignment\": \"map\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"symbol-placement\": [\n\t\t\t\t\t\"line\",\n\t\t\t\t\t\"line-center\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-transform\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tnone: {\n\t\t\t},\n\t\t\tuppercase: {\n\t\t\t},\n\t\t\tlowercase: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"none\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-offset\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tunits: \"ems\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"!\": \"text-radial-offset\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-allow-overlap\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t{\n\t\t\t\t\"!\": \"text-overlap\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-overlap\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tnever: {\n\t\t\t},\n\t\t\talways: {\n\t\t\t},\n\t\t\tcooperative: {\n\t\t\t}\n\t\t},\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-ignore-placement\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-optional\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": false,\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar layout_raster = {\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar layout_hillshade = {\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n};\nvar filter = {\n\ttype: \"array\",\n\tvalue: \"*\"\n};\nvar filter_operator = {\n\ttype: \"enum\",\n\tvalues: {\n\t\t\"==\": {\n\t\t},\n\t\t\"!=\": {\n\t\t},\n\t\t\">\": {\n\t\t},\n\t\t\">=\": {\n\t\t},\n\t\t\"<\": {\n\t\t},\n\t\t\"<=\": {\n\t\t},\n\t\t\"in\": {\n\t\t},\n\t\t\"!in\": {\n\t\t},\n\t\tall: {\n\t\t},\n\t\tany: {\n\t\t},\n\t\tnone: {\n\t\t},\n\t\thas: {\n\t\t},\n\t\t\"!has\": {\n\t\t}\n\t}\n};\nvar geometry_type = {\n\ttype: \"enum\",\n\tvalues: {\n\t\tPoint: {\n\t\t},\n\t\tLineString: {\n\t\t},\n\t\tPolygon: {\n\t\t}\n\t}\n};\nvar function_stop = {\n\ttype: \"array\",\n\tminimum: 0,\n\tmaximum: 24,\n\tvalue: [\n\t\t\"number\",\n\t\t\"color\"\n\t],\n\tlength: 2\n};\nvar expression$1 = {\n\ttype: \"array\",\n\tvalue: \"*\",\n\tminimum: 1\n};\nvar light = {\n\tanchor: {\n\t\ttype: \"enum\",\n\t\t\"default\": \"viewport\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"property-type\": \"data-constant\",\n\t\ttransition: false,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t}\n\t},\n\tposition: {\n\t\ttype: \"array\",\n\t\t\"default\": [\n\t\t\t1.15,\n\t\t\t210,\n\t\t\t30\n\t\t],\n\t\tlength: 3,\n\t\tvalue: \"number\",\n\t\t\"property-type\": \"data-constant\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t}\n\t},\n\tcolor: {\n\t\ttype: \"color\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": \"#ffffff\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t},\n\tintensity: {\n\t\ttype: \"number\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": 0.5,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t}\n};\nvar sky = {\n\t\"sky-color\": {\n\t\ttype: \"color\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": \"#88C6FC\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t},\n\t\"horizon-color\": {\n\t\ttype: \"color\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": \"#ffffff\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t},\n\t\"fog-color\": {\n\t\ttype: \"color\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": \"#ffffff\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t},\n\t\"fog-ground-blend\": {\n\t\ttype: \"number\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": 0.5,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t},\n\t\"horizon-fog-blend\": {\n\t\ttype: \"number\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": 0.8,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t},\n\t\"sky-horizon-blend\": {\n\t\ttype: \"number\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": 0.8,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t},\n\t\"atmosphere-blend\": {\n\t\ttype: \"number\",\n\t\t\"property-type\": \"data-constant\",\n\t\t\"default\": 0.8,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\ttransition: true\n\t}\n};\nvar terrain = {\n\tsource: {\n\t\ttype: \"string\",\n\t\trequired: true\n\t},\n\texaggeration: {\n\t\ttype: \"number\",\n\t\tminimum: 0,\n\t\t\"default\": 1\n\t}\n};\nvar projection = {\n\ttype: {\n\t\ttype: \"projectionDefinition\",\n\t\t\"default\": \"mercator\",\n\t\t\"property-type\": \"data-constant\",\n\t\ttransition: false,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t}\n\t}\n};\nvar paint = [\n\t\"paint_fill\",\n\t\"paint_line\",\n\t\"paint_circle\",\n\t\"paint_heatmap\",\n\t\"paint_fill-extrusion\",\n\t\"paint_symbol\",\n\t\"paint_raster\",\n\t\"paint_hillshade\",\n\t\"paint_background\"\n];\nvar paint_fill = {\n\t\"fill-antialias\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": true,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"fill-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"fill-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"!\": \"fill-pattern\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"fill-outline-color\": {\n\t\ttype: \"color\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"!\": \"fill-pattern\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"fill-antialias\": true\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"fill-translate\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"fill-translate-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"map\",\n\t\trequires: [\n\t\t\t\"fill-translate\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"fill-pattern\": {\n\t\ttype: \"resolvedImage\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"cross-faded-data-driven\"\n\t}\n};\nvar paint_line = {\n\t\"line-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"line-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"!\": \"line-pattern\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"line-translate\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"line-translate-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"map\",\n\t\trequires: [\n\t\t\t\"line-translate\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"line-width\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"line-gap-width\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"line-offset\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"line-blur\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"line-dasharray\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"line widths\",\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"!\": \"line-pattern\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"cross-faded\"\n\t},\n\t\"line-pattern\": {\n\t\ttype: \"resolvedImage\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"cross-faded-data-driven\"\n\t},\n\t\"line-gradient\": {\n\t\ttype: \"color\",\n\t\ttransition: false,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"!\": \"line-dasharray\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"!\": \"line-pattern\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tsource: \"geojson\",\n\t\t\t\thas: {\n\t\t\t\t\tlineMetrics: true\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"line-progress\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"color-ramp\"\n\t}\n};\nvar paint_circle = {\n\t\"circle-radius\": {\n\t\ttype: \"number\",\n\t\t\"default\": 5,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"circle-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"circle-blur\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"circle-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"circle-translate\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"circle-translate-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"map\",\n\t\trequires: [\n\t\t\t\"circle-translate\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"circle-pitch-scale\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"map\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"circle-pitch-alignment\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"viewport\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"circle-stroke-width\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"circle-stroke-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"circle-stroke-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t}\n};\nvar paint_heatmap = {\n\t\"heatmap-radius\": {\n\t\ttype: \"number\",\n\t\t\"default\": 30,\n\t\tminimum: 1,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"heatmap-weight\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\ttransition: false,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"heatmap-intensity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"heatmap-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": [\n\t\t\t\"interpolate\",\n\t\t\t[\n\t\t\t\t\"linear\"\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"heatmap-density\"\n\t\t\t],\n\t\t\t0,\n\t\t\t\"rgba(0, 0, 255, 0)\",\n\t\t\t0.1,\n\t\t\t\"royalblue\",\n\t\t\t0.3,\n\t\t\t\"cyan\",\n\t\t\t0.5,\n\t\t\t\"lime\",\n\t\t\t0.7,\n\t\t\t\"yellow\",\n\t\t\t1,\n\t\t\t\"red\"\n\t\t],\n\t\ttransition: false,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"heatmap-density\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"color-ramp\"\n\t},\n\t\"heatmap-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t}\n};\nvar paint_symbol = {\n\t\"icon-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-halo-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"rgba(0, 0, 0, 0)\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-halo-width\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-halo-blur\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"icon-translate\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"icon-image\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"icon-translate-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"map\",\n\t\trequires: [\n\t\t\t\"icon-image\",\n\t\t\t\"icon-translate\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\toverridable: true,\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-halo-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"rgba(0, 0, 0, 0)\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-halo-width\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-halo-blur\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"text-translate\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\trequires: [\n\t\t\t\"text-field\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"text-translate-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"map\",\n\t\trequires: [\n\t\t\t\"text-field\",\n\t\t\t\"text-translate\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t}\n};\nvar paint_raster = {\n\t\"raster-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"raster-hue-rotate\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tperiod: 360,\n\t\ttransition: true,\n\t\tunits: \"degrees\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"raster-brightness-min\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"raster-brightness-max\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"raster-saturation\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: -1,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"raster-contrast\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: -1,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"raster-resampling\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tlinear: {\n\t\t\t},\n\t\t\tnearest: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"linear\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"raster-fade-duration\": {\n\t\ttype: \"number\",\n\t\t\"default\": 300,\n\t\tminimum: 0,\n\t\ttransition: false,\n\t\tunits: \"milliseconds\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t}\n};\nvar paint_hillshade = {\n\t\"hillshade-illumination-direction\": {\n\t\ttype: \"number\",\n\t\t\"default\": 335,\n\t\tminimum: 0,\n\t\tmaximum: 359,\n\t\ttransition: false,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"hillshade-illumination-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"viewport\",\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"hillshade-exaggeration\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0.5,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"hillshade-shadow-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"hillshade-highlight-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#FFFFFF\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"hillshade-accent-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t}\n};\nvar paint_background = {\n\t\"background-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"!\": \"background-pattern\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"background-pattern\": {\n\t\ttype: \"resolvedImage\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"cross-faded\"\n\t},\n\t\"background-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t}\n};\nvar transition = {\n\tduration: {\n\t\ttype: \"number\",\n\t\t\"default\": 300,\n\t\tminimum: 0,\n\t\tunits: \"milliseconds\"\n\t},\n\tdelay: {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\tunits: \"milliseconds\"\n\t}\n};\nvar promoteId = {\n\t\"*\": {\n\t\ttype: \"string\"\n\t}\n};\nvar v8Spec = {\n\t$version: $version,\n\t$root: $root,\n\tsources: sources,\n\tsource: source,\n\tsource_vector: source_vector,\n\tsource_raster: source_raster,\n\tsource_raster_dem: source_raster_dem,\n\tsource_geojson: source_geojson,\n\tsource_video: source_video,\n\tsource_image: source_image,\n\tlayer: layer,\n\tlayout: layout,\n\tlayout_background: layout_background,\n\tlayout_fill: layout_fill,\n\tlayout_circle: layout_circle,\n\tlayout_heatmap: layout_heatmap,\n\t\"layout_fill-extrusion\": {\n\tvisibility: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tvisible: {\n\t\t\t},\n\t\t\tnone: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"visible\",\n\t\t\"property-type\": \"constant\"\n\t}\n},\n\tlayout_line: layout_line,\n\tlayout_symbol: layout_symbol,\n\tlayout_raster: layout_raster,\n\tlayout_hillshade: layout_hillshade,\n\tfilter: filter,\n\tfilter_operator: filter_operator,\n\tgeometry_type: geometry_type,\n\t\"function\": {\n\texpression: {\n\t\ttype: \"expression\"\n\t},\n\tstops: {\n\t\ttype: \"array\",\n\t\tvalue: \"function_stop\"\n\t},\n\tbase: {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0\n\t},\n\tproperty: {\n\t\ttype: \"string\",\n\t\t\"default\": \"$zoom\"\n\t},\n\ttype: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tidentity: {\n\t\t\t},\n\t\t\texponential: {\n\t\t\t},\n\t\t\tinterval: {\n\t\t\t},\n\t\t\tcategorical: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"exponential\"\n\t},\n\tcolorSpace: {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\trgb: {\n\t\t\t},\n\t\t\tlab: {\n\t\t\t},\n\t\t\thcl: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"rgb\"\n\t},\n\t\"default\": {\n\t\ttype: \"*\",\n\t\trequired: false\n\t}\n},\n\tfunction_stop: function_stop,\n\texpression: expression$1,\n\tlight: light,\n\tsky: sky,\n\tterrain: terrain,\n\tprojection: projection,\n\tpaint: paint,\n\tpaint_fill: paint_fill,\n\t\"paint_fill-extrusion\": {\n\t\"fill-extrusion-opacity\": {\n\t\ttype: \"number\",\n\t\t\"default\": 1,\n\t\tminimum: 0,\n\t\tmaximum: 1,\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"fill-extrusion-color\": {\n\t\ttype: \"color\",\n\t\t\"default\": \"#000000\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t{\n\t\t\t\t\"!\": \"fill-extrusion-pattern\"\n\t\t\t}\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"fill-extrusion-translate\": {\n\t\ttype: \"array\",\n\t\tvalue: \"number\",\n\t\tlength: 2,\n\t\t\"default\": [\n\t\t\t0,\n\t\t\t0\n\t\t],\n\t\ttransition: true,\n\t\tunits: \"pixels\",\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"fill-extrusion-translate-anchor\": {\n\t\ttype: \"enum\",\n\t\tvalues: {\n\t\t\tmap: {\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t}\n\t\t},\n\t\t\"default\": \"map\",\n\t\trequires: [\n\t\t\t\"fill-extrusion-translate\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t},\n\t\"fill-extrusion-pattern\": {\n\t\ttype: \"resolvedImage\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"cross-faded-data-driven\"\n\t},\n\t\"fill-extrusion-height\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\tunits: \"meters\",\n\t\ttransition: true,\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"fill-extrusion-base\": {\n\t\ttype: \"number\",\n\t\t\"default\": 0,\n\t\tminimum: 0,\n\t\tunits: \"meters\",\n\t\ttransition: true,\n\t\trequires: [\n\t\t\t\"fill-extrusion-height\"\n\t\t],\n\t\texpression: {\n\t\t\tinterpolated: true,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\",\n\t\t\t\t\"feature\",\n\t\t\t\t\"feature-state\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-driven\"\n\t},\n\t\"fill-extrusion-vertical-gradient\": {\n\t\ttype: \"boolean\",\n\t\t\"default\": true,\n\t\ttransition: false,\n\t\texpression: {\n\t\t\tinterpolated: false,\n\t\t\tparameters: [\n\t\t\t\t\"zoom\"\n\t\t\t]\n\t\t},\n\t\t\"property-type\": \"data-constant\"\n\t}\n},\n\tpaint_line: paint_line,\n\tpaint_circle: paint_circle,\n\tpaint_heatmap: paint_heatmap,\n\tpaint_symbol: paint_symbol,\n\tpaint_raster: paint_raster,\n\tpaint_hillshade: paint_hillshade,\n\tpaint_background: paint_background,\n\ttransition: transition,\n\t\"property-type\": {\n\t\"data-driven\": {\n\t\ttype: \"property-type\"\n\t},\n\t\"cross-faded\": {\n\t\ttype: \"property-type\"\n\t},\n\t\"cross-faded-data-driven\": {\n\t\ttype: \"property-type\"\n\t},\n\t\"color-ramp\": {\n\t\ttype: \"property-type\"\n\t},\n\t\"data-constant\": {\n\t\ttype: \"property-type\"\n\t},\n\tconstant: {\n\t\ttype: \"property-type\"\n\t}\n},\n\tpromoteId: promoteId\n};\n\nconst refProperties = ['type', 'source', 'source-layer', 'minzoom', 'maxzoom', 'filter', 'layout'];\n\nfunction deref(layer, parent) {\n    const result = {};\n    for (const k in layer) {\n        if (k !== 'ref') {\n            result[k] = layer[k];\n        }\n    }\n    refProperties.forEach((k) => {\n        if (k in parent) {\n            result[k] = parent[k];\n        }\n    });\n    return result;\n}\n/**\n * Given an array of layers, some of which may contain `ref` properties\n * whose value is the `id` of another property, return a new array where\n * such layers have been augmented with the 'type', 'source', etc. properties\n * from the parent layer, and the `ref` property has been removed.\n *\n * The input is not modified. The output may contain references to portions\n * of the input.\n *\n * @private\n * @param {Array<Layer>} layers\n * @returns {Array<Layer>}\n */\nfunction derefLayers(layers) {\n    layers = layers.slice();\n    const map = Object.create(null);\n    for (let i = 0; i < layers.length; i++) {\n        map[layers[i].id] = layers[i];\n    }\n    for (let i = 0; i < layers.length; i++) {\n        if ('ref' in layers[i]) {\n            layers[i] = deref(layers[i], map[layers[i].ref]);\n        }\n    }\n    return layers;\n}\n\n/**\n * Deeply compares two object literals.\n *\n * @private\n */\nfunction deepEqual(a, b) {\n    if (Array.isArray(a)) {\n        if (!Array.isArray(b) || a.length !== b.length)\n            return false;\n        for (let i = 0; i < a.length; i++) {\n            if (!deepEqual(a[i], b[i]))\n                return false;\n        }\n        return true;\n    }\n    if (typeof a === 'object' && a !== null && b !== null) {\n        if (!(typeof b === 'object'))\n            return false;\n        const keys = Object.keys(a);\n        if (keys.length !== Object.keys(b).length)\n            return false;\n        for (const key in a) {\n            if (!deepEqual(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    return a === b;\n}\n\n/**\n * The main reason for this method is to allow type check when adding a command to the array.\n * @param commands - The commands array to add to\n * @param command - The command to add\n */\nfunction addCommand(commands, command) {\n    commands.push(command);\n}\nfunction addSource(sourceId, after, commands) {\n    addCommand(commands, { command: 'addSource', args: [sourceId, after[sourceId]] });\n}\nfunction removeSource(sourceId, commands, sourcesRemoved) {\n    addCommand(commands, { command: 'removeSource', args: [sourceId] });\n    sourcesRemoved[sourceId] = true;\n}\nfunction updateSource(sourceId, after, commands, sourcesRemoved) {\n    removeSource(sourceId, commands, sourcesRemoved);\n    addSource(sourceId, after, commands);\n}\nfunction canUpdateGeoJSON(before, after, sourceId) {\n    let prop;\n    for (prop in before[sourceId]) {\n        if (!Object.prototype.hasOwnProperty.call(before[sourceId], prop))\n            continue;\n        if (prop !== 'data' && !deepEqual(before[sourceId][prop], after[sourceId][prop])) {\n            return false;\n        }\n    }\n    for (prop in after[sourceId]) {\n        if (!Object.prototype.hasOwnProperty.call(after[sourceId], prop))\n            continue;\n        if (prop !== 'data' && !deepEqual(before[sourceId][prop], after[sourceId][prop])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction diffSources(before, after, commands, sourcesRemoved) {\n    before = before || {};\n    after = after || {};\n    let sourceId;\n    // look for sources to remove\n    for (sourceId in before) {\n        if (!Object.prototype.hasOwnProperty.call(before, sourceId))\n            continue;\n        if (!Object.prototype.hasOwnProperty.call(after, sourceId)) {\n            removeSource(sourceId, commands, sourcesRemoved);\n        }\n    }\n    // look for sources to add/update\n    for (sourceId in after) {\n        if (!Object.prototype.hasOwnProperty.call(after, sourceId))\n            continue;\n        if (!Object.prototype.hasOwnProperty.call(before, sourceId)) {\n            addSource(sourceId, after, commands);\n        }\n        else if (!deepEqual(before[sourceId], after[sourceId])) {\n            if (before[sourceId].type === 'geojson' && after[sourceId].type === 'geojson' && canUpdateGeoJSON(before, after, sourceId)) {\n                addCommand(commands, { command: 'setGeoJSONSourceData', args: [sourceId, after[sourceId].data] });\n            }\n            else {\n                // no update command, must remove then add\n                updateSource(sourceId, after, commands, sourcesRemoved);\n            }\n        }\n    }\n}\nfunction diffLayerPropertyChanges(before, after, commands, layerId, klass, command) {\n    before = before || {};\n    after = after || {};\n    for (const prop in before) {\n        if (!Object.prototype.hasOwnProperty.call(before, prop))\n            continue;\n        if (!deepEqual(before[prop], after[prop])) {\n            commands.push({ command, args: [layerId, prop, after[prop], klass] });\n        }\n    }\n    for (const prop in after) {\n        if (!Object.prototype.hasOwnProperty.call(after, prop) || Object.prototype.hasOwnProperty.call(before, prop))\n            continue;\n        if (!deepEqual(before[prop], after[prop])) {\n            commands.push({ command, args: [layerId, prop, after[prop], klass] });\n        }\n    }\n}\nfunction pluckId(layer) {\n    return layer.id;\n}\nfunction indexById(group, layer) {\n    group[layer.id] = layer;\n    return group;\n}\nfunction diffLayers(before, after, commands) {\n    before = before || [];\n    after = after || [];\n    // order of layers by id\n    const beforeOrder = before.map(pluckId);\n    const afterOrder = after.map(pluckId);\n    // index of layer by id\n    const beforeIndex = before.reduce(indexById, {});\n    const afterIndex = after.reduce(indexById, {});\n    // track order of layers as if they have been mutated\n    const tracker = beforeOrder.slice();\n    // layers that have been added do not need to be diffed\n    const clean = Object.create(null);\n    let layerId;\n    let beforeLayer;\n    let afterLayer;\n    let insertBeforeLayerId;\n    let prop;\n    // remove layers\n    for (let i = 0, d = 0; i < beforeOrder.length; i++) {\n        layerId = beforeOrder[i];\n        if (!Object.prototype.hasOwnProperty.call(afterIndex, layerId)) {\n            addCommand(commands, { command: 'removeLayer', args: [layerId] });\n            tracker.splice(tracker.indexOf(layerId, d), 1);\n        }\n        else {\n            // limit where in tracker we need to look for a match\n            d++;\n        }\n    }\n    // add/reorder layers\n    for (let i = 0, d = 0; i < afterOrder.length; i++) {\n        // work backwards as insert is before an existing layer\n        layerId = afterOrder[afterOrder.length - 1 - i];\n        if (tracker[tracker.length - 1 - i] === layerId)\n            continue;\n        if (Object.prototype.hasOwnProperty.call(beforeIndex, layerId)) {\n            // remove the layer before we insert at the correct position\n            addCommand(commands, { command: 'removeLayer', args: [layerId] });\n            tracker.splice(tracker.lastIndexOf(layerId, tracker.length - d), 1);\n        }\n        else {\n            // limit where in tracker we need to look for a match\n            d++;\n        }\n        // add layer at correct position\n        insertBeforeLayerId = tracker[tracker.length - i];\n        addCommand(commands, { command: 'addLayer', args: [afterIndex[layerId], insertBeforeLayerId] });\n        tracker.splice(tracker.length - i, 0, layerId);\n        clean[layerId] = true;\n    }\n    // update layers\n    for (let i = 0; i < afterOrder.length; i++) {\n        layerId = afterOrder[i];\n        beforeLayer = beforeIndex[layerId];\n        afterLayer = afterIndex[layerId];\n        // no need to update if previously added (new or moved)\n        if (clean[layerId] || deepEqual(beforeLayer, afterLayer))\n            continue;\n        // If source, source-layer, or type have changes, then remove the layer\n        // and add it back 'from scratch'.\n        if (!deepEqual(beforeLayer.source, afterLayer.source) || !deepEqual(beforeLayer['source-layer'], afterLayer['source-layer']) || !deepEqual(beforeLayer.type, afterLayer.type)) {\n            addCommand(commands, { command: 'removeLayer', args: [layerId] });\n            // we add the layer back at the same position it was already in, so\n            // there's no need to update the `tracker`\n            insertBeforeLayerId = tracker[tracker.lastIndexOf(layerId) + 1];\n            addCommand(commands, { command: 'addLayer', args: [afterLayer, insertBeforeLayerId] });\n            continue;\n        }\n        // layout, paint, filter, minzoom, maxzoom\n        diffLayerPropertyChanges(beforeLayer.layout, afterLayer.layout, commands, layerId, null, 'setLayoutProperty');\n        diffLayerPropertyChanges(beforeLayer.paint, afterLayer.paint, commands, layerId, null, 'setPaintProperty');\n        if (!deepEqual(beforeLayer.filter, afterLayer.filter)) {\n            addCommand(commands, { command: 'setFilter', args: [layerId, afterLayer.filter] });\n        }\n        if (!deepEqual(beforeLayer.minzoom, afterLayer.minzoom) || !deepEqual(beforeLayer.maxzoom, afterLayer.maxzoom)) {\n            addCommand(commands, { command: 'setLayerZoomRange', args: [layerId, afterLayer.minzoom, afterLayer.maxzoom] });\n        }\n        // handle all other layer props, including paint.*\n        for (prop in beforeLayer) {\n            if (!Object.prototype.hasOwnProperty.call(beforeLayer, prop))\n                continue;\n            if (prop === 'layout' || prop === 'paint' || prop === 'filter' ||\n                prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom')\n                continue;\n            if (prop.indexOf('paint.') === 0) {\n                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), 'setPaintProperty');\n            }\n            else if (!deepEqual(beforeLayer[prop], afterLayer[prop])) {\n                addCommand(commands, { command: 'setLayerProperty', args: [layerId, prop, afterLayer[prop]] });\n            }\n        }\n        for (prop in afterLayer) {\n            if (!Object.prototype.hasOwnProperty.call(afterLayer, prop) || Object.prototype.hasOwnProperty.call(beforeLayer, prop))\n                continue;\n            if (prop === 'layout' || prop === 'paint' || prop === 'filter' ||\n                prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom')\n                continue;\n            if (prop.indexOf('paint.') === 0) {\n                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), 'setPaintProperty');\n            }\n            else if (!deepEqual(beforeLayer[prop], afterLayer[prop])) {\n                addCommand(commands, { command: 'setLayerProperty', args: [layerId, prop, afterLayer[prop]] });\n            }\n        }\n    }\n}\n/**\n * Diff two stylesheet\n *\n * Creates semanticly aware diffs that can easily be applied at runtime.\n * Operations produced by the diff closely resemble the maplibre-gl-js API. Any\n * error creating the diff will fall back to the 'setStyle' operation.\n *\n * Example diff:\n * [\n *     { command: 'setConstant', args: ['@water', '#0000FF'] },\n *     { command: 'setPaintProperty', args: ['background', 'background-color', 'black'] }\n * ]\n *\n * @private\n * @param {*} [before] stylesheet to compare from\n * @param {*} after stylesheet to compare to\n * @returns Array list of changes\n */\nfunction diff(before, after) {\n    if (!before)\n        return [{ command: 'setStyle', args: [after] }];\n    let commands = [];\n    try {\n        // Handle changes to top-level properties\n        if (!deepEqual(before.version, after.version)) {\n            return [{ command: 'setStyle', args: [after] }];\n        }\n        if (!deepEqual(before.center, after.center)) {\n            commands.push({ command: 'setCenter', args: [after.center] });\n        }\n        if (!deepEqual(before.centerAltitude, after.centerAltitude)) {\n            commands.push({ command: 'setCenterAltitude', args: [after.centerAltitude] });\n        }\n        if (!deepEqual(before.zoom, after.zoom)) {\n            commands.push({ command: 'setZoom', args: [after.zoom] });\n        }\n        if (!deepEqual(before.bearing, after.bearing)) {\n            commands.push({ command: 'setBearing', args: [after.bearing] });\n        }\n        if (!deepEqual(before.pitch, after.pitch)) {\n            commands.push({ command: 'setPitch', args: [after.pitch] });\n        }\n        if (!deepEqual(before.roll, after.roll)) {\n            commands.push({ command: 'setRoll', args: [after.roll] });\n        }\n        if (!deepEqual(before.sprite, after.sprite)) {\n            commands.push({ command: 'setSprite', args: [after.sprite] });\n        }\n        if (!deepEqual(before.glyphs, after.glyphs)) {\n            commands.push({ command: 'setGlyphs', args: [after.glyphs] });\n        }\n        if (!deepEqual(before.transition, after.transition)) {\n            commands.push({ command: 'setTransition', args: [after.transition] });\n        }\n        if (!deepEqual(before.light, after.light)) {\n            commands.push({ command: 'setLight', args: [after.light] });\n        }\n        if (!deepEqual(before.terrain, after.terrain)) {\n            commands.push({ command: 'setTerrain', args: [after.terrain] });\n        }\n        if (!deepEqual(before.sky, after.sky)) {\n            commands.push({ command: 'setSky', args: [after.sky] });\n        }\n        if (!deepEqual(before.projection, after.projection)) {\n            commands.push({ command: 'setProjection', args: [after.projection] });\n        }\n        // Handle changes to `sources`\n        // If a source is to be removed, we also--before the removeSource\n        // command--need to remove all the style layers that depend on it.\n        const sourcesRemoved = {};\n        // First collect the {add,remove}Source commands\n        const removeOrAddSourceCommands = [];\n        diffSources(before.sources, after.sources, removeOrAddSourceCommands, sourcesRemoved);\n        // Push a removeLayer command for each style layer that depends on a\n        // source that's being removed.\n        // Also, exclude any such layers them from the input to `diffLayers`\n        // below, so that diffLayers produces the appropriate `addLayers`\n        // command\n        const beforeLayers = [];\n        if (before.layers) {\n            before.layers.forEach((layer) => {\n                if ('source' in layer && sourcesRemoved[layer.source]) {\n                    commands.push({ command: 'removeLayer', args: [layer.id] });\n                }\n                else {\n                    beforeLayers.push(layer);\n                }\n            });\n        }\n        commands = commands.concat(removeOrAddSourceCommands);\n        // Handle changes to `layers`\n        diffLayers(beforeLayers, after.layers, commands);\n    }\n    catch (e) {\n        // fall back to setStyle\n        console.warn('Unable to compute style diff:', e);\n        commands = [{ command: 'setStyle', args: [after] }];\n    }\n    return commands;\n}\n\n// Note: Do not inherit from Error. It breaks when transpiling to ES5.\nclass ValidationError {\n    constructor(key, value, message, identifier) {\n        this.message = (key ? `${key}: ` : '') + message;\n        if (identifier)\n            this.identifier = identifier;\n        if (value !== null && value !== undefined && value.__line__) {\n            this.line = value.__line__;\n        }\n    }\n}\n\n// Note: Do not inherit from Error. It breaks when transpiling to ES5.\nclass ParsingError {\n    constructor(error) {\n        this.error = error;\n        this.message = error.message;\n        const match = error.message.match(/line (\\d+)/);\n        this.line = match ? parseInt(match[1], 10) : 0;\n    }\n}\n\nfunction extendBy(output, ...inputs) {\n    for (const input of inputs) {\n        for (const k in input) {\n            output[k] = input[k];\n        }\n    }\n    return output;\n}\n\nclass ExpressionParsingError extends Error {\n    constructor(key, message) {\n        super(message);\n        this.message = message;\n        this.key = key;\n    }\n}\n\n/**\n * Tracks `let` bindings during expression parsing.\n * @private\n */\nclass Scope {\n    constructor(parent, bindings = []) {\n        this.parent = parent;\n        this.bindings = {};\n        for (const [name, expression] of bindings) {\n            this.bindings[name] = expression;\n        }\n    }\n    concat(bindings) {\n        return new Scope(this, bindings);\n    }\n    get(name) {\n        if (this.bindings[name]) {\n            return this.bindings[name];\n        }\n        if (this.parent) {\n            return this.parent.get(name);\n        }\n        throw new Error(`${name} not found in scope.`);\n    }\n    has(name) {\n        if (this.bindings[name])\n            return true;\n        return this.parent ? this.parent.has(name) : false;\n    }\n}\n\nconst NullType = { kind: 'null' };\nconst NumberType = { kind: 'number' };\nconst StringType = { kind: 'string' };\nconst BooleanType = { kind: 'boolean' };\nconst ColorType = { kind: 'color' };\nconst ProjectionDefinitionType = { kind: 'projectionDefinition' };\nconst ObjectType = { kind: 'object' };\nconst ValueType = { kind: 'value' };\nconst ErrorType = { kind: 'error' };\nconst CollatorType = { kind: 'collator' };\nconst FormattedType = { kind: 'formatted' };\nconst PaddingType = { kind: 'padding' };\nconst ResolvedImageType = { kind: 'resolvedImage' };\nconst VariableAnchorOffsetCollectionType = { kind: 'variableAnchorOffsetCollection' };\nfunction array(itemType, N) {\n    return {\n        kind: 'array',\n        itemType,\n        N\n    };\n}\nfunction typeToString(type) {\n    if (type.kind === 'array') {\n        const itemType = typeToString(type.itemType);\n        return typeof type.N === 'number' ?\n            `array<${itemType}, ${type.N}>` :\n            type.itemType.kind === 'value' ? 'array' : `array<${itemType}>`;\n    }\n    else {\n        return type.kind;\n    }\n}\nconst valueMemberTypes = [\n    NullType,\n    NumberType,\n    StringType,\n    BooleanType,\n    ColorType,\n    ProjectionDefinitionType,\n    FormattedType,\n    ObjectType,\n    array(ValueType),\n    PaddingType,\n    ResolvedImageType,\n    VariableAnchorOffsetCollectionType\n];\n/**\n * Returns null if `t` is a subtype of `expected`; otherwise returns an\n * error message.\n * @private\n */\nfunction checkSubtype(expected, t) {\n    if (t.kind === 'error') {\n        // Error is a subtype of every type\n        return null;\n    }\n    else if (expected.kind === 'array') {\n        if (t.kind === 'array' &&\n            ((t.N === 0 && t.itemType.kind === 'value') || !checkSubtype(expected.itemType, t.itemType)) &&\n            (typeof expected.N !== 'number' || expected.N === t.N)) {\n            return null;\n        }\n    }\n    else if (expected.kind === t.kind) {\n        return null;\n    }\n    else if (expected.kind === 'value') {\n        for (const memberType of valueMemberTypes) {\n            if (!checkSubtype(memberType, t)) {\n                return null;\n            }\n        }\n    }\n    return `Expected ${typeToString(expected)} but found ${typeToString(t)} instead.`;\n}\nfunction isValidType(provided, allowedTypes) {\n    return allowedTypes.some(t => t.kind === provided.kind);\n}\nfunction isValidNativeType(provided, allowedTypes) {\n    return allowedTypes.some(t => {\n        if (t === 'null') {\n            return provided === null;\n        }\n        else if (t === 'array') {\n            return Array.isArray(provided);\n        }\n        else if (t === 'object') {\n            return provided && !Array.isArray(provided) && typeof provided === 'object';\n        }\n        else {\n            return t === typeof provided;\n        }\n    });\n}\n/**\n * Verify whether the specified type is of the same type as the specified sample.\n *\n * @param provided Type to verify\n * @param sample Sample type to reference\n * @returns `true` if both objects are of the same type, `false` otherwise\n * @example basic types\n * if (verifyType(outputType, ValueType)) {\n *     // type narrowed to:\n *     outputType.kind; // 'value'\n * }\n * @example array types\n * if (verifyType(outputType, array(NumberType))) {\n *     // type narrowed to:\n *     outputType.kind; // 'array'\n *     outputType.itemType; // NumberTypeT\n *     outputType.itemType.kind; // 'number'\n * }\n */\nfunction verifyType(provided, sample) {\n    if (provided.kind === 'array' && sample.kind === 'array') {\n        return provided.itemType.kind === sample.itemType.kind && typeof provided.N === 'number';\n    }\n    return provided.kind === sample.kind;\n}\n\n// See https://observablehq.com/@mbostock/lab-and-rgb\nconst Xn = 0.96422, Yn = 1, Zn = 0.82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1, deg2rad = Math.PI / 180, rad2deg = 180 / Math.PI;\nfunction constrainAngle(angle) {\n    angle = angle % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nfunction rgbToLab([r, g, b, alpha]) {\n    r = rgb2xyz(r);\n    g = rgb2xyz(g);\n    b = rgb2xyz(b);\n    let x, z;\n    const y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn);\n    if (r === g && g === b) {\n        x = z = y;\n    }\n    else {\n        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n    }\n    const l = 116 * y - 16;\n    return [(l < 0) ? 0 : l, 500 * (x - y), 200 * (y - z), alpha];\n}\nfunction rgb2xyz(x) {\n    return (x <= 0.04045) ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\nfunction xyz2lab(t) {\n    return (t > t3) ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\nfunction labToRgb([l, a, b, alpha]) {\n    let y = (l + 16) / 116, x = isNaN(a) ? y : y + a / 500, z = isNaN(b) ? y : y - b / 200;\n    y = Yn * lab2xyz(y);\n    x = Xn * lab2xyz(x);\n    z = Zn * lab2xyz(z);\n    return [\n        xyz2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), // D50 -> sRGB\n        xyz2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n        xyz2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n        alpha,\n    ];\n}\nfunction xyz2rgb(x) {\n    x = (x <= 0.00304) ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055;\n    return (x < 0) ? 0 : (x > 1) ? 1 : x; // clip to 0..1 range\n}\nfunction lab2xyz(t) {\n    return (t > t1) ? t * t * t : t2 * (t - t0);\n}\nfunction rgbToHcl(rgbColor) {\n    const [l, a, b, alpha] = rgbToLab(rgbColor);\n    const c = Math.sqrt(a * a + b * b);\n    const h = Math.round(c * 10000) ? constrainAngle(Math.atan2(b, a) * rad2deg) : NaN;\n    return [h, c, l, alpha];\n}\nfunction hclToRgb([h, c, l, alpha]) {\n    h = isNaN(h) ? 0 : h * deg2rad;\n    return labToRgb([l, Math.cos(h) * c, Math.sin(h) * c, alpha]);\n}\n// https://drafts.csswg.org/css-color-4/#hsl-to-rgb\nfunction hslToRgb([h, s, l, alpha]) {\n    h = constrainAngle(h);\n    s /= 100;\n    l /= 100;\n    function f(n) {\n        const k = (n + h / 30) % 12;\n        const a = s * Math.min(l, 1 - l);\n        return l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n    }\n    return [f(0), f(8), f(4), alpha];\n}\n\n/**\n * CSS color parser compliant with CSS Color 4 Specification.\n * Supports: named colors, `transparent` keyword, all rgb hex notations,\n * rgb(), rgba(), hsl() and hsla() functions.\n * Does not round the parsed values to integers from the range 0..255.\n *\n * Syntax:\n *\n * <alpha-value> = <number> | <percentage>\n *         <hue> = <number> | <angle>\n *\n *         rgb() = rgb( <percentage>{3} [ / <alpha-value> ]? ) | rgb( <number>{3} [ / <alpha-value> ]? )\n *         rgb() = rgb( <percentage>#{3} , <alpha-value>? )    | rgb( <number>#{3} , <alpha-value>? )\n *\n *         hsl() = hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? )\n *         hsl() = hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )\n *\n * Caveats:\n *   - <angle> - <number> with optional `deg` suffix; `grad`, `rad`, `turn` are not supported\n *   - `none` keyword is not supported\n *   - comments inside rgb()/hsl() are not supported\n *   - legacy color syntax rgba() is supported with an identical grammar and behavior to rgb()\n *   - legacy color syntax hsla() is supported with an identical grammar and behavior to hsl()\n *\n * @param input CSS color string to parse.\n * @returns Color in sRGB color space, with `red`, `green`, `blue`\n * and `alpha` channels normalized to the range 0..1,\n * or `undefined` if the input is not a valid color string.\n */\nfunction parseCssColor(input) {\n    input = input.toLowerCase().trim();\n    if (input === 'transparent') {\n        return [0, 0, 0, 0];\n    }\n    // 'white', 'black', 'blue'\n    const namedColorsMatch = namedColors[input];\n    if (namedColorsMatch) {\n        const [r, g, b] = namedColorsMatch;\n        return [r / 255, g / 255, b / 255, 1];\n    }\n    // #f0c, #f0cf, #ff00cc, #ff00ccff\n    if (input.startsWith('#')) {\n        const hexRegexp = /^#(?:[0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/;\n        if (hexRegexp.test(input)) {\n            const step = input.length < 6 ? 1 : 2;\n            let i = 1;\n            return [\n                parseHex(input.slice(i, i += step)),\n                parseHex(input.slice(i, i += step)),\n                parseHex(input.slice(i, i += step)),\n                parseHex(input.slice(i, i + step) || 'ff'),\n            ];\n        }\n    }\n    // rgb(128 0 0), rgb(50% 0% 0%), rgba(255,0,255,0.6), rgb(255 0 255 / 60%), rgb(100% 0% 100% /.6)\n    if (input.startsWith('rgb')) {\n        const rgbRegExp = /^rgba?\\(\\s*([\\de.+-]+)(%)?(?:\\s+|\\s*(,)\\s*)([\\de.+-]+)(%)?(?:\\s+|\\s*(,)\\s*)([\\de.+-]+)(%)?(?:\\s*([,\\/])\\s*([\\de.+-]+)(%)?)?\\s*\\)$/;\n        const rgbMatch = input.match(rgbRegExp);\n        if (rgbMatch) {\n            const [_, // eslint-disable-line @typescript-eslint/no-unused-vars\n            r, // <numeric>\n            rp, // %         (optional)\n            f1, // ,         (optional)\n            g, // <numeric>\n            gp, // %         (optional)\n            f2, // ,         (optional)\n            b, // <numeric>\n            bp, // %         (optional)\n            f3, // ,|/       (optional)\n            a, // <numeric> (optional)\n            ap, // %         (optional)\n            ] = rgbMatch;\n            const argFormat = [f1 || ' ', f2 || ' ', f3].join('');\n            if (argFormat === '  ' ||\n                argFormat === '  /' ||\n                argFormat === ',,' ||\n                argFormat === ',,,') {\n                const valFormat = [rp, gp, bp].join('');\n                const maxValue = (valFormat === '%%%') ? 100 :\n                    (valFormat === '') ? 255 : 0;\n                if (maxValue) {\n                    const rgba = [\n                        clamp(+r / maxValue, 0, 1),\n                        clamp(+g / maxValue, 0, 1),\n                        clamp(+b / maxValue, 0, 1),\n                        a ? parseAlpha(+a, ap) : 1,\n                    ];\n                    if (validateNumbers(rgba)) {\n                        return rgba;\n                    }\n                    // invalid numbers\n                }\n                // values must be all numbers or all percentages\n            }\n            return; // comma optional syntax requires no commas at all\n        }\n    }\n    // hsl(120 50% 80%), hsla(120deg,50%,80%,.9), hsl(12e1 50% 80% / 90%)\n    const hslRegExp = /^hsla?\\(\\s*([\\de.+-]+)(?:deg)?(?:\\s+|\\s*(,)\\s*)([\\de.+-]+)%(?:\\s+|\\s*(,)\\s*)([\\de.+-]+)%(?:\\s*([,\\/])\\s*([\\de.+-]+)(%)?)?\\s*\\)$/;\n    const hslMatch = input.match(hslRegExp);\n    if (hslMatch) {\n        const [_, // eslint-disable-line @typescript-eslint/no-unused-vars\n        h, // <numeric>\n        f1, // ,         (optional)\n        s, // <numeric>\n        f2, // ,         (optional)\n        l, // <numeric>\n        f3, // ,|/       (optional)\n        a, // <numeric> (optional)\n        ap, // %         (optional)\n        ] = hslMatch;\n        const argFormat = [f1 || ' ', f2 || ' ', f3].join('');\n        if (argFormat === '  ' ||\n            argFormat === '  /' ||\n            argFormat === ',,' ||\n            argFormat === ',,,') {\n            const hsla = [\n                +h,\n                clamp(+s, 0, 100),\n                clamp(+l, 0, 100),\n                a ? parseAlpha(+a, ap) : 1,\n            ];\n            if (validateNumbers(hsla)) {\n                return hslToRgb(hsla);\n            }\n            // invalid numbers\n        }\n        // comma optional syntax requires no commas at all\n    }\n}\nfunction parseHex(hex) {\n    return parseInt(hex.padEnd(2, hex), 16) / 255;\n}\nfunction parseAlpha(a, asPercentage) {\n    return clamp(asPercentage ? (a / 100) : a, 0, 1);\n}\nfunction clamp(n, min, max) {\n    return Math.min(Math.max(min, n), max);\n}\n/**\n * The regular expression for numeric values is not super specific, and it may\n * happen that it will accept a value that is not a valid number. In order to\n * detect and eliminate such values this function exists.\n *\n * @param array Array of uncertain numbers.\n * @returns `true` if the specified array contains only valid numbers, `false` otherwise.\n */\nfunction validateNumbers(array) {\n    return !array.some(Number.isNaN);\n}\n/**\n * To generate:\n * - visit {@link https://www.w3.org/TR/css-color-4/#named-colors}\n * - run in the console:\n * @example\n * copy(`{\\n${[...document.querySelector('.named-color-table tbody').children].map((tr) => `${tr.cells[2].textContent.trim()}: [${tr.cells[4].textContent.trim().split(/\\s+/).join(', ')}],`).join('\\n')}\\n}`);\n */\nconst namedColors = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50],\n};\n\nfunction interpolateNumber(from, to, t) {\n    return from + t * (to - from);\n}\nfunction interpolateArray(from, to, t) {\n    return from.map((d, i) => {\n        return interpolateNumber(d, to[i], t);\n    });\n}\n\n/**\n * Checks whether the specified color space is one of the supported interpolation color spaces.\n *\n * @param colorSpace Color space key to verify.\n * @returns `true` if the specified color space is one of the supported\n * interpolation color spaces, `false` otherwise\n */\nfunction isSupportedInterpolationColorSpace(colorSpace) {\n    return colorSpace === 'rgb' || colorSpace === 'hcl' || colorSpace === 'lab';\n}\n/**\n * Color representation used by WebGL.\n * Defined in sRGB color space and pre-blended with alpha.\n * @private\n */\nclass Color {\n    /**\n     * @param r Red component premultiplied by `alpha` 0..1\n     * @param g Green component premultiplied by `alpha` 0..1\n     * @param b Blue component premultiplied by `alpha` 0..1\n     * @param [alpha=1] Alpha component 0..1\n     * @param [premultiplied=true] Whether the `r`, `g` and `b` values have already\n     * been multiplied by alpha. If `true` nothing happens if `false` then they will\n     * be multiplied automatically.\n     */\n    constructor(r, g, b, alpha = 1, premultiplied = true) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = alpha;\n        if (!premultiplied) {\n            this.r *= alpha;\n            this.g *= alpha;\n            this.b *= alpha;\n            if (!alpha) {\n                // alpha = 0 erases completely rgb channels. This behavior is not desirable\n                // if this particular color is later used in color interpolation.\n                // Because of that, a reference to original color is saved.\n                this.overwriteGetter('rgb', [r, g, b, alpha]);\n            }\n        }\n    }\n    /**\n     * Parses CSS color strings and converts colors to sRGB color space if needed.\n     * Officially supported color formats:\n     * - keyword, e.g. 'aquamarine' or 'steelblue'\n     * - hex (with 3, 4, 6 or 8 digits), e.g. '#f0f' or '#e9bebea9'\n     * - rgb and rgba, e.g. 'rgb(0,240,120)' or 'rgba(0%,94%,47%,0.1)' or 'rgb(0 240 120 / .3)'\n     * - hsl and hsla, e.g. 'hsl(0,0%,83%)' or 'hsla(0,0%,83%,.5)' or 'hsl(0 0% 83% / 20%)'\n     *\n     * @param input CSS color string to parse.\n     * @returns A `Color` instance, or `undefined` if the input is not a valid color string.\n     */\n    static parse(input) {\n        // in zoom-and-property function input could be an instance of Color class\n        if (input instanceof Color) {\n            return input;\n        }\n        if (typeof input !== 'string') {\n            return;\n        }\n        const rgba = parseCssColor(input);\n        if (rgba) {\n            return new Color(...rgba, false);\n        }\n    }\n    /**\n     * Used in color interpolation and by 'to-rgba' expression.\n     *\n     * @returns Gien color, with reversed alpha blending, in sRGB color space.\n     */\n    get rgb() {\n        const { r, g, b, a } = this;\n        const f = a || Infinity; // reverse alpha blending factor\n        return this.overwriteGetter('rgb', [r / f, g / f, b / f, a]);\n    }\n    /**\n     * Used in color interpolation.\n     *\n     * @returns Gien color, with reversed alpha blending, in HCL color space.\n     */\n    get hcl() {\n        return this.overwriteGetter('hcl', rgbToHcl(this.rgb));\n    }\n    /**\n     * Used in color interpolation.\n     *\n     * @returns Gien color, with reversed alpha blending, in LAB color space.\n     */\n    get lab() {\n        return this.overwriteGetter('lab', rgbToLab(this.rgb));\n    }\n    /**\n     * Lazy getter pattern. When getter is called for the first time lazy value\n     * is calculated and then overwrites getter function in given object instance.\n     *\n     * @example:\n     * const redColor = Color.parse('red');\n     * let x = redColor.hcl; // this will invoke `get hcl()`, which will calculate\n     * // the value of red in HCL space and invoke this `overwriteGetter` function\n     * // which in turn will set a field with a key 'hcl' in the `redColor` object.\n     * // In other words it will override `get hcl()` from its `Color` prototype\n     * // with its own property: hcl = [calculated red value in hcl].\n     * let y = redColor.hcl; // next call will no longer invoke getter but simply\n     * // return the previously calculated value\n     * x === y; // true - `x` is exactly the same object as `y`\n     *\n     * @param getterKey Getter key\n     * @param lazyValue Lazily calculated value to be memoized by current instance\n     * @private\n     */\n    overwriteGetter(getterKey, lazyValue) {\n        Object.defineProperty(this, getterKey, { value: lazyValue });\n        return lazyValue;\n    }\n    /**\n     * Used by 'to-string' expression.\n     *\n     * @returns Serialized color in format `rgba(r,g,b,a)`\n     * where r,g,b are numbers within 0..255 and alpha is number within 1..0\n     *\n     * @example\n     * var purple = new Color.parse('purple');\n     * purple.toString; // = \"rgba(128,0,128,1)\"\n     * var translucentGreen = new Color.parse('rgba(26, 207, 26, .73)');\n     * translucentGreen.toString(); // = \"rgba(26,207,26,0.73)\"\n     */\n    toString() {\n        const [r, g, b, a] = this.rgb;\n        return `rgba(${[r, g, b].map(n => Math.round(n * 255)).join(',')},${a})`;\n    }\n    static interpolate(from, to, t, spaceKey = 'rgb') {\n        switch (spaceKey) {\n            case 'rgb': {\n                const [r, g, b, alpha] = interpolateArray(from.rgb, to.rgb, t);\n                return new Color(r, g, b, alpha, false);\n            }\n            case 'hcl': {\n                const [hue0, chroma0, light0, alphaF] = from.hcl;\n                const [hue1, chroma1, light1, alphaT] = to.hcl;\n                // https://github.com/gka/chroma.js/blob/cd1b3c0926c7a85cbdc3b1453b3a94006de91a92/src/interpolator/_hsx.js\n                let hue, chroma;\n                if (!isNaN(hue0) && !isNaN(hue1)) {\n                    let dh = hue1 - hue0;\n                    if (hue1 > hue0 && dh > 180) {\n                        dh -= 360;\n                    }\n                    else if (hue1 < hue0 && hue0 - hue1 > 180) {\n                        dh += 360;\n                    }\n                    hue = hue0 + t * dh;\n                }\n                else if (!isNaN(hue0)) {\n                    hue = hue0;\n                    if (light1 === 1 || light1 === 0)\n                        chroma = chroma0;\n                }\n                else if (!isNaN(hue1)) {\n                    hue = hue1;\n                    if (light0 === 1 || light0 === 0)\n                        chroma = chroma1;\n                }\n                else {\n                    hue = NaN;\n                }\n                const [r, g, b, alpha] = hclToRgb([\n                    hue,\n                    chroma !== null && chroma !== void 0 ? chroma : interpolateNumber(chroma0, chroma1, t),\n                    interpolateNumber(light0, light1, t),\n                    interpolateNumber(alphaF, alphaT, t),\n                ]);\n                return new Color(r, g, b, alpha, false);\n            }\n            case 'lab': {\n                const [r, g, b, alpha] = labToRgb(interpolateArray(from.lab, to.lab, t));\n                return new Color(r, g, b, alpha, false);\n            }\n        }\n    }\n}\nColor.black = new Color(0, 0, 0, 1);\nColor.white = new Color(1, 1, 1, 1);\nColor.transparent = new Color(0, 0, 0, 0);\nColor.red = new Color(1, 0, 0, 1);\n\n// Flow type declarations for Intl cribbed from\n// https://github.com/facebook/flow/issues/1270\nclass Collator {\n    constructor(caseSensitive, diacriticSensitive, locale) {\n        if (caseSensitive)\n            this.sensitivity = diacriticSensitive ? 'variant' : 'case';\n        else\n            this.sensitivity = diacriticSensitive ? 'accent' : 'base';\n        this.locale = locale;\n        this.collator = new Intl.Collator(this.locale ? this.locale : [], { sensitivity: this.sensitivity, usage: 'search' });\n    }\n    compare(lhs, rhs) {\n        return this.collator.compare(lhs, rhs);\n    }\n    resolvedLocale() {\n        // We create a Collator without \"usage: search\" because we don't want\n        // the search options encoded in our result (e.g. \"en-u-co-search\")\n        return new Intl.Collator(this.locale ? this.locale : [])\n            .resolvedOptions().locale;\n    }\n}\n\nclass FormattedSection {\n    constructor(text, image, scale, fontStack, textColor) {\n        this.text = text;\n        this.image = image;\n        this.scale = scale;\n        this.fontStack = fontStack;\n        this.textColor = textColor;\n    }\n}\nclass Formatted {\n    constructor(sections) {\n        this.sections = sections;\n    }\n    static fromString(unformatted) {\n        return new Formatted([new FormattedSection(unformatted, null, null, null, null)]);\n    }\n    isEmpty() {\n        if (this.sections.length === 0)\n            return true;\n        return !this.sections.some(section => section.text.length !== 0 ||\n            (section.image && section.image.name.length !== 0));\n    }\n    static factory(text) {\n        if (text instanceof Formatted) {\n            return text;\n        }\n        else {\n            return Formatted.fromString(text);\n        }\n    }\n    toString() {\n        if (this.sections.length === 0)\n            return '';\n        return this.sections.map(section => section.text).join('');\n    }\n}\n\n/**\n * A set of four numbers representing padding around a box. Create instances from\n * bare arrays or numeric values using the static method `Padding.parse`.\n * @private\n */\nclass Padding {\n    constructor(values) {\n        this.values = values.slice();\n    }\n    /**\n     * Numeric padding values\n     * @param input A padding value\n     * @returns A `Padding` instance, or `undefined` if the input is not a valid padding value.\n     */\n    static parse(input) {\n        if (input instanceof Padding) {\n            return input;\n        }\n        // Backwards compatibility: bare number is treated the same as array with single value.\n        // Padding applies to all four sides.\n        if (typeof input === 'number') {\n            return new Padding([input, input, input, input]);\n        }\n        if (!Array.isArray(input)) {\n            return undefined;\n        }\n        if (input.length < 1 || input.length > 4) {\n            return undefined;\n        }\n        for (const val of input) {\n            if (typeof val !== 'number') {\n                return undefined;\n            }\n        }\n        // Expand shortcut properties into explicit 4-sided values\n        switch (input.length) {\n            case 1:\n                input = [input[0], input[0], input[0], input[0]];\n                break;\n            case 2:\n                input = [input[0], input[1], input[0], input[1]];\n                break;\n            case 3:\n                input = [input[0], input[1], input[2], input[1]];\n                break;\n        }\n        return new Padding(input);\n    }\n    toString() {\n        return JSON.stringify(this.values);\n    }\n    static interpolate(from, to, t) {\n        return new Padding(interpolateArray(from.values, to.values, t));\n    }\n}\n\nclass RuntimeError {\n    constructor(message) {\n        this.name = 'ExpressionEvaluationError';\n        this.message = message;\n    }\n    toJSON() {\n        return this.message;\n    }\n}\n\n/** Set of valid anchor positions, as a set for validation */\nconst anchors = new Set(['center', 'left', 'right', 'top', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']);\n/**\n * Utility class to assist managing values for text-variable-anchor-offset property. Create instances from\n * bare arrays using the static method `VariableAnchorOffsetCollection.parse`.\n * @private\n */\nclass VariableAnchorOffsetCollection {\n    constructor(values) {\n        this.values = values.slice();\n    }\n    static parse(input) {\n        if (input instanceof VariableAnchorOffsetCollection) {\n            return input;\n        }\n        if (!Array.isArray(input) ||\n            input.length < 1 ||\n            input.length % 2 !== 0) {\n            return undefined;\n        }\n        for (let i = 0; i < input.length; i += 2) {\n            // Elements in even positions should be anchor positions; Elements in odd positions should be offset values\n            const anchorValue = input[i];\n            const offsetValue = input[i + 1];\n            if (typeof anchorValue !== 'string' || !anchors.has(anchorValue)) {\n                return undefined;\n            }\n            if (!Array.isArray(offsetValue) || offsetValue.length !== 2 || typeof offsetValue[0] !== 'number' || typeof offsetValue[1] !== 'number') {\n                return undefined;\n            }\n        }\n        return new VariableAnchorOffsetCollection(input);\n    }\n    toString() {\n        return JSON.stringify(this.values);\n    }\n    static interpolate(from, to, t) {\n        const fromValues = from.values;\n        const toValues = to.values;\n        if (fromValues.length !== toValues.length) {\n            throw new RuntimeError(`Cannot interpolate values of different length. from: ${from.toString()}, to: ${to.toString()}`);\n        }\n        const output = [];\n        for (let i = 0; i < fromValues.length; i += 2) {\n            // Anchor entries must match\n            if (fromValues[i] !== toValues[i]) {\n                throw new RuntimeError(`Cannot interpolate values containing mismatched anchors. from[${i}]: ${fromValues[i]}, to[${i}]: ${toValues[i]}`);\n            }\n            output.push(fromValues[i]);\n            // Interpolate the offset values for each anchor\n            const [fx, fy] = fromValues[i + 1];\n            const [tx, ty] = toValues[i + 1];\n            output.push([interpolateNumber(fx, tx, t), interpolateNumber(fy, ty, t)]);\n        }\n        return new VariableAnchorOffsetCollection(output);\n    }\n}\n\nclass ResolvedImage {\n    constructor(options) {\n        this.name = options.name;\n        this.available = options.available;\n    }\n    toString() {\n        return this.name;\n    }\n    static fromString(name) {\n        if (!name)\n            return null; // treat empty values as no image\n        return new ResolvedImage({ name, available: false });\n    }\n}\n\nclass ProjectionDefinition {\n    constructor(from, to, transition) {\n        this.from = from;\n        this.to = to;\n        this.transition = transition;\n    }\n    static interpolate(from, to, t) {\n        return new ProjectionDefinition(from, to, t);\n    }\n    static parse(input) {\n        if (input instanceof ProjectionDefinition) {\n            return input;\n        }\n        if (Array.isArray(input) && input.length === 3 && typeof input[0] === 'string' && typeof input[1] === 'string' && typeof input[2] === 'number') {\n            return new ProjectionDefinition(input[0], input[1], input[2]);\n        }\n        if (typeof input === 'object' && typeof input.from === 'string' && typeof input.to === 'string' && typeof input.transition === 'number') {\n            return new ProjectionDefinition(input.from, input.to, input.transition);\n        }\n        if (typeof input === 'string') {\n            return new ProjectionDefinition(input, input, 1);\n        }\n        return undefined;\n    }\n}\n\nfunction validateRGBA(r, g, b, a) {\n    if (!(typeof r === 'number' && r >= 0 && r <= 255 &&\n        typeof g === 'number' && g >= 0 && g <= 255 &&\n        typeof b === 'number' && b >= 0 && b <= 255)) {\n        const value = typeof a === 'number' ? [r, g, b, a] : [r, g, b];\n        return `Invalid rgba value [${value.join(', ')}]: 'r', 'g', and 'b' must be between 0 and 255.`;\n    }\n    if (!(typeof a === 'undefined' || (typeof a === 'number' && a >= 0 && a <= 1))) {\n        return `Invalid rgba value [${[r, g, b, a].join(', ')}]: 'a' must be between 0 and 1.`;\n    }\n    return null;\n}\nfunction isValue(mixed) {\n    if (mixed === null ||\n        typeof mixed === 'string' ||\n        typeof mixed === 'boolean' ||\n        typeof mixed === 'number' ||\n        mixed instanceof ProjectionDefinition ||\n        mixed instanceof Color ||\n        mixed instanceof Collator ||\n        mixed instanceof Formatted ||\n        mixed instanceof Padding ||\n        mixed instanceof VariableAnchorOffsetCollection ||\n        mixed instanceof ResolvedImage) {\n        return true;\n    }\n    else if (Array.isArray(mixed)) {\n        for (const item of mixed) {\n            if (!isValue(item)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if (typeof mixed === 'object') {\n        for (const key in mixed) {\n            if (!isValue(mixed[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction typeOf(value) {\n    if (value === null) {\n        return NullType;\n    }\n    else if (typeof value === 'string') {\n        return StringType;\n    }\n    else if (typeof value === 'boolean') {\n        return BooleanType;\n    }\n    else if (typeof value === 'number') {\n        return NumberType;\n    }\n    else if (value instanceof Color) {\n        return ColorType;\n    }\n    else if (value instanceof ProjectionDefinition) {\n        return ProjectionDefinitionType;\n    }\n    else if (value instanceof Collator) {\n        return CollatorType;\n    }\n    else if (value instanceof Formatted) {\n        return FormattedType;\n    }\n    else if (value instanceof Padding) {\n        return PaddingType;\n    }\n    else if (value instanceof VariableAnchorOffsetCollection) {\n        return VariableAnchorOffsetCollectionType;\n    }\n    else if (value instanceof ResolvedImage) {\n        return ResolvedImageType;\n    }\n    else if (Array.isArray(value)) {\n        const length = value.length;\n        let itemType;\n        for (const item of value) {\n            const t = typeOf(item);\n            if (!itemType) {\n                itemType = t;\n            }\n            else if (itemType === t) {\n                continue;\n            }\n            else {\n                itemType = ValueType;\n                break;\n            }\n        }\n        return array(itemType || ValueType, length);\n    }\n    else {\n        return ObjectType;\n    }\n}\nfunction valueToString(value) {\n    const type = typeof value;\n    if (value === null) {\n        return '';\n    }\n    else if (type === 'string' || type === 'number' || type === 'boolean') {\n        return String(value);\n    }\n    else if (value instanceof Color || value instanceof ProjectionDefinition || value instanceof Formatted || value instanceof Padding || value instanceof VariableAnchorOffsetCollection || value instanceof ResolvedImage) {\n        return value.toString();\n    }\n    else {\n        return JSON.stringify(value);\n    }\n}\n\nclass Literal {\n    constructor(type, value) {\n        this.type = type;\n        this.value = value;\n    }\n    static parse(args, context) {\n        if (args.length !== 2)\n            return context.error(`'literal' expression requires exactly one argument, but found ${args.length - 1} instead.`);\n        if (!isValue(args[1]))\n            return context.error('invalid value');\n        const value = args[1];\n        let type = typeOf(value);\n        // special case: infer the item type if possible for zero-length arrays\n        const expected = context.expectedType;\n        if (type.kind === 'array' &&\n            type.N === 0 &&\n            expected &&\n            expected.kind === 'array' &&\n            (typeof expected.N !== 'number' || expected.N === 0)) {\n            type = expected;\n        }\n        return new Literal(type, value);\n    }\n    evaluate() {\n        return this.value;\n    }\n    eachChild() { }\n    outputDefined() {\n        return true;\n    }\n}\n\nconst types$1 = {\n    string: StringType,\n    number: NumberType,\n    boolean: BooleanType,\n    object: ObjectType\n};\nclass Assertion {\n    constructor(type, args) {\n        this.type = type;\n        this.args = args;\n    }\n    static parse(args, context) {\n        if (args.length < 2)\n            return context.error('Expected at least one argument.');\n        let i = 1;\n        let type;\n        const name = args[0];\n        if (name === 'array') {\n            let itemType;\n            if (args.length > 2) {\n                const type = args[1];\n                if (typeof type !== 'string' || !(type in types$1) || type === 'object')\n                    return context.error('The item type argument of \"array\" must be one of string, number, boolean', 1);\n                itemType = types$1[type];\n                i++;\n            }\n            else {\n                itemType = ValueType;\n            }\n            let N;\n            if (args.length > 3) {\n                if (args[2] !== null &&\n                    (typeof args[2] !== 'number' ||\n                        args[2] < 0 ||\n                        args[2] !== Math.floor(args[2]))) {\n                    return context.error('The length argument to \"array\" must be a positive integer literal', 2);\n                }\n                N = args[2];\n                i++;\n            }\n            type = array(itemType, N);\n        }\n        else {\n            if (!types$1[name])\n                throw new Error(`Types doesn't contain name = ${name}`);\n            type = types$1[name];\n        }\n        const parsed = [];\n        for (; i < args.length; i++) {\n            const input = context.parse(args[i], i, ValueType);\n            if (!input)\n                return null;\n            parsed.push(input);\n        }\n        return new Assertion(type, parsed);\n    }\n    evaluate(ctx) {\n        for (let i = 0; i < this.args.length; i++) {\n            const value = this.args[i].evaluate(ctx);\n            const error = checkSubtype(this.type, typeOf(value));\n            if (!error) {\n                return value;\n            }\n            else if (i === this.args.length - 1) {\n                throw new RuntimeError(`Expected value to be of type ${typeToString(this.type)}, but found ${typeToString(typeOf(value))} instead.`);\n            }\n        }\n        throw new Error();\n    }\n    eachChild(fn) {\n        this.args.forEach(fn);\n    }\n    outputDefined() {\n        return this.args.every(arg => arg.outputDefined());\n    }\n}\n\nconst types = {\n    'to-boolean': BooleanType,\n    'to-color': ColorType,\n    'to-number': NumberType,\n    'to-string': StringType\n};\n/**\n * Special form for error-coalescing coercion expressions \"to-number\",\n * \"to-color\".  Since these coercions can fail at runtime, they accept multiple\n * arguments, only evaluating one at a time until one succeeds.\n *\n * @private\n */\nclass Coercion {\n    constructor(type, args) {\n        this.type = type;\n        this.args = args;\n    }\n    static parse(args, context) {\n        if (args.length < 2)\n            return context.error('Expected at least one argument.');\n        const name = args[0];\n        if (!types[name])\n            throw new Error(`Can't parse ${name} as it is not part of the known types`);\n        if ((name === 'to-boolean' || name === 'to-string') && args.length !== 2)\n            return context.error('Expected one argument.');\n        const type = types[name];\n        const parsed = [];\n        for (let i = 1; i < args.length; i++) {\n            const input = context.parse(args[i], i, ValueType);\n            if (!input)\n                return null;\n            parsed.push(input);\n        }\n        return new Coercion(type, parsed);\n    }\n    evaluate(ctx) {\n        switch (this.type.kind) {\n            case 'boolean':\n                return Boolean(this.args[0].evaluate(ctx));\n            case 'color': {\n                let input;\n                let error;\n                for (const arg of this.args) {\n                    input = arg.evaluate(ctx);\n                    error = null;\n                    if (input instanceof Color) {\n                        return input;\n                    }\n                    else if (typeof input === 'string') {\n                        const c = ctx.parseColor(input);\n                        if (c)\n                            return c;\n                    }\n                    else if (Array.isArray(input)) {\n                        if (input.length < 3 || input.length > 4) {\n                            error = `Invalid rgba value ${JSON.stringify(input)}: expected an array containing either three or four numeric values.`;\n                        }\n                        else {\n                            error = validateRGBA(input[0], input[1], input[2], input[3]);\n                        }\n                        if (!error) {\n                            return new Color(input[0] / 255, input[1] / 255, input[2] / 255, input[3]);\n                        }\n                    }\n                }\n                throw new RuntimeError(error || `Could not parse color from value '${typeof input === 'string' ? input : JSON.stringify(input)}'`);\n            }\n            case 'padding': {\n                let input;\n                for (const arg of this.args) {\n                    input = arg.evaluate(ctx);\n                    const pad = Padding.parse(input);\n                    if (pad) {\n                        return pad;\n                    }\n                }\n                throw new RuntimeError(`Could not parse padding from value '${typeof input === 'string' ? input : JSON.stringify(input)}'`);\n            }\n            case 'variableAnchorOffsetCollection': {\n                let input;\n                for (const arg of this.args) {\n                    input = arg.evaluate(ctx);\n                    const coll = VariableAnchorOffsetCollection.parse(input);\n                    if (coll) {\n                        return coll;\n                    }\n                }\n                throw new RuntimeError(`Could not parse variableAnchorOffsetCollection from value '${typeof input === 'string' ? input : JSON.stringify(input)}'`);\n            }\n            case 'number': {\n                let value = null;\n                for (const arg of this.args) {\n                    value = arg.evaluate(ctx);\n                    if (value === null)\n                        return 0;\n                    const num = Number(value);\n                    if (isNaN(num))\n                        continue;\n                    return num;\n                }\n                throw new RuntimeError(`Could not convert ${JSON.stringify(value)} to number.`);\n            }\n            case 'formatted':\n                // There is no explicit 'to-formatted' but this coercion can be implicitly\n                // created by properties that expect the 'formatted' type.\n                return Formatted.fromString(valueToString(this.args[0].evaluate(ctx)));\n            case 'resolvedImage':\n                return ResolvedImage.fromString(valueToString(this.args[0].evaluate(ctx)));\n            case 'projectionDefinition':\n                return this.args[0].evaluate(ctx);\n            default:\n                return valueToString(this.args[0].evaluate(ctx));\n        }\n    }\n    eachChild(fn) {\n        this.args.forEach(fn);\n    }\n    outputDefined() {\n        return this.args.every(arg => arg.outputDefined());\n    }\n}\n\n/**\n * Rearranges items so that all items in the [left, k] are the smallest.\n * The k-th element will have the (k - left + 1)-th smallest value in [left, right].\n *\n * @template T\n * @param {T[]} arr the array to partially sort (in place)\n * @param {number} k middle index for partial sorting (as defined above)\n * @param {number} [left=0] left index of the range to sort\n * @param {number} [right=arr.length-1] right index\n * @param {(a: T, b: T) => number} [compare = (a, b) => a - b] compare function\n */\nfunction quickselect(arr, k, left = 0, right = arr.length - 1, compare = defaultCompare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselect(arr, k, newLeft, newRight, compare);\n        }\n\n        const t = arr[k];\n        let i = left;\n        /** @type {number} */\n        let j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\n/**\n * @template T\n * @param {T[]} arr\n * @param {number} i\n * @param {number} j\n */\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n/**\n * @template T\n * @param {T} a\n * @param {T} b\n * @returns {number}\n */\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * Classifies an array of rings into polygons with outer rings and holes\n * @param rings - the rings to classify\n * @param maxRings - the maximum number of rings to include in a polygon, use 0 to include all rings\n * @returns an array of polygons with internal rings as holes\n */\nfunction classifyRings(rings, maxRings) {\n    const len = rings.length;\n    if (len <= 1)\n        return [rings];\n    const polygons = [];\n    let polygon;\n    let ccw;\n    for (const ring of rings) {\n        const area = calculateSignedArea(ring);\n        if (area === 0)\n            continue;\n        ring.area = Math.abs(area);\n        if (ccw === undefined)\n            ccw = area < 0;\n        if (ccw === area < 0) {\n            if (polygon)\n                polygons.push(polygon);\n            polygon = [ring];\n        }\n        else {\n            polygon.push(ring);\n        }\n    }\n    if (polygon)\n        polygons.push(polygon);\n    // Earcut performance degrades with the # of rings in a polygon. For this\n    // reason, we limit strip out all but the `maxRings` largest rings.\n    if (maxRings > 1) {\n        for (let j = 0; j < polygons.length; j++) {\n            if (polygons[j].length <= maxRings)\n                continue;\n            quickselect(polygons[j], maxRings, 1, polygons[j].length - 1, compareAreas);\n            polygons[j] = polygons[j].slice(0, maxRings);\n        }\n    }\n    return polygons;\n}\nfunction compareAreas(a, b) {\n    return b.area - a.area;\n}\n/**\n * Returns the signed area for the polygon ring.  Positive areas are exterior rings and\n * have a clockwise winding.  Negative areas are interior rings and have a counter clockwise\n * ordering.\n *\n * @param ring - Exterior or interior ring\n * @returns Signed area\n */\nfunction calculateSignedArea(ring) {\n    let sum = 0;\n    for (let i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {\n        p1 = ring[i];\n        p2 = ring[j];\n        sum += (p2.x - p1.x) * (p1.y + p2.y);\n    }\n    return sum;\n}\n/**\n * Returns if there are multiple outer rings.\n * The first ring is an outer ring. Its direction, cw or ccw, defines the direction of outer rings.\n *\n * @param rings - List of rings\n * @returns Are there multiple outer rings\n */\nfunction hasMultipleOuterRings(rings) {\n    // Following https://github.com/mapbox/vector-tile-js/blob/77851380b63b07fd0af3d5a3f144cc86fb39fdd1/lib/vectortilefeature.js#L197\n    const len = rings.length;\n    for (let i = 0, direction; i < len; i++) {\n        const area = calculateSignedArea(rings[i]);\n        if (area === 0)\n            continue;\n        if (direction === undefined) {\n            // Keep the direction of the first ring\n            direction = area < 0;\n        }\n        else if (direction === area < 0) {\n            // Same direction as the first ring -> a second outer ring\n            return true;\n        }\n    }\n    return false;\n}\n\nconst geometryTypes = ['Unknown', 'Point', 'LineString', 'Polygon'];\nconst simpleGeometryType = {\n    'Unknown': 'Unknown',\n    'Point': 'Point',\n    'MultiPoint': 'Point',\n    'LineString': 'LineString',\n    'MultiLineString': 'LineString',\n    'Polygon': 'Polygon',\n    'MultiPolygon': 'Polygon'\n};\nclass EvaluationContext {\n    constructor() {\n        this.globals = null;\n        this.feature = null;\n        this.featureState = null;\n        this.formattedSection = null;\n        this._parseColorCache = {};\n        this.availableImages = null;\n        this.canonical = null;\n    }\n    id() {\n        return this.feature && 'id' in this.feature ? this.feature.id : null;\n    }\n    geometryDollarType() {\n        return this.feature ?\n            typeof this.feature.type === 'number' ? geometryTypes[this.feature.type] : simpleGeometryType[this.feature.type] :\n            null;\n    }\n    geometryType() {\n        let geometryType = this.feature.type;\n        if (typeof geometryType !== 'number') {\n            return geometryType;\n        }\n        geometryType = geometryTypes[this.feature.type];\n        if (geometryType === 'Unknown') {\n            return geometryType;\n        }\n        const geom = this.geometry();\n        const len = geom.length;\n        if (len === 1) {\n            return geometryType;\n        }\n        if (geometryType !== 'Polygon') {\n            return `Multi${geometryType}`;\n        }\n        if (hasMultipleOuterRings(geom)) {\n            return 'MultiPolygon';\n        }\n        return 'Polygon';\n    }\n    geometry() {\n        return this.feature && 'geometry' in this.feature ? this.feature.geometry : null;\n    }\n    canonicalID() {\n        return this.canonical;\n    }\n    properties() {\n        return this.feature && this.feature.properties || {};\n    }\n    parseColor(input) {\n        let cached = this._parseColorCache[input];\n        if (!cached) {\n            cached = this._parseColorCache[input] = Color.parse(input);\n        }\n        return cached;\n    }\n}\n\n/**\n * State associated parsing at a given point in an expression tree.\n * @private\n */\nclass ParsingContext {\n    constructor(registry, isConstantFunc, path = [], expectedType, scope = new Scope(), errors = []) {\n        this.registry = registry;\n        this.path = path;\n        this.key = path.map(part => `[${part}]`).join('');\n        this.scope = scope;\n        this.errors = errors;\n        this.expectedType = expectedType;\n        this._isConstant = isConstantFunc;\n    }\n    /**\n     * @param expr the JSON expression to parse\n     * @param index the optional argument index if this expression is an argument of a parent expression that's being parsed\n     * @param options\n     * @param options.omitTypeAnnotations set true to omit inferred type annotations.  Caller beware: with this option set, the parsed expression's type will NOT satisfy `expectedType` if it would normally be wrapped in an inferred annotation.\n     * @private\n     */\n    parse(expr, index, expectedType, bindings, options = {}) {\n        if (index) {\n            return this.concat(index, expectedType, bindings)._parse(expr, options);\n        }\n        return this._parse(expr, options);\n    }\n    _parse(expr, options) {\n        if (expr === null || typeof expr === 'string' || typeof expr === 'boolean' || typeof expr === 'number') {\n            expr = ['literal', expr];\n        }\n        function annotate(parsed, type, typeAnnotation) {\n            if (typeAnnotation === 'assert') {\n                return new Assertion(type, [parsed]);\n            }\n            else if (typeAnnotation === 'coerce') {\n                return new Coercion(type, [parsed]);\n            }\n            else {\n                return parsed;\n            }\n        }\n        if (Array.isArray(expr)) {\n            if (expr.length === 0) {\n                return this.error('Expected an array with at least one element. If you wanted a literal array, use [\"literal\", []].');\n            }\n            const op = expr[0];\n            if (typeof op !== 'string') {\n                this.error(`Expression name must be a string, but found ${typeof op} instead. If you wanted a literal array, use [\"literal\", [...]].`, 0);\n                return null;\n            }\n            const Expr = this.registry[op];\n            if (Expr) {\n                let parsed = Expr.parse(expr, this);\n                if (!parsed)\n                    return null;\n                if (this.expectedType) {\n                    const expected = this.expectedType;\n                    const actual = parsed.type;\n                    // When we expect a number, string, boolean, or array but have a value, wrap it in an assertion.\n                    // When we expect a color or formatted string, but have a string or value, wrap it in a coercion.\n                    // Otherwise, we do static type-checking.\n                    //\n                    // These behaviors are overridable for:\n                    //   * The \"coalesce\" operator, which needs to omit type annotations.\n                    //   * String-valued properties (e.g. `text-field`), where coercion is more convenient than assertion.\n                    //\n                    if ((expected.kind === 'string' || expected.kind === 'number' || expected.kind === 'boolean' || expected.kind === 'object' || expected.kind === 'array') && actual.kind === 'value') {\n                        parsed = annotate(parsed, expected, options.typeAnnotation || 'assert');\n                    }\n                    else if ((expected.kind === 'projectionDefinition') && (actual.kind === 'string' || actual.kind === 'array')) {\n                        parsed = annotate(parsed, expected, options.typeAnnotation || 'coerce');\n                    }\n                    else if ((expected.kind === 'color' || expected.kind === 'formatted' || expected.kind === 'resolvedImage') && (actual.kind === 'value' || actual.kind === 'string')) {\n                        parsed = annotate(parsed, expected, options.typeAnnotation || 'coerce');\n                    }\n                    else if (expected.kind === 'padding' && (actual.kind === 'value' || actual.kind === 'number' || actual.kind === 'array')) {\n                        parsed = annotate(parsed, expected, options.typeAnnotation || 'coerce');\n                    }\n                    else if (expected.kind === 'variableAnchorOffsetCollection' && (actual.kind === 'value' || actual.kind === 'array')) {\n                        parsed = annotate(parsed, expected, options.typeAnnotation || 'coerce');\n                    }\n                    else if (this.checkSubtype(expected, actual)) {\n                        return null;\n                    }\n                }\n                // If an expression's arguments are all literals, we can evaluate\n                // it immediately and replace it with a literal value in the\n                // parsed/compiled result. Expressions that expect an image should\n                // not be resolved here so we can later get the available images.\n                if (!(parsed instanceof Literal) && (parsed.type.kind !== 'resolvedImage') && this._isConstant(parsed)) {\n                    const ec = new EvaluationContext();\n                    try {\n                        parsed = new Literal(parsed.type, parsed.evaluate(ec));\n                    }\n                    catch (e) {\n                        this.error(e.message);\n                        return null;\n                    }\n                }\n                return parsed;\n            }\n            return this.error(`Unknown expression \"${op}\". If you wanted a literal array, use [\"literal\", [...]].`, 0);\n        }\n        else if (typeof expr === 'undefined') {\n            return this.error('\\'undefined\\' value invalid. Use null instead.');\n        }\n        else if (typeof expr === 'object') {\n            return this.error('Bare objects invalid. Use [\"literal\", {...}] instead.');\n        }\n        else {\n            return this.error(`Expected an array, but found ${typeof expr} instead.`);\n        }\n    }\n    /**\n     * Returns a copy of this context suitable for parsing the subexpression at\n     * index `index`, optionally appending to 'let' binding map.\n     *\n     * Note that `errors` property, intended for collecting errors while\n     * parsing, is copied by reference rather than cloned.\n     * @private\n     */\n    concat(index, expectedType, bindings) {\n        const path = typeof index === 'number' ? this.path.concat(index) : this.path;\n        const scope = bindings ? this.scope.concat(bindings) : this.scope;\n        return new ParsingContext(this.registry, this._isConstant, path, expectedType || null, scope, this.errors);\n    }\n    /**\n     * Push a parsing (or type checking) error into the `this.errors`\n     * @param error The message\n     * @param keys Optionally specify the source of the error at a child\n     * of the current expression at `this.key`.\n     * @private\n     */\n    error(error, ...keys) {\n        const key = `${this.key}${keys.map(k => `[${k}]`).join('')}`;\n        this.errors.push(new ExpressionParsingError(key, error));\n    }\n    /**\n     * Returns null if `t` is a subtype of `expected`; otherwise returns an\n     * error message and also pushes it to `this.errors`.\n     * @param expected The expected type\n     * @param t The actual type\n     * @returns null if `t` is a subtype of `expected`; otherwise returns an error message\n     */\n    checkSubtype(expected, t) {\n        const error = checkSubtype(expected, t);\n        if (error)\n            this.error(error);\n        return error;\n    }\n}\n\nclass Let {\n    constructor(bindings, result) {\n        this.type = result.type;\n        this.bindings = [].concat(bindings);\n        this.result = result;\n    }\n    evaluate(ctx) {\n        return this.result.evaluate(ctx);\n    }\n    eachChild(fn) {\n        for (const binding of this.bindings) {\n            fn(binding[1]);\n        }\n        fn(this.result);\n    }\n    static parse(args, context) {\n        if (args.length < 4)\n            return context.error(`Expected at least 3 arguments, but found ${args.length - 1} instead.`);\n        const bindings = [];\n        for (let i = 1; i < args.length - 1; i += 2) {\n            const name = args[i];\n            if (typeof name !== 'string') {\n                return context.error(`Expected string, but found ${typeof name} instead.`, i);\n            }\n            if (/[^a-zA-Z0-9_]/.test(name)) {\n                return context.error('Variable names must contain only alphanumeric characters or \\'_\\'.', i);\n            }\n            const value = context.parse(args[i + 1], i + 1);\n            if (!value)\n                return null;\n            bindings.push([name, value]);\n        }\n        const result = context.parse(args[args.length - 1], args.length - 1, context.expectedType, bindings);\n        if (!result)\n            return null;\n        return new Let(bindings, result);\n    }\n    outputDefined() {\n        return this.result.outputDefined();\n    }\n}\n\nclass Var {\n    constructor(name, boundExpression) {\n        this.type = boundExpression.type;\n        this.name = name;\n        this.boundExpression = boundExpression;\n    }\n    static parse(args, context) {\n        if (args.length !== 2 || typeof args[1] !== 'string')\n            return context.error('\\'var\\' expression requires exactly one string literal argument.');\n        const name = args[1];\n        if (!context.scope.has(name)) {\n            return context.error(`Unknown variable \"${name}\". Make sure \"${name}\" has been bound in an enclosing \"let\" expression before using it.`, 1);\n        }\n        return new Var(name, context.scope.get(name));\n    }\n    evaluate(ctx) {\n        return this.boundExpression.evaluate(ctx);\n    }\n    eachChild() { }\n    outputDefined() {\n        return false;\n    }\n}\n\nclass At {\n    constructor(type, index, input) {\n        this.type = type;\n        this.index = index;\n        this.input = input;\n    }\n    static parse(args, context) {\n        if (args.length !== 3)\n            return context.error(`Expected 2 arguments, but found ${args.length - 1} instead.`);\n        const index = context.parse(args[1], 1, NumberType);\n        const input = context.parse(args[2], 2, array(context.expectedType || ValueType));\n        if (!index || !input)\n            return null;\n        const t = input.type;\n        return new At(t.itemType, index, input);\n    }\n    evaluate(ctx) {\n        const index = this.index.evaluate(ctx);\n        const array = this.input.evaluate(ctx);\n        if (index < 0) {\n            throw new RuntimeError(`Array index out of bounds: ${index} < 0.`);\n        }\n        if (index >= array.length) {\n            throw new RuntimeError(`Array index out of bounds: ${index} > ${array.length - 1}.`);\n        }\n        if (index !== Math.floor(index)) {\n            throw new RuntimeError(`Array index must be an integer, but found ${index} instead.`);\n        }\n        return array[index];\n    }\n    eachChild(fn) {\n        fn(this.index);\n        fn(this.input);\n    }\n    outputDefined() {\n        return false;\n    }\n}\n\nclass In {\n    constructor(needle, haystack) {\n        this.type = BooleanType;\n        this.needle = needle;\n        this.haystack = haystack;\n    }\n    static parse(args, context) {\n        if (args.length !== 3) {\n            return context.error(`Expected 2 arguments, but found ${args.length - 1} instead.`);\n        }\n        const needle = context.parse(args[1], 1, ValueType);\n        const haystack = context.parse(args[2], 2, ValueType);\n        if (!needle || !haystack)\n            return null;\n        if (!isValidType(needle.type, [BooleanType, StringType, NumberType, NullType, ValueType])) {\n            return context.error(`Expected first argument to be of type boolean, string, number or null, but found ${typeToString(needle.type)} instead`);\n        }\n        return new In(needle, haystack);\n    }\n    evaluate(ctx) {\n        const needle = this.needle.evaluate(ctx);\n        const haystack = this.haystack.evaluate(ctx);\n        if (!haystack)\n            return false;\n        if (!isValidNativeType(needle, ['boolean', 'string', 'number', 'null'])) {\n            throw new RuntimeError(`Expected first argument to be of type boolean, string, number or null, but found ${typeToString(typeOf(needle))} instead.`);\n        }\n        if (!isValidNativeType(haystack, ['string', 'array'])) {\n            throw new RuntimeError(`Expected second argument to be of type array or string, but found ${typeToString(typeOf(haystack))} instead.`);\n        }\n        return haystack.indexOf(needle) >= 0;\n    }\n    eachChild(fn) {\n        fn(this.needle);\n        fn(this.haystack);\n    }\n    outputDefined() {\n        return true;\n    }\n}\n\nclass IndexOf {\n    constructor(needle, haystack, fromIndex) {\n        this.type = NumberType;\n        this.needle = needle;\n        this.haystack = haystack;\n        this.fromIndex = fromIndex;\n    }\n    static parse(args, context) {\n        if (args.length <= 2 || args.length >= 5) {\n            return context.error(`Expected 3 or 4 arguments, but found ${args.length - 1} instead.`);\n        }\n        const needle = context.parse(args[1], 1, ValueType);\n        const haystack = context.parse(args[2], 2, ValueType);\n        if (!needle || !haystack)\n            return null;\n        if (!isValidType(needle.type, [BooleanType, StringType, NumberType, NullType, ValueType])) {\n            return context.error(`Expected first argument to be of type boolean, string, number or null, but found ${typeToString(needle.type)} instead`);\n        }\n        if (args.length === 4) {\n            const fromIndex = context.parse(args[3], 3, NumberType);\n            if (!fromIndex)\n                return null;\n            return new IndexOf(needle, haystack, fromIndex);\n        }\n        else {\n            return new IndexOf(needle, haystack);\n        }\n    }\n    evaluate(ctx) {\n        const needle = this.needle.evaluate(ctx);\n        const haystack = this.haystack.evaluate(ctx);\n        if (!isValidNativeType(needle, ['boolean', 'string', 'number', 'null'])) {\n            throw new RuntimeError(`Expected first argument to be of type boolean, string, number or null, but found ${typeToString(typeOf(needle))} instead.`);\n        }\n        let fromIndex;\n        if (this.fromIndex) {\n            fromIndex = this.fromIndex.evaluate(ctx);\n        }\n        if (isValidNativeType(haystack, ['string'])) {\n            const rawIndex = haystack.indexOf(needle, fromIndex);\n            if (rawIndex === -1) {\n                return -1;\n            }\n            else {\n                // The index may be affected by surrogate pairs, so get the length of the preceding substring.\n                return [...haystack.slice(0, rawIndex)].length;\n            }\n        }\n        else if (isValidNativeType(haystack, ['array'])) {\n            return haystack.indexOf(needle, fromIndex);\n        }\n        else {\n            throw new RuntimeError(`Expected second argument to be of type array or string, but found ${typeToString(typeOf(haystack))} instead.`);\n        }\n    }\n    eachChild(fn) {\n        fn(this.needle);\n        fn(this.haystack);\n        if (this.fromIndex) {\n            fn(this.fromIndex);\n        }\n    }\n    outputDefined() {\n        return false;\n    }\n}\n\nclass Match {\n    constructor(inputType, outputType, input, cases, outputs, otherwise) {\n        this.inputType = inputType;\n        this.type = outputType;\n        this.input = input;\n        this.cases = cases;\n        this.outputs = outputs;\n        this.otherwise = otherwise;\n    }\n    static parse(args, context) {\n        if (args.length < 5)\n            return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);\n        if (args.length % 2 !== 1)\n            return context.error('Expected an even number of arguments.');\n        let inputType;\n        let outputType;\n        if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n        const cases = {};\n        const outputs = [];\n        for (let i = 2; i < args.length - 1; i += 2) {\n            let labels = args[i];\n            const value = args[i + 1];\n            if (!Array.isArray(labels)) {\n                labels = [labels];\n            }\n            const labelContext = context.concat(i);\n            if (labels.length === 0) {\n                return labelContext.error('Expected at least one branch label.');\n            }\n            for (const label of labels) {\n                if (typeof label !== 'number' && typeof label !== 'string') {\n                    return labelContext.error('Branch labels must be numbers or strings.');\n                }\n                else if (typeof label === 'number' && Math.abs(label) > Number.MAX_SAFE_INTEGER) {\n                    return labelContext.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);\n                }\n                else if (typeof label === 'number' && Math.floor(label) !== label) {\n                    return labelContext.error('Numeric branch labels must be integer values.');\n                }\n                else if (!inputType) {\n                    inputType = typeOf(label);\n                }\n                else if (labelContext.checkSubtype(inputType, typeOf(label))) {\n                    return null;\n                }\n                if (typeof cases[String(label)] !== 'undefined') {\n                    return labelContext.error('Branch labels must be unique.');\n                }\n                cases[String(label)] = outputs.length;\n            }\n            const result = context.parse(value, i, outputType);\n            if (!result)\n                return null;\n            outputType = outputType || result.type;\n            outputs.push(result);\n        }\n        const input = context.parse(args[1], 1, ValueType);\n        if (!input)\n            return null;\n        const otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);\n        if (!otherwise)\n            return null;\n        if (input.type.kind !== 'value' && context.concat(1).checkSubtype(inputType, input.type)) {\n            return null;\n        }\n        return new Match(inputType, outputType, input, cases, outputs, otherwise);\n    }\n    evaluate(ctx) {\n        const input = this.input.evaluate(ctx);\n        const output = (typeOf(input) === this.inputType && this.outputs[this.cases[input]]) || this.otherwise;\n        return output.evaluate(ctx);\n    }\n    eachChild(fn) {\n        fn(this.input);\n        this.outputs.forEach(fn);\n        fn(this.otherwise);\n    }\n    outputDefined() {\n        return this.outputs.every(out => out.outputDefined()) && this.otherwise.outputDefined();\n    }\n}\n\nclass Case {\n    constructor(type, branches, otherwise) {\n        this.type = type;\n        this.branches = branches;\n        this.otherwise = otherwise;\n    }\n    static parse(args, context) {\n        if (args.length < 4)\n            return context.error(`Expected at least 3 arguments, but found only ${args.length - 1}.`);\n        if (args.length % 2 !== 0)\n            return context.error('Expected an odd number of arguments.');\n        let outputType;\n        if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n        const branches = [];\n        for (let i = 1; i < args.length - 1; i += 2) {\n            const test = context.parse(args[i], i, BooleanType);\n            if (!test)\n                return null;\n            const result = context.parse(args[i + 1], i + 1, outputType);\n            if (!result)\n                return null;\n            branches.push([test, result]);\n            outputType = outputType || result.type;\n        }\n        const otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);\n        if (!otherwise)\n            return null;\n        if (!outputType)\n            throw new Error('Can\\'t infer output type');\n        return new Case(outputType, branches, otherwise);\n    }\n    evaluate(ctx) {\n        for (const [test, expression] of this.branches) {\n            if (test.evaluate(ctx)) {\n                return expression.evaluate(ctx);\n            }\n        }\n        return this.otherwise.evaluate(ctx);\n    }\n    eachChild(fn) {\n        for (const [test, expression] of this.branches) {\n            fn(test);\n            fn(expression);\n        }\n        fn(this.otherwise);\n    }\n    outputDefined() {\n        return this.branches.every(([_, out]) => out.outputDefined()) && this.otherwise.outputDefined();\n    }\n}\n\nclass Slice {\n    constructor(type, input, beginIndex, endIndex) {\n        this.type = type;\n        this.input = input;\n        this.beginIndex = beginIndex;\n        this.endIndex = endIndex;\n    }\n    static parse(args, context) {\n        if (args.length <= 2 || args.length >= 5) {\n            return context.error(`Expected 3 or 4 arguments, but found ${args.length - 1} instead.`);\n        }\n        const input = context.parse(args[1], 1, ValueType);\n        const beginIndex = context.parse(args[2], 2, NumberType);\n        if (!input || !beginIndex)\n            return null;\n        if (!isValidType(input.type, [array(ValueType), StringType, ValueType])) {\n            return context.error(`Expected first argument to be of type array or string, but found ${typeToString(input.type)} instead`);\n        }\n        if (args.length === 4) {\n            const endIndex = context.parse(args[3], 3, NumberType);\n            if (!endIndex)\n                return null;\n            return new Slice(input.type, input, beginIndex, endIndex);\n        }\n        else {\n            return new Slice(input.type, input, beginIndex);\n        }\n    }\n    evaluate(ctx) {\n        const input = this.input.evaluate(ctx);\n        const beginIndex = this.beginIndex.evaluate(ctx);\n        let endIndex;\n        if (this.endIndex) {\n            endIndex = this.endIndex.evaluate(ctx);\n        }\n        if (isValidNativeType(input, ['string'])) {\n            // Indices may be affected by surrogate pairs.\n            return [...input].slice(beginIndex, endIndex).join('');\n        }\n        else if (isValidNativeType(input, ['array'])) {\n            return input.slice(beginIndex, endIndex);\n        }\n        else {\n            throw new RuntimeError(`Expected first argument to be of type array or string, but found ${typeToString(typeOf(input))} instead.`);\n        }\n    }\n    eachChild(fn) {\n        fn(this.input);\n        fn(this.beginIndex);\n        if (this.endIndex) {\n            fn(this.endIndex);\n        }\n    }\n    outputDefined() {\n        return false;\n    }\n}\n\n/**\n * Returns the index of the last stop <= input, or 0 if it doesn't exist.\n * @private\n */\nfunction findStopLessThanOrEqualTo(stops, input) {\n    const lastIndex = stops.length - 1;\n    let lowerIndex = 0;\n    let upperIndex = lastIndex;\n    let currentIndex = 0;\n    let currentValue, nextValue;\n    while (lowerIndex <= upperIndex) {\n        currentIndex = Math.floor((lowerIndex + upperIndex) / 2);\n        currentValue = stops[currentIndex];\n        nextValue = stops[currentIndex + 1];\n        if (currentValue <= input) {\n            if (currentIndex === lastIndex || input < nextValue) { // Search complete\n                return currentIndex;\n            }\n            lowerIndex = currentIndex + 1;\n        }\n        else if (currentValue > input) {\n            upperIndex = currentIndex - 1;\n        }\n        else {\n            throw new RuntimeError('Input is not a number.');\n        }\n    }\n    return 0;\n}\n\nclass Step {\n    constructor(type, input, stops) {\n        this.type = type;\n        this.input = input;\n        this.labels = [];\n        this.outputs = [];\n        for (const [label, expression] of stops) {\n            this.labels.push(label);\n            this.outputs.push(expression);\n        }\n    }\n    static parse(args, context) {\n        if (args.length - 1 < 4) {\n            return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);\n        }\n        if ((args.length - 1) % 2 !== 0) {\n            return context.error('Expected an even number of arguments.');\n        }\n        const input = context.parse(args[1], 1, NumberType);\n        if (!input)\n            return null;\n        const stops = [];\n        let outputType = null;\n        if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n        for (let i = 1; i < args.length; i += 2) {\n            const label = i === 1 ? -Infinity : args[i];\n            const value = args[i + 1];\n            const labelKey = i;\n            const valueKey = i + 1;\n            if (typeof label !== 'number') {\n                return context.error('Input/output pairs for \"step\" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);\n            }\n            if (stops.length && stops[stops.length - 1][0] >= label) {\n                return context.error('Input/output pairs for \"step\" expressions must be arranged with input values in strictly ascending order.', labelKey);\n            }\n            const parsed = context.parse(value, valueKey, outputType);\n            if (!parsed)\n                return null;\n            outputType = outputType || parsed.type;\n            stops.push([label, parsed]);\n        }\n        return new Step(outputType, input, stops);\n    }\n    evaluate(ctx) {\n        const labels = this.labels;\n        const outputs = this.outputs;\n        if (labels.length === 1) {\n            return outputs[0].evaluate(ctx);\n        }\n        const value = this.input.evaluate(ctx);\n        if (value <= labels[0]) {\n            return outputs[0].evaluate(ctx);\n        }\n        const stopCount = labels.length;\n        if (value >= labels[stopCount - 1]) {\n            return outputs[stopCount - 1].evaluate(ctx);\n        }\n        const index = findStopLessThanOrEqualTo(labels, value);\n        return outputs[index].evaluate(ctx);\n    }\n    eachChild(fn) {\n        fn(this.input);\n        for (const expression of this.outputs) {\n            fn(expression);\n        }\n    }\n    outputDefined() {\n        return this.outputs.every(out => out.outputDefined());\n    }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar unitbezier;\nvar hasRequiredUnitbezier;\n\nfunction requireUnitbezier () {\n\tif (hasRequiredUnitbezier) return unitbezier;\n\thasRequiredUnitbezier = 1;\n\n\tunitbezier = UnitBezier;\n\n\tfunction UnitBezier(p1x, p1y, p2x, p2y) {\n\t    // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).\n\t    this.cx = 3.0 * p1x;\n\t    this.bx = 3.0 * (p2x - p1x) - this.cx;\n\t    this.ax = 1.0 - this.cx - this.bx;\n\n\t    this.cy = 3.0 * p1y;\n\t    this.by = 3.0 * (p2y - p1y) - this.cy;\n\t    this.ay = 1.0 - this.cy - this.by;\n\n\t    this.p1x = p1x;\n\t    this.p1y = p1y;\n\t    this.p2x = p2x;\n\t    this.p2y = p2y;\n\t}\n\n\tUnitBezier.prototype = {\n\t    sampleCurveX: function (t) {\n\t        // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.\n\t        return ((this.ax * t + this.bx) * t + this.cx) * t;\n\t    },\n\n\t    sampleCurveY: function (t) {\n\t        return ((this.ay * t + this.by) * t + this.cy) * t;\n\t    },\n\n\t    sampleCurveDerivativeX: function (t) {\n\t        return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n\t    },\n\n\t    solveCurveX: function (x, epsilon) {\n\t        if (epsilon === undefined) epsilon = 1e-6;\n\n\t        if (x < 0.0) return 0.0;\n\t        if (x > 1.0) return 1.0;\n\n\t        var t = x;\n\n\t        // First try a few iterations of Newton's method - normally very fast.\n\t        for (var i = 0; i < 8; i++) {\n\t            var x2 = this.sampleCurveX(t) - x;\n\t            if (Math.abs(x2) < epsilon) return t;\n\n\t            var d2 = this.sampleCurveDerivativeX(t);\n\t            if (Math.abs(d2) < 1e-6) break;\n\n\t            t = t - x2 / d2;\n\t        }\n\n\t        // Fall back to the bisection method for reliability.\n\t        var t0 = 0.0;\n\t        var t1 = 1.0;\n\t        t = x;\n\n\t        for (i = 0; i < 20; i++) {\n\t            x2 = this.sampleCurveX(t);\n\t            if (Math.abs(x2 - x) < epsilon) break;\n\n\t            if (x > x2) {\n\t                t0 = t;\n\t            } else {\n\t                t1 = t;\n\t            }\n\n\t            t = (t1 - t0) * 0.5 + t0;\n\t        }\n\n\t        return t;\n\t    },\n\n\t    solve: function (x, epsilon) {\n\t        return this.sampleCurveY(this.solveCurveX(x, epsilon));\n\t    }\n\t};\n\treturn unitbezier;\n}\n\nvar unitbezierExports = requireUnitbezier();\nvar UnitBezier = /*@__PURE__*/getDefaultExportFromCjs(unitbezierExports);\n\nclass Interpolate {\n    constructor(type, operator, interpolation, input, stops) {\n        this.type = type;\n        this.operator = operator;\n        this.interpolation = interpolation;\n        this.input = input;\n        this.labels = [];\n        this.outputs = [];\n        for (const [label, expression] of stops) {\n            this.labels.push(label);\n            this.outputs.push(expression);\n        }\n    }\n    static interpolationFactor(interpolation, input, lower, upper) {\n        let t = 0;\n        if (interpolation.name === 'exponential') {\n            t = exponentialInterpolation(input, interpolation.base, lower, upper);\n        }\n        else if (interpolation.name === 'linear') {\n            t = exponentialInterpolation(input, 1, lower, upper);\n        }\n        else if (interpolation.name === 'cubic-bezier') {\n            const c = interpolation.controlPoints;\n            const ub = new UnitBezier(c[0], c[1], c[2], c[3]);\n            t = ub.solve(exponentialInterpolation(input, 1, lower, upper));\n        }\n        return t;\n    }\n    static parse(args, context) {\n        let [operator, interpolation, input, ...rest] = args;\n        if (!Array.isArray(interpolation) || interpolation.length === 0) {\n            return context.error('Expected an interpolation type expression.', 1);\n        }\n        if (interpolation[0] === 'linear') {\n            interpolation = { name: 'linear' };\n        }\n        else if (interpolation[0] === 'exponential') {\n            const base = interpolation[1];\n            if (typeof base !== 'number')\n                return context.error('Exponential interpolation requires a numeric base.', 1, 1);\n            interpolation = {\n                name: 'exponential',\n                base\n            };\n        }\n        else if (interpolation[0] === 'cubic-bezier') {\n            const controlPoints = interpolation.slice(1);\n            if (controlPoints.length !== 4 ||\n                controlPoints.some(t => typeof t !== 'number' || t < 0 || t > 1)) {\n                return context.error('Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.', 1);\n            }\n            interpolation = {\n                name: 'cubic-bezier',\n                controlPoints: controlPoints\n            };\n        }\n        else {\n            return context.error(`Unknown interpolation type ${String(interpolation[0])}`, 1, 0);\n        }\n        if (args.length - 1 < 4) {\n            return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);\n        }\n        if ((args.length - 1) % 2 !== 0) {\n            return context.error('Expected an even number of arguments.');\n        }\n        input = context.parse(input, 2, NumberType);\n        if (!input)\n            return null;\n        const stops = [];\n        let outputType = null;\n        if (operator === 'interpolate-hcl' || operator === 'interpolate-lab') {\n            outputType = ColorType;\n        }\n        else if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n        for (let i = 0; i < rest.length; i += 2) {\n            const label = rest[i];\n            const value = rest[i + 1];\n            const labelKey = i + 3;\n            const valueKey = i + 4;\n            if (typeof label !== 'number') {\n                return context.error('Input/output pairs for \"interpolate\" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);\n            }\n            if (stops.length && stops[stops.length - 1][0] >= label) {\n                return context.error('Input/output pairs for \"interpolate\" expressions must be arranged with input values in strictly ascending order.', labelKey);\n            }\n            const parsed = context.parse(value, valueKey, outputType);\n            if (!parsed)\n                return null;\n            outputType = outputType || parsed.type;\n            stops.push([label, parsed]);\n        }\n        if (!verifyType(outputType, NumberType) &&\n            !verifyType(outputType, ProjectionDefinitionType) &&\n            !verifyType(outputType, ColorType) &&\n            !verifyType(outputType, PaddingType) &&\n            !verifyType(outputType, VariableAnchorOffsetCollectionType) &&\n            !verifyType(outputType, array(NumberType))) {\n            return context.error(`Type ${typeToString(outputType)} is not interpolatable.`);\n        }\n        return new Interpolate(outputType, operator, interpolation, input, stops);\n    }\n    evaluate(ctx) {\n        const labels = this.labels;\n        const outputs = this.outputs;\n        if (labels.length === 1) {\n            return outputs[0].evaluate(ctx);\n        }\n        const value = this.input.evaluate(ctx);\n        if (value <= labels[0]) {\n            return outputs[0].evaluate(ctx);\n        }\n        const stopCount = labels.length;\n        if (value >= labels[stopCount - 1]) {\n            return outputs[stopCount - 1].evaluate(ctx);\n        }\n        const index = findStopLessThanOrEqualTo(labels, value);\n        const lower = labels[index];\n        const upper = labels[index + 1];\n        const t = Interpolate.interpolationFactor(this.interpolation, value, lower, upper);\n        const outputLower = outputs[index].evaluate(ctx);\n        const outputUpper = outputs[index + 1].evaluate(ctx);\n        switch (this.operator) {\n            case 'interpolate':\n                switch (this.type.kind) {\n                    case 'number':\n                        return interpolateNumber(outputLower, outputUpper, t);\n                    case 'color':\n                        return Color.interpolate(outputLower, outputUpper, t);\n                    case 'padding':\n                        return Padding.interpolate(outputLower, outputUpper, t);\n                    case 'variableAnchorOffsetCollection':\n                        return VariableAnchorOffsetCollection.interpolate(outputLower, outputUpper, t);\n                    case 'array':\n                        return interpolateArray(outputLower, outputUpper, t);\n                    case 'projectionDefinition':\n                        return ProjectionDefinition.interpolate(outputLower, outputUpper, t);\n                }\n            case 'interpolate-hcl':\n                return Color.interpolate(outputLower, outputUpper, t, 'hcl');\n            case 'interpolate-lab':\n                return Color.interpolate(outputLower, outputUpper, t, 'lab');\n        }\n    }\n    eachChild(fn) {\n        fn(this.input);\n        for (const expression of this.outputs) {\n            fn(expression);\n        }\n    }\n    outputDefined() {\n        return this.outputs.every(out => out.outputDefined());\n    }\n}\n/**\n * Returns a ratio that can be used to interpolate between exponential function\n * stops.\n * How it works: Two consecutive stop values define a (scaled and shifted) exponential function `f(x) = a * base^x + b`, where `base` is the user-specified base,\n * and `a` and `b` are constants affording sufficient degrees of freedom to fit\n * the function to the given stops.\n *\n * Here's a bit of algebra that lets us compute `f(x)` directly from the stop\n * values without explicitly solving for `a` and `b`:\n *\n * First stop value: `f(x0) = y0 = a * base^x0 + b`\n * Second stop value: `f(x1) = y1 = a * base^x1 + b`\n * => `y1 - y0 = a(base^x1 - base^x0)`\n * => `a = (y1 - y0)/(base^x1 - base^x0)`\n *\n * Desired value: `f(x) = y = a * base^x + b`\n * => `f(x) = y0 + a * (base^x - base^x0)`\n *\n * From the above, we can replace the `a` in `a * (base^x - base^x0)` and do a\n * little algebra:\n * ```\n * a * (base^x - base^x0) = (y1 - y0)/(base^x1 - base^x0) * (base^x - base^x0)\n *                     = (y1 - y0) * (base^x - base^x0) / (base^x1 - base^x0)\n * ```\n *\n * If we let `(base^x - base^x0) / (base^x1 base^x0)`, then we have\n * `f(x) = y0 + (y1 - y0) * ratio`.  In other words, `ratio` may be treated as\n * an interpolation factor between the two stops' output values.\n *\n * (Note: a slightly different form for `ratio`,\n * `(base^(x-x0) - 1) / (base^(x1-x0) - 1) `, is equivalent, but requires fewer\n * expensive `Math.pow()` operations.)\n *\n * @private\n*/\nfunction exponentialInterpolation(input, base, lowerValue, upperValue) {\n    const difference = upperValue - lowerValue;\n    const progress = input - lowerValue;\n    if (difference === 0) {\n        return 0;\n    }\n    else if (base === 1) {\n        return progress / difference;\n    }\n    else {\n        return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);\n    }\n}\nconst interpolateFactory = {\n    color: Color.interpolate,\n    number: interpolateNumber,\n    padding: Padding.interpolate,\n    variableAnchorOffsetCollection: VariableAnchorOffsetCollection.interpolate,\n    array: interpolateArray\n};\n\nclass Coalesce {\n    constructor(type, args) {\n        this.type = type;\n        this.args = args;\n    }\n    static parse(args, context) {\n        if (args.length < 2) {\n            return context.error('Expected at least one argument.');\n        }\n        let outputType = null;\n        const expectedType = context.expectedType;\n        if (expectedType && expectedType.kind !== 'value') {\n            outputType = expectedType;\n        }\n        const parsedArgs = [];\n        for (const arg of args.slice(1)) {\n            const parsed = context.parse(arg, 1 + parsedArgs.length, outputType, undefined, { typeAnnotation: 'omit' });\n            if (!parsed)\n                return null;\n            outputType = outputType || parsed.type;\n            parsedArgs.push(parsed);\n        }\n        if (!outputType)\n            throw new Error('No output type');\n        // Above, we parse arguments without inferred type annotation so that\n        // they don't produce a runtime error for `null` input, which would\n        // preempt the desired null-coalescing behavior.\n        // Thus, if any of our arguments would have needed an annotation, we\n        // need to wrap the enclosing coalesce expression with it instead.\n        const needsAnnotation = expectedType &&\n            parsedArgs.some(arg => checkSubtype(expectedType, arg.type));\n        return needsAnnotation ?\n            new Coalesce(ValueType, parsedArgs) :\n            new Coalesce(outputType, parsedArgs);\n    }\n    evaluate(ctx) {\n        let result = null;\n        let argCount = 0;\n        let requestedImageName;\n        for (const arg of this.args) {\n            argCount++;\n            result = arg.evaluate(ctx);\n            // we need to keep track of the first requested image in a coalesce statement\n            // if coalesce can't find a valid image, we return the first image name so styleimagemissing can fire\n            if (result && result instanceof ResolvedImage && !result.available) {\n                if (!requestedImageName) {\n                    requestedImageName = result.name;\n                }\n                result = null;\n                if (argCount === this.args.length) {\n                    result = requestedImageName;\n                }\n            }\n            if (result !== null)\n                break;\n        }\n        return result;\n    }\n    eachChild(fn) {\n        this.args.forEach(fn);\n    }\n    outputDefined() {\n        return this.args.every(arg => arg.outputDefined());\n    }\n}\n\nfunction isComparableType(op, type) {\n    if (op === '==' || op === '!=') {\n        // equality operator\n        return type.kind === 'boolean' ||\n            type.kind === 'string' ||\n            type.kind === 'number' ||\n            type.kind === 'null' ||\n            type.kind === 'value';\n    }\n    else {\n        // ordering operator\n        return type.kind === 'string' ||\n            type.kind === 'number' ||\n            type.kind === 'value';\n    }\n}\nfunction eq(ctx, a, b) { return a === b; }\nfunction neq(ctx, a, b) { return a !== b; }\nfunction lt(ctx, a, b) { return a < b; }\nfunction gt(ctx, a, b) { return a > b; }\nfunction lteq(ctx, a, b) { return a <= b; }\nfunction gteq(ctx, a, b) { return a >= b; }\nfunction eqCollate(ctx, a, b, c) { return c.compare(a, b) === 0; }\nfunction neqCollate(ctx, a, b, c) { return !eqCollate(ctx, a, b, c); }\nfunction ltCollate(ctx, a, b, c) { return c.compare(a, b) < 0; }\nfunction gtCollate(ctx, a, b, c) { return c.compare(a, b) > 0; }\nfunction lteqCollate(ctx, a, b, c) { return c.compare(a, b) <= 0; }\nfunction gteqCollate(ctx, a, b, c) { return c.compare(a, b) >= 0; }\n/**\n * Special form for comparison operators, implementing the signatures:\n * - (T, T, ?Collator) => boolean\n * - (T, value, ?Collator) => boolean\n * - (value, T, ?Collator) => boolean\n *\n * For inequalities, T must be either value, string, or number. For ==/!=, it\n * can also be boolean or null.\n *\n * Equality semantics are equivalent to Javascript's strict equality (===/!==)\n * -- i.e., when the arguments' types don't match, == evaluates to false, != to\n * true.\n *\n * When types don't match in an ordering comparison, a runtime error is thrown.\n *\n * @private\n */\nfunction makeComparison(op, compareBasic, compareWithCollator) {\n    const isOrderComparison = op !== '==' && op !== '!=';\n    return class Comparison {\n        constructor(lhs, rhs, collator) {\n            this.type = BooleanType;\n            this.lhs = lhs;\n            this.rhs = rhs;\n            this.collator = collator;\n            this.hasUntypedArgument = lhs.type.kind === 'value' || rhs.type.kind === 'value';\n        }\n        static parse(args, context) {\n            if (args.length !== 3 && args.length !== 4)\n                return context.error('Expected two or three arguments.');\n            const op = args[0];\n            let lhs = context.parse(args[1], 1, ValueType);\n            if (!lhs)\n                return null;\n            if (!isComparableType(op, lhs.type)) {\n                return context.concat(1).error(`\"${op}\" comparisons are not supported for type '${typeToString(lhs.type)}'.`);\n            }\n            let rhs = context.parse(args[2], 2, ValueType);\n            if (!rhs)\n                return null;\n            if (!isComparableType(op, rhs.type)) {\n                return context.concat(2).error(`\"${op}\" comparisons are not supported for type '${typeToString(rhs.type)}'.`);\n            }\n            if (lhs.type.kind !== rhs.type.kind &&\n                lhs.type.kind !== 'value' &&\n                rhs.type.kind !== 'value') {\n                return context.error(`Cannot compare types '${typeToString(lhs.type)}' and '${typeToString(rhs.type)}'.`);\n            }\n            if (isOrderComparison) {\n                // typing rules specific to less/greater than operators\n                if (lhs.type.kind === 'value' && rhs.type.kind !== 'value') {\n                    // (value, T)\n                    lhs = new Assertion(rhs.type, [lhs]);\n                }\n                else if (lhs.type.kind !== 'value' && rhs.type.kind === 'value') {\n                    // (T, value)\n                    rhs = new Assertion(lhs.type, [rhs]);\n                }\n            }\n            let collator = null;\n            if (args.length === 4) {\n                if (lhs.type.kind !== 'string' &&\n                    rhs.type.kind !== 'string' &&\n                    lhs.type.kind !== 'value' &&\n                    rhs.type.kind !== 'value') {\n                    return context.error('Cannot use collator to compare non-string types.');\n                }\n                collator = context.parse(args[3], 3, CollatorType);\n                if (!collator)\n                    return null;\n            }\n            return new Comparison(lhs, rhs, collator);\n        }\n        evaluate(ctx) {\n            const lhs = this.lhs.evaluate(ctx);\n            const rhs = this.rhs.evaluate(ctx);\n            if (isOrderComparison && this.hasUntypedArgument) {\n                const lt = typeOf(lhs);\n                const rt = typeOf(rhs);\n                // check that type is string or number, and equal\n                if (lt.kind !== rt.kind || !(lt.kind === 'string' || lt.kind === 'number')) {\n                    throw new RuntimeError(`Expected arguments for \"${op}\" to be (string, string) or (number, number), but found (${lt.kind}, ${rt.kind}) instead.`);\n                }\n            }\n            if (this.collator && !isOrderComparison && this.hasUntypedArgument) {\n                const lt = typeOf(lhs);\n                const rt = typeOf(rhs);\n                if (lt.kind !== 'string' || rt.kind !== 'string') {\n                    return compareBasic(ctx, lhs, rhs);\n                }\n            }\n            return this.collator ?\n                compareWithCollator(ctx, lhs, rhs, this.collator.evaluate(ctx)) :\n                compareBasic(ctx, lhs, rhs);\n        }\n        eachChild(fn) {\n            fn(this.lhs);\n            fn(this.rhs);\n            if (this.collator) {\n                fn(this.collator);\n            }\n        }\n        outputDefined() {\n            return true;\n        }\n    };\n}\nconst Equals = makeComparison('==', eq, eqCollate);\nconst NotEquals = makeComparison('!=', neq, neqCollate);\nconst LessThan = makeComparison('<', lt, ltCollate);\nconst GreaterThan = makeComparison('>', gt, gtCollate);\nconst LessThanOrEqual = makeComparison('<=', lteq, lteqCollate);\nconst GreaterThanOrEqual = makeComparison('>=', gteq, gteqCollate);\n\nclass CollatorExpression {\n    constructor(caseSensitive, diacriticSensitive, locale) {\n        this.type = CollatorType;\n        this.locale = locale;\n        this.caseSensitive = caseSensitive;\n        this.diacriticSensitive = diacriticSensitive;\n    }\n    static parse(args, context) {\n        if (args.length !== 2)\n            return context.error('Expected one argument.');\n        const options = args[1];\n        if (typeof options !== 'object' || Array.isArray(options))\n            return context.error('Collator options argument must be an object.');\n        const caseSensitive = context.parse(options['case-sensitive'] === undefined ? false : options['case-sensitive'], 1, BooleanType);\n        if (!caseSensitive)\n            return null;\n        const diacriticSensitive = context.parse(options['diacritic-sensitive'] === undefined ? false : options['diacritic-sensitive'], 1, BooleanType);\n        if (!diacriticSensitive)\n            return null;\n        let locale = null;\n        if (options['locale']) {\n            locale = context.parse(options['locale'], 1, StringType);\n            if (!locale)\n                return null;\n        }\n        return new CollatorExpression(caseSensitive, diacriticSensitive, locale);\n    }\n    evaluate(ctx) {\n        return new Collator(this.caseSensitive.evaluate(ctx), this.diacriticSensitive.evaluate(ctx), this.locale ? this.locale.evaluate(ctx) : null);\n    }\n    eachChild(fn) {\n        fn(this.caseSensitive);\n        fn(this.diacriticSensitive);\n        if (this.locale) {\n            fn(this.locale);\n        }\n    }\n    outputDefined() {\n        // Technically the set of possible outputs is the combinatoric set of Collators produced\n        // by all possible outputs of locale/caseSensitive/diacriticSensitive\n        // But for the primary use of Collators in comparison operators, we ignore the Collator's\n        // possible outputs anyway, so we can get away with leaving this false for now.\n        return false;\n    }\n}\n\nclass NumberFormat {\n    constructor(number, locale, currency, minFractionDigits, maxFractionDigits) {\n        this.type = StringType;\n        this.number = number;\n        this.locale = locale;\n        this.currency = currency;\n        this.minFractionDigits = minFractionDigits;\n        this.maxFractionDigits = maxFractionDigits;\n    }\n    static parse(args, context) {\n        if (args.length !== 3)\n            return context.error('Expected two arguments.');\n        const number = context.parse(args[1], 1, NumberType);\n        if (!number)\n            return null;\n        const options = args[2];\n        if (typeof options !== 'object' || Array.isArray(options))\n            return context.error('NumberFormat options argument must be an object.');\n        let locale = null;\n        if (options['locale']) {\n            locale = context.parse(options['locale'], 1, StringType);\n            if (!locale)\n                return null;\n        }\n        let currency = null;\n        if (options['currency']) {\n            currency = context.parse(options['currency'], 1, StringType);\n            if (!currency)\n                return null;\n        }\n        let minFractionDigits = null;\n        if (options['min-fraction-digits']) {\n            minFractionDigits = context.parse(options['min-fraction-digits'], 1, NumberType);\n            if (!minFractionDigits)\n                return null;\n        }\n        let maxFractionDigits = null;\n        if (options['max-fraction-digits']) {\n            maxFractionDigits = context.parse(options['max-fraction-digits'], 1, NumberType);\n            if (!maxFractionDigits)\n                return null;\n        }\n        return new NumberFormat(number, locale, currency, minFractionDigits, maxFractionDigits);\n    }\n    evaluate(ctx) {\n        return new Intl.NumberFormat(this.locale ? this.locale.evaluate(ctx) : [], {\n            style: this.currency ? 'currency' : 'decimal',\n            currency: this.currency ? this.currency.evaluate(ctx) : undefined,\n            minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(ctx) : undefined,\n            maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(ctx) : undefined,\n        }).format(this.number.evaluate(ctx));\n    }\n    eachChild(fn) {\n        fn(this.number);\n        if (this.locale) {\n            fn(this.locale);\n        }\n        if (this.currency) {\n            fn(this.currency);\n        }\n        if (this.minFractionDigits) {\n            fn(this.minFractionDigits);\n        }\n        if (this.maxFractionDigits) {\n            fn(this.maxFractionDigits);\n        }\n    }\n    outputDefined() {\n        return false;\n    }\n}\n\nclass FormatExpression {\n    constructor(sections) {\n        this.type = FormattedType;\n        this.sections = sections;\n    }\n    static parse(args, context) {\n        if (args.length < 2) {\n            return context.error('Expected at least one argument.');\n        }\n        const firstArg = args[1];\n        if (!Array.isArray(firstArg) && typeof firstArg === 'object') {\n            return context.error('First argument must be an image or text section.');\n        }\n        const sections = [];\n        let nextTokenMayBeObject = false;\n        for (let i = 1; i <= args.length - 1; ++i) {\n            const arg = args[i];\n            if (nextTokenMayBeObject && typeof arg === 'object' && !Array.isArray(arg)) {\n                nextTokenMayBeObject = false;\n                let scale = null;\n                if (arg['font-scale']) {\n                    scale = context.parse(arg['font-scale'], 1, NumberType);\n                    if (!scale)\n                        return null;\n                }\n                let font = null;\n                if (arg['text-font']) {\n                    font = context.parse(arg['text-font'], 1, array(StringType));\n                    if (!font)\n                        return null;\n                }\n                let textColor = null;\n                if (arg['text-color']) {\n                    textColor = context.parse(arg['text-color'], 1, ColorType);\n                    if (!textColor)\n                        return null;\n                }\n                const lastExpression = sections[sections.length - 1];\n                lastExpression.scale = scale;\n                lastExpression.font = font;\n                lastExpression.textColor = textColor;\n            }\n            else {\n                const content = context.parse(args[i], 1, ValueType);\n                if (!content)\n                    return null;\n                const kind = content.type.kind;\n                if (kind !== 'string' && kind !== 'value' && kind !== 'null' && kind !== 'resolvedImage')\n                    return context.error('Formatted text type must be \\'string\\', \\'value\\', \\'image\\' or \\'null\\'.');\n                nextTokenMayBeObject = true;\n                sections.push({ content, scale: null, font: null, textColor: null });\n            }\n        }\n        return new FormatExpression(sections);\n    }\n    evaluate(ctx) {\n        const evaluateSection = section => {\n            const evaluatedContent = section.content.evaluate(ctx);\n            if (typeOf(evaluatedContent) === ResolvedImageType) {\n                return new FormattedSection('', evaluatedContent, null, null, null);\n            }\n            return new FormattedSection(valueToString(evaluatedContent), null, section.scale ? section.scale.evaluate(ctx) : null, section.font ? section.font.evaluate(ctx).join(',') : null, section.textColor ? section.textColor.evaluate(ctx) : null);\n        };\n        return new Formatted(this.sections.map(evaluateSection));\n    }\n    eachChild(fn) {\n        for (const section of this.sections) {\n            fn(section.content);\n            if (section.scale) {\n                fn(section.scale);\n            }\n            if (section.font) {\n                fn(section.font);\n            }\n            if (section.textColor) {\n                fn(section.textColor);\n            }\n        }\n    }\n    outputDefined() {\n        // Technically the combinatoric set of all children\n        // Usually, this.text will be undefined anyway\n        return false;\n    }\n}\n\nclass ImageExpression {\n    constructor(input) {\n        this.type = ResolvedImageType;\n        this.input = input;\n    }\n    static parse(args, context) {\n        if (args.length !== 2) {\n            return context.error('Expected two arguments.');\n        }\n        const name = context.parse(args[1], 1, StringType);\n        if (!name)\n            return context.error('No image name provided.');\n        return new ImageExpression(name);\n    }\n    evaluate(ctx) {\n        const evaluatedImageName = this.input.evaluate(ctx);\n        const value = ResolvedImage.fromString(evaluatedImageName);\n        if (value && ctx.availableImages)\n            value.available = ctx.availableImages.indexOf(evaluatedImageName) > -1;\n        return value;\n    }\n    eachChild(fn) {\n        fn(this.input);\n    }\n    outputDefined() {\n        // The output of image is determined by the list of available images in the evaluation context\n        return false;\n    }\n}\n\nclass Length {\n    constructor(input) {\n        this.type = NumberType;\n        this.input = input;\n    }\n    static parse(args, context) {\n        if (args.length !== 2)\n            return context.error(`Expected 1 argument, but found ${args.length - 1} instead.`);\n        const input = context.parse(args[1], 1);\n        if (!input)\n            return null;\n        if (input.type.kind !== 'array' && input.type.kind !== 'string' && input.type.kind !== 'value')\n            return context.error(`Expected argument of type string or array, but found ${typeToString(input.type)} instead.`);\n        return new Length(input);\n    }\n    evaluate(ctx) {\n        const input = this.input.evaluate(ctx);\n        if (typeof input === 'string') {\n            // The length may be affected by surrogate pairs.\n            return [...input].length;\n        }\n        else if (Array.isArray(input)) {\n            return input.length;\n        }\n        else {\n            throw new RuntimeError(`Expected value to be of type string or array, but found ${typeToString(typeOf(input))} instead.`);\n        }\n    }\n    eachChild(fn) {\n        fn(this.input);\n    }\n    outputDefined() {\n        return false;\n    }\n}\n\nconst EXTENT = 8192;\nfunction getTileCoordinates(p, canonical) {\n    const x = mercatorXfromLng(p[0]);\n    const y = mercatorYfromLat(p[1]);\n    const tilesAtZoom = Math.pow(2, canonical.z);\n    return [Math.round(x * tilesAtZoom * EXTENT), Math.round(y * tilesAtZoom * EXTENT)];\n}\nfunction getLngLatFromTileCoord(coord, canonical) {\n    const tilesAtZoom = Math.pow(2, canonical.z);\n    const x = (coord[0] / EXTENT + canonical.x) / tilesAtZoom;\n    const y = (coord[1] / EXTENT + canonical.y) / tilesAtZoom;\n    return [lngFromMercatorXfromLng(x), latFromMercatorY(y)];\n}\nfunction mercatorXfromLng(lng) {\n    return (180 + lng) / 360;\n}\nfunction lngFromMercatorXfromLng(mercatorX) {\n    return mercatorX * 360 - 180;\n}\nfunction mercatorYfromLat(lat) {\n    return (180 - (180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360)))) / 360;\n}\nfunction latFromMercatorY(mercatorY) {\n    return 360 / Math.PI * Math.atan(Math.exp((180 - mercatorY * 360) * Math.PI / 180)) - 90;\n}\nfunction updateBBox(bbox, coord) {\n    bbox[0] = Math.min(bbox[0], coord[0]);\n    bbox[1] = Math.min(bbox[1], coord[1]);\n    bbox[2] = Math.max(bbox[2], coord[0]);\n    bbox[3] = Math.max(bbox[3], coord[1]);\n}\nfunction boxWithinBox(bbox1, bbox2) {\n    if (bbox1[0] <= bbox2[0])\n        return false;\n    if (bbox1[2] >= bbox2[2])\n        return false;\n    if (bbox1[1] <= bbox2[1])\n        return false;\n    if (bbox1[3] >= bbox2[3])\n        return false;\n    return true;\n}\nfunction rayIntersect(p, p1, p2) {\n    return ((p1[1] > p[1]) !== (p2[1] > p[1])) && (p[0] < (p2[0] - p1[0]) * (p[1] - p1[1]) / (p2[1] - p1[1]) + p1[0]);\n}\nfunction pointOnBoundary(p, p1, p2) {\n    const x1 = p[0] - p1[0];\n    const y1 = p[1] - p1[1];\n    const x2 = p[0] - p2[0];\n    const y2 = p[1] - p2[1];\n    return (x1 * y2 - x2 * y1 === 0) && (x1 * x2 <= 0) && (y1 * y2 <= 0);\n}\n// a, b are end points for line segment1, c and d are end points for line segment2\nfunction segmentIntersectSegment(a, b, c, d) {\n    // check if two segments are parallel or not\n    // precondition is end point a, b is inside polygon, if line a->b is\n    // parallel to polygon edge c->d, then a->b won't intersect with c->d\n    const vectorP = [b[0] - a[0], b[1] - a[1]];\n    const vectorQ = [d[0] - c[0], d[1] - c[1]];\n    if (perp(vectorQ, vectorP) === 0)\n        return false;\n    // If lines are intersecting with each other, the relative location should be:\n    // a and b lie in different sides of segment c->d\n    // c and d lie in different sides of segment a->b\n    if (twoSided(a, b, c, d) && twoSided(c, d, a, b))\n        return true;\n    return false;\n}\nfunction lineIntersectPolygon(p1, p2, polygon) {\n    for (const ring of polygon) {\n        // loop through every edge of the ring\n        for (let j = 0; j < ring.length - 1; ++j) {\n            if (segmentIntersectSegment(p1, p2, ring[j], ring[j + 1])) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n// ray casting algorithm for detecting if point is in polygon\nfunction pointWithinPolygon(point, rings, trueIfOnBoundary = false) {\n    let inside = false;\n    for (const ring of rings) {\n        for (let j = 0; j < ring.length - 1; j++) {\n            if (pointOnBoundary(point, ring[j], ring[j + 1]))\n                return trueIfOnBoundary;\n            if (rayIntersect(point, ring[j], ring[j + 1]))\n                inside = !inside;\n        }\n    }\n    return inside;\n}\nfunction pointWithinPolygons(point, polygons) {\n    for (const polygon of polygons) {\n        if (pointWithinPolygon(point, polygon))\n            return true;\n    }\n    return false;\n}\nfunction lineStringWithinPolygon(line, polygon) {\n    // First, check if geometry points of line segments are all inside polygon\n    for (const point of line) {\n        if (!pointWithinPolygon(point, polygon)) {\n            return false;\n        }\n    }\n    // Second, check if there is line segment intersecting polygon edge\n    for (let i = 0; i < line.length - 1; ++i) {\n        if (lineIntersectPolygon(line[i], line[i + 1], polygon)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction lineStringWithinPolygons(line, polygons) {\n    for (const polygon of polygons) {\n        if (lineStringWithinPolygon(line, polygon))\n            return true;\n    }\n    return false;\n}\nfunction perp(v1, v2) {\n    return (v1[0] * v2[1] - v1[1] * v2[0]);\n}\n// check if p1 and p2 are in different sides of line segment q1->q2\nfunction twoSided(p1, p2, q1, q2) {\n    // q1->p1 (x1, y1), q1->p2 (x2, y2), q1->q2 (x3, y3)\n    const x1 = p1[0] - q1[0];\n    const y1 = p1[1] - q1[1];\n    const x2 = p2[0] - q1[0];\n    const y2 = p2[1] - q1[1];\n    const x3 = q2[0] - q1[0];\n    const y3 = q2[1] - q1[1];\n    const det1 = (x1 * y3 - x3 * y1);\n    const det2 = (x2 * y3 - x3 * y2);\n    if ((det1 > 0 && det2 < 0) || (det1 < 0 && det2 > 0))\n        return true;\n    return false;\n}\n\nfunction getTilePolygon(coordinates, bbox, canonical) {\n    const polygon = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        const ring = [];\n        for (let j = 0; j < coordinates[i].length; j++) {\n            const coord = getTileCoordinates(coordinates[i][j], canonical);\n            updateBBox(bbox, coord);\n            ring.push(coord);\n        }\n        polygon.push(ring);\n    }\n    return polygon;\n}\nfunction getTilePolygons(coordinates, bbox, canonical) {\n    const polygons = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        const polygon = getTilePolygon(coordinates[i], bbox, canonical);\n        polygons.push(polygon);\n    }\n    return polygons;\n}\nfunction updatePoint(p, bbox, polyBBox, worldSize) {\n    if (p[0] < polyBBox[0] || p[0] > polyBBox[2]) {\n        const halfWorldSize = worldSize * 0.5;\n        let shift = (p[0] - polyBBox[0] > halfWorldSize) ? -worldSize : (polyBBox[0] - p[0] > halfWorldSize) ? worldSize : 0;\n        if (shift === 0) {\n            shift = (p[0] - polyBBox[2] > halfWorldSize) ? -worldSize : (polyBBox[2] - p[0] > halfWorldSize) ? worldSize : 0;\n        }\n        p[0] += shift;\n    }\n    updateBBox(bbox, p);\n}\nfunction resetBBox(bbox) {\n    bbox[0] = bbox[1] = Infinity;\n    bbox[2] = bbox[3] = -Infinity;\n}\nfunction getTilePoints(geometry, pointBBox, polyBBox, canonical) {\n    const worldSize = Math.pow(2, canonical.z) * EXTENT;\n    const shifts = [canonical.x * EXTENT, canonical.y * EXTENT];\n    const tilePoints = [];\n    for (const points of geometry) {\n        for (const point of points) {\n            const p = [point.x + shifts[0], point.y + shifts[1]];\n            updatePoint(p, pointBBox, polyBBox, worldSize);\n            tilePoints.push(p);\n        }\n    }\n    return tilePoints;\n}\nfunction getTileLines(geometry, lineBBox, polyBBox, canonical) {\n    const worldSize = Math.pow(2, canonical.z) * EXTENT;\n    const shifts = [canonical.x * EXTENT, canonical.y * EXTENT];\n    const tileLines = [];\n    for (const line of geometry) {\n        const tileLine = [];\n        for (const point of line) {\n            const p = [point.x + shifts[0], point.y + shifts[1]];\n            updateBBox(lineBBox, p);\n            tileLine.push(p);\n        }\n        tileLines.push(tileLine);\n    }\n    if (lineBBox[2] - lineBBox[0] <= worldSize / 2) {\n        resetBBox(lineBBox);\n        for (const line of tileLines) {\n            for (const p of line) {\n                updatePoint(p, lineBBox, polyBBox, worldSize);\n            }\n        }\n    }\n    return tileLines;\n}\nfunction pointsWithinPolygons(ctx, polygonGeometry) {\n    const pointBBox = [Infinity, Infinity, -Infinity, -Infinity];\n    const polyBBox = [Infinity, Infinity, -Infinity, -Infinity];\n    const canonical = ctx.canonicalID();\n    if (polygonGeometry.type === 'Polygon') {\n        const tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);\n        const tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);\n        if (!boxWithinBox(pointBBox, polyBBox))\n            return false;\n        for (const point of tilePoints) {\n            if (!pointWithinPolygon(point, tilePolygon))\n                return false;\n        }\n    }\n    if (polygonGeometry.type === 'MultiPolygon') {\n        const tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);\n        const tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);\n        if (!boxWithinBox(pointBBox, polyBBox))\n            return false;\n        for (const point of tilePoints) {\n            if (!pointWithinPolygons(point, tilePolygons))\n                return false;\n        }\n    }\n    return true;\n}\nfunction linesWithinPolygons(ctx, polygonGeometry) {\n    const lineBBox = [Infinity, Infinity, -Infinity, -Infinity];\n    const polyBBox = [Infinity, Infinity, -Infinity, -Infinity];\n    const canonical = ctx.canonicalID();\n    if (polygonGeometry.type === 'Polygon') {\n        const tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);\n        const tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);\n        if (!boxWithinBox(lineBBox, polyBBox))\n            return false;\n        for (const line of tileLines) {\n            if (!lineStringWithinPolygon(line, tilePolygon))\n                return false;\n        }\n    }\n    if (polygonGeometry.type === 'MultiPolygon') {\n        const tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);\n        const tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);\n        if (!boxWithinBox(lineBBox, polyBBox))\n            return false;\n        for (const line of tileLines) {\n            if (!lineStringWithinPolygons(line, tilePolygons))\n                return false;\n        }\n    }\n    return true;\n}\nclass Within {\n    constructor(geojson, geometries) {\n        this.type = BooleanType;\n        this.geojson = geojson;\n        this.geometries = geometries;\n    }\n    static parse(args, context) {\n        if (args.length !== 2)\n            return context.error(`'within' expression requires exactly one argument, but found ${args.length - 1} instead.`);\n        if (isValue(args[1])) {\n            const geojson = args[1];\n            if (geojson.type === 'FeatureCollection') {\n                const polygonsCoords = [];\n                for (const polygon of geojson.features) {\n                    const { type, coordinates } = polygon.geometry;\n                    if (type === 'Polygon') {\n                        polygonsCoords.push(coordinates);\n                    }\n                    if (type === 'MultiPolygon') {\n                        polygonsCoords.push(...coordinates);\n                    }\n                }\n                if (polygonsCoords.length) {\n                    const multipolygonWrapper = {\n                        type: 'MultiPolygon',\n                        coordinates: polygonsCoords\n                    };\n                    return new Within(geojson, multipolygonWrapper);\n                }\n            }\n            else if (geojson.type === 'Feature') {\n                const type = geojson.geometry.type;\n                if (type === 'Polygon' || type === 'MultiPolygon') {\n                    return new Within(geojson, geojson.geometry);\n                }\n            }\n            else if (geojson.type === 'Polygon' || geojson.type === 'MultiPolygon') {\n                return new Within(geojson, geojson);\n            }\n        }\n        return context.error('\\'within\\' expression requires valid geojson object that contains polygon geometry type.');\n    }\n    evaluate(ctx) {\n        if (ctx.geometry() != null && ctx.canonicalID() != null) {\n            if (ctx.geometryDollarType() === 'Point') {\n                return pointsWithinPolygons(ctx, this.geometries);\n            }\n            else if (ctx.geometryDollarType() === 'LineString') {\n                return linesWithinPolygons(ctx, this.geometries);\n            }\n        }\n        return false;\n    }\n    eachChild() { }\n    outputDefined() {\n        return true;\n    }\n}\n\nclass TinyQueue {\n    constructor(data = [], compare = (a, b) => (a < b ? -1 : a > b ? 1 : 0)) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this._up(this.length++);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n\n        if (--this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let bestChild = (pos << 1) + 1; // initially it is the left child\n            const right = bestChild + 1;\n\n            if (right < this.length && compare(data[right], data[bestChild]) < 0) {\n                bestChild = right;\n            }\n            if (compare(data[bestChild], item) >= 0) break;\n\n            data[pos] = data[bestChild];\n            pos = bestChild;\n        }\n\n        data[pos] = item;\n    }\n}\n\n// This is taken from https://github.com/mapbox/cheap-ruler/ in order to take only the relevant parts\n// Values that define WGS84 ellipsoid model of the Earth\nconst RE = 6378.137; // equatorial radius\nconst FE = 1 / 298.257223563; // flattening\nconst E2 = FE * (2 - FE);\nconst RAD = Math.PI / 180;\nclass CheapRuler {\n    constructor(lat) {\n        // Curvature formulas from https://en.wikipedia.org/wiki/Earth_radius#Meridional\n        const m = RAD * RE * 1000;\n        const coslat = Math.cos(lat * RAD);\n        const w2 = 1 / (1 - E2 * (1 - coslat * coslat));\n        const w = Math.sqrt(w2);\n        // multipliers for converting longitude and latitude degrees into distance\n        this.kx = m * w * coslat; // based on normal radius of curvature\n        this.ky = m * w * w2 * (1 - E2); // based on meridional radius of curvature\n    }\n    /**\n     * Given two points of the form [longitude, latitude], returns the distance.\n     *\n     * @param a - point [longitude, latitude]\n     * @param b - point [longitude, latitude]\n     * @returns distance\n     * @example\n     * const distance = ruler.distance([30.5, 50.5], [30.51, 50.49]);\n     * //=distance\n     */\n    distance(a, b) {\n        const dx = this.wrap(a[0] - b[0]) * this.kx;\n        const dy = (a[1] - b[1]) * this.ky;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Returns an object of the form {point, index, t}, where point is closest point on the line\n     * from the given point, index is the start index of the segment with the closest point,\n     * and t is a parameter from 0 to 1 that indicates where the closest point is on that segment.\n     *\n     * @param line - an array of points that form the line\n     * @param p - point [longitude, latitude]\n     * @returns the nearest point, its index in the array and the proportion along the line\n     * @example\n     * const point = ruler.pointOnLine(line, [-67.04, 50.5]).point;\n     * //=point\n     */\n    pointOnLine(line, p) {\n        let minDist = Infinity;\n        let minX, minY, minI, minT;\n        for (let i = 0; i < line.length - 1; i++) {\n            let x = line[i][0];\n            let y = line[i][1];\n            let dx = this.wrap(line[i + 1][0] - x) * this.kx;\n            let dy = (line[i + 1][1] - y) * this.ky;\n            let t = 0;\n            if (dx !== 0 || dy !== 0) {\n                t = (this.wrap(p[0] - x) * this.kx * dx + (p[1] - y) * this.ky * dy) / (dx * dx + dy * dy);\n                if (t > 1) {\n                    x = line[i + 1][0];\n                    y = line[i + 1][1];\n                }\n                else if (t > 0) {\n                    x += (dx / this.kx) * t;\n                    y += (dy / this.ky) * t;\n                }\n            }\n            dx = this.wrap(p[0] - x) * this.kx;\n            dy = (p[1] - y) * this.ky;\n            const sqDist = dx * dx + dy * dy;\n            if (sqDist < minDist) {\n                minDist = sqDist;\n                minX = x;\n                minY = y;\n                minI = i;\n                minT = t;\n            }\n        }\n        return {\n            point: [minX, minY],\n            index: minI,\n            t: Math.max(0, Math.min(1, minT))\n        };\n    }\n    wrap(deg) {\n        while (deg < -180)\n            deg += 360;\n        while (deg > 180)\n            deg -= 360;\n        return deg;\n    }\n}\n\nconst MinPointsSize = 100;\nconst MinLinePointsSize = 50;\nfunction compareDistPair(a, b) {\n    return b[0] - a[0];\n}\nfunction getRangeSize(range) {\n    return range[1] - range[0] + 1;\n}\nfunction isRangeSafe(range, threshold) {\n    return range[1] >= range[0] && range[1] < threshold;\n}\nfunction splitRange(range, isLine) {\n    if (range[0] > range[1]) {\n        return [null, null];\n    }\n    const size = getRangeSize(range);\n    if (isLine) {\n        if (size === 2) {\n            return [range, null];\n        }\n        const size1 = Math.floor(size / 2);\n        return [[range[0], range[0] + size1],\n            [range[0] + size1, range[1]]];\n    }\n    if (size === 1) {\n        return [range, null];\n    }\n    const size1 = Math.floor(size / 2) - 1;\n    return [[range[0], range[0] + size1],\n        [range[0] + size1 + 1, range[1]]];\n}\nfunction getBBox(coords, range) {\n    if (!isRangeSafe(range, coords.length)) {\n        return [Infinity, Infinity, -Infinity, -Infinity];\n    }\n    const bbox = [Infinity, Infinity, -Infinity, -Infinity];\n    for (let i = range[0]; i <= range[1]; ++i) {\n        updateBBox(bbox, coords[i]);\n    }\n    return bbox;\n}\nfunction getPolygonBBox(polygon) {\n    const bbox = [Infinity, Infinity, -Infinity, -Infinity];\n    for (const ring of polygon) {\n        for (const coord of ring) {\n            updateBBox(bbox, coord);\n        }\n    }\n    return bbox;\n}\nfunction isValidBBox(bbox) {\n    return bbox[0] !== -Infinity && bbox[1] !== -Infinity && bbox[2] !== Infinity && bbox[3] !== Infinity;\n}\n// Calculate the distance between two bounding boxes.\n// Calculate the delta in x and y direction, and use two fake points {0.0, 0.0}\n// and {dx, dy} to calculate the distance. Distance will be 0.0 if bounding box are overlapping.\nfunction bboxToBBoxDistance(bbox1, bbox2, ruler) {\n    if (!isValidBBox(bbox1) || !isValidBBox(bbox2)) {\n        return NaN;\n    }\n    let dx = 0.0;\n    let dy = 0.0;\n    // bbox1 in left side\n    if (bbox1[2] < bbox2[0]) {\n        dx = bbox2[0] - bbox1[2];\n    }\n    // bbox1 in right side\n    if (bbox1[0] > bbox2[2]) {\n        dx = bbox1[0] - bbox2[2];\n    }\n    // bbox1 in above side\n    if (bbox1[1] > bbox2[3]) {\n        dy = bbox1[1] - bbox2[3];\n    }\n    // bbox1 in down side\n    if (bbox1[3] < bbox2[1]) {\n        dy = bbox2[1] - bbox1[3];\n    }\n    return ruler.distance([0.0, 0.0], [dx, dy]);\n}\nfunction pointToLineDistance(point, line, ruler) {\n    const nearestPoint = ruler.pointOnLine(line, point);\n    return ruler.distance(point, nearestPoint.point);\n}\nfunction segmentToSegmentDistance(p1, p2, q1, q2, ruler) {\n    const dist1 = Math.min(pointToLineDistance(p1, [q1, q2], ruler), pointToLineDistance(p2, [q1, q2], ruler));\n    const dist2 = Math.min(pointToLineDistance(q1, [p1, p2], ruler), pointToLineDistance(q2, [p1, p2], ruler));\n    return Math.min(dist1, dist2);\n}\nfunction lineToLineDistance(line1, range1, line2, range2, ruler) {\n    const rangeSafe = isRangeSafe(range1, line1.length) && isRangeSafe(range2, line2.length);\n    if (!rangeSafe) {\n        return Infinity;\n    }\n    let dist = Infinity;\n    for (let i = range1[0]; i < range1[1]; ++i) {\n        const p1 = line1[i];\n        const p2 = line1[i + 1];\n        for (let j = range2[0]; j < range2[1]; ++j) {\n            const q1 = line2[j];\n            const q2 = line2[j + 1];\n            if (segmentIntersectSegment(p1, p2, q1, q2)) {\n                return 0.0;\n            }\n            dist = Math.min(dist, segmentToSegmentDistance(p1, p2, q1, q2, ruler));\n        }\n    }\n    return dist;\n}\nfunction pointsToPointsDistance(points1, range1, points2, range2, ruler) {\n    const rangeSafe = isRangeSafe(range1, points1.length) && isRangeSafe(range2, points2.length);\n    if (!rangeSafe) {\n        return NaN;\n    }\n    let dist = Infinity;\n    for (let i = range1[0]; i <= range1[1]; ++i) {\n        for (let j = range2[0]; j <= range2[1]; ++j) {\n            dist = Math.min(dist, ruler.distance(points1[i], points2[j]));\n            if (dist === 0.0) {\n                return dist;\n            }\n        }\n    }\n    return dist;\n}\nfunction pointToPolygonDistance(point, polygon, ruler) {\n    if (pointWithinPolygon(point, polygon, true)) {\n        return 0.0;\n    }\n    let dist = Infinity;\n    for (const ring of polygon) {\n        const front = ring[0];\n        const back = ring[ring.length - 1];\n        if (front !== back) {\n            dist = Math.min(dist, pointToLineDistance(point, [back, front], ruler));\n            if (dist === 0.0) {\n                return dist;\n            }\n        }\n        const nearestPoint = ruler.pointOnLine(ring, point);\n        dist = Math.min(dist, ruler.distance(point, nearestPoint.point));\n        if (dist === 0.0) {\n            return dist;\n        }\n    }\n    return dist;\n}\nfunction lineToPolygonDistance(line, range, polygon, ruler) {\n    if (!isRangeSafe(range, line.length)) {\n        return NaN;\n    }\n    for (let i = range[0]; i <= range[1]; ++i) {\n        if (pointWithinPolygon(line[i], polygon, true)) {\n            return 0.0;\n        }\n    }\n    let dist = Infinity;\n    for (let i = range[0]; i < range[1]; ++i) {\n        const p1 = line[i];\n        const p2 = line[i + 1];\n        for (const ring of polygon) {\n            for (let j = 0, len = ring.length, k = len - 1; j < len; k = j++) {\n                const q1 = ring[k];\n                const q2 = ring[j];\n                if (segmentIntersectSegment(p1, p2, q1, q2)) {\n                    return 0.0;\n                }\n                dist = Math.min(dist, segmentToSegmentDistance(p1, p2, q1, q2, ruler));\n            }\n        }\n    }\n    return dist;\n}\nfunction polygonIntersect(poly1, poly2) {\n    for (const ring of poly1) {\n        for (const point of ring) {\n            if (pointWithinPolygon(point, poly2, true)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction polygonToPolygonDistance(polygon1, polygon2, ruler, currentMiniDist = Infinity) {\n    const bbox1 = getPolygonBBox(polygon1);\n    const bbox2 = getPolygonBBox(polygon2);\n    if (currentMiniDist !== Infinity && bboxToBBoxDistance(bbox1, bbox2, ruler) >= currentMiniDist) {\n        return currentMiniDist;\n    }\n    if (boxWithinBox(bbox1, bbox2)) {\n        if (polygonIntersect(polygon1, polygon2)) {\n            return 0.0;\n        }\n    }\n    else if (polygonIntersect(polygon2, polygon1)) {\n        return 0.0;\n    }\n    let dist = Infinity;\n    for (const ring1 of polygon1) {\n        for (let i = 0, len1 = ring1.length, l = len1 - 1; i < len1; l = i++) {\n            const p1 = ring1[l];\n            const p2 = ring1[i];\n            for (const ring2 of polygon2) {\n                for (let j = 0, len2 = ring2.length, k = len2 - 1; j < len2; k = j++) {\n                    const q1 = ring2[k];\n                    const q2 = ring2[j];\n                    if (segmentIntersectSegment(p1, p2, q1, q2)) {\n                        return 0.0;\n                    }\n                    dist = Math.min(dist, segmentToSegmentDistance(p1, p2, q1, q2, ruler));\n                }\n            }\n        }\n    }\n    return dist;\n}\nfunction updateQueue(distQueue, miniDist, ruler, points, polyBBox, rangeA) {\n    if (!rangeA) {\n        return;\n    }\n    const tempDist = bboxToBBoxDistance(getBBox(points, rangeA), polyBBox, ruler);\n    // Insert new pair to the queue if the bbox distance is less than\n    // miniDist, The pair with biggest distance will be at the top\n    if (tempDist < miniDist) {\n        distQueue.push([tempDist, rangeA, [0, 0]]);\n    }\n}\nfunction updateQueueTwoSets(distQueue, miniDist, ruler, pointSet1, pointSet2, range1, range2) {\n    if (!range1 || !range2) {\n        return;\n    }\n    const tempDist = bboxToBBoxDistance(getBBox(pointSet1, range1), getBBox(pointSet2, range2), ruler);\n    // Insert new pair to the queue if the bbox distance is less than\n    // miniDist, The pair with biggest distance will be at the top\n    if (tempDist < miniDist) {\n        distQueue.push([tempDist, range1, range2]);\n    }\n}\n// Divide and conquer, the time complexity is O(n*lgn), faster than Brute force\n// O(n*n) Most of the time, use index for in-place processing.\nfunction pointsToPolygonDistance(points, isLine, polygon, ruler, currentMiniDist = Infinity) {\n    let miniDist = Math.min(ruler.distance(points[0], polygon[0][0]), currentMiniDist);\n    if (miniDist === 0.0) {\n        return miniDist;\n    }\n    const distQueue = new TinyQueue([[0, [0, points.length - 1], [0, 0]]], compareDistPair);\n    const polyBBox = getPolygonBBox(polygon);\n    while (distQueue.length > 0) {\n        const distPair = distQueue.pop();\n        if (distPair[0] >= miniDist) {\n            continue;\n        }\n        const range = distPair[1];\n        // In case the set size are relatively small, we could use brute-force directly\n        const threshold = isLine ? MinLinePointsSize : MinPointsSize;\n        if (getRangeSize(range) <= threshold) {\n            if (!isRangeSafe(range, points.length)) {\n                return NaN;\n            }\n            if (isLine) {\n                const tempDist = lineToPolygonDistance(points, range, polygon, ruler);\n                if (isNaN(tempDist) || tempDist === 0.0) {\n                    return tempDist;\n                }\n                miniDist = Math.min(miniDist, tempDist);\n            }\n            else {\n                for (let i = range[0]; i <= range[1]; ++i) {\n                    const tempDist = pointToPolygonDistance(points[i], polygon, ruler);\n                    miniDist = Math.min(miniDist, tempDist);\n                    if (miniDist === 0.0) {\n                        return 0.0;\n                    }\n                }\n            }\n        }\n        else {\n            const newRangesA = splitRange(range, isLine);\n            updateQueue(distQueue, miniDist, ruler, points, polyBBox, newRangesA[0]);\n            updateQueue(distQueue, miniDist, ruler, points, polyBBox, newRangesA[1]);\n        }\n    }\n    return miniDist;\n}\nfunction pointSetToPointSetDistance(pointSet1, isLine1, pointSet2, isLine2, ruler, currentMiniDist = Infinity) {\n    let miniDist = Math.min(currentMiniDist, ruler.distance(pointSet1[0], pointSet2[0]));\n    if (miniDist === 0.0) {\n        return miniDist;\n    }\n    const distQueue = new TinyQueue([[0, [0, pointSet1.length - 1], [0, pointSet2.length - 1]]], compareDistPair);\n    while (distQueue.length > 0) {\n        const distPair = distQueue.pop();\n        if (distPair[0] >= miniDist) {\n            continue;\n        }\n        const rangeA = distPair[1];\n        const rangeB = distPair[2];\n        const threshold1 = isLine1 ? MinLinePointsSize : MinPointsSize;\n        const threshold2 = isLine2 ? MinLinePointsSize : MinPointsSize;\n        // In case the set size are relatively small, we could use brute-force directly\n        if (getRangeSize(rangeA) <= threshold1 && getRangeSize(rangeB) <= threshold2) {\n            if (!isRangeSafe(rangeA, pointSet1.length) && isRangeSafe(rangeB, pointSet2.length)) {\n                return NaN;\n            }\n            let tempDist;\n            if (isLine1 && isLine2) {\n                tempDist = lineToLineDistance(pointSet1, rangeA, pointSet2, rangeB, ruler);\n                miniDist = Math.min(miniDist, tempDist);\n            }\n            else if (isLine1 && !isLine2) {\n                const sublibe = pointSet1.slice(rangeA[0], rangeA[1] + 1);\n                for (let i = rangeB[0]; i <= rangeB[1]; ++i) {\n                    tempDist = pointToLineDistance(pointSet2[i], sublibe, ruler);\n                    miniDist = Math.min(miniDist, tempDist);\n                    if (miniDist === 0.0) {\n                        return miniDist;\n                    }\n                }\n            }\n            else if (!isLine1 && isLine2) {\n                const sublibe = pointSet2.slice(rangeB[0], rangeB[1] + 1);\n                for (let i = rangeA[0]; i <= rangeA[1]; ++i) {\n                    tempDist = pointToLineDistance(pointSet1[i], sublibe, ruler);\n                    miniDist = Math.min(miniDist, tempDist);\n                    if (miniDist === 0.0) {\n                        return miniDist;\n                    }\n                }\n            }\n            else {\n                tempDist = pointsToPointsDistance(pointSet1, rangeA, pointSet2, rangeB, ruler);\n                miniDist = Math.min(miniDist, tempDist);\n            }\n        }\n        else {\n            const newRangesA = splitRange(rangeA, isLine1);\n            const newRangesB = splitRange(rangeB, isLine2);\n            updateQueueTwoSets(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[0], newRangesB[0]);\n            updateQueueTwoSets(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[0], newRangesB[1]);\n            updateQueueTwoSets(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[1], newRangesB[0]);\n            updateQueueTwoSets(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[1], newRangesB[1]);\n        }\n    }\n    return miniDist;\n}\nfunction pointToGeometryDistance(ctx, geometries) {\n    const tilePoints = ctx.geometry();\n    const pointPosition = tilePoints.flat().map(p => getLngLatFromTileCoord([p.x, p.y], ctx.canonical));\n    if (tilePoints.length === 0) {\n        return NaN;\n    }\n    const ruler = new CheapRuler(pointPosition[0][1]);\n    let dist = Infinity;\n    for (const geometry of geometries) {\n        switch (geometry.type) {\n            case 'Point':\n                dist = Math.min(dist, pointSetToPointSetDistance(pointPosition, false, [geometry.coordinates], false, ruler, dist));\n                break;\n            case 'LineString':\n                dist = Math.min(dist, pointSetToPointSetDistance(pointPosition, false, geometry.coordinates, true, ruler, dist));\n                break;\n            case 'Polygon':\n                dist = Math.min(dist, pointsToPolygonDistance(pointPosition, false, geometry.coordinates, ruler, dist));\n                break;\n        }\n        if (dist === 0.0) {\n            return dist;\n        }\n    }\n    return dist;\n}\nfunction lineStringToGeometryDistance(ctx, geometries) {\n    const tileLine = ctx.geometry();\n    const linePositions = tileLine.flat().map(p => getLngLatFromTileCoord([p.x, p.y], ctx.canonical));\n    if (tileLine.length === 0) {\n        return NaN;\n    }\n    const ruler = new CheapRuler(linePositions[0][1]);\n    let dist = Infinity;\n    for (const geometry of geometries) {\n        switch (geometry.type) {\n            case 'Point':\n                dist = Math.min(dist, pointSetToPointSetDistance(linePositions, true, [geometry.coordinates], false, ruler, dist));\n                break;\n            case 'LineString':\n                dist = Math.min(dist, pointSetToPointSetDistance(linePositions, true, geometry.coordinates, true, ruler, dist));\n                break;\n            case 'Polygon':\n                dist = Math.min(dist, pointsToPolygonDistance(linePositions, true, geometry.coordinates, ruler, dist));\n                break;\n        }\n        if (dist === 0.0) {\n            return dist;\n        }\n    }\n    return dist;\n}\nfunction polygonToGeometryDistance(ctx, geometries) {\n    const tilePolygon = ctx.geometry();\n    if (tilePolygon.length === 0 || tilePolygon[0].length === 0) {\n        return NaN;\n    }\n    const polygons = classifyRings(tilePolygon, 0).map(polygon => {\n        return polygon.map(ring => {\n            return ring.map(p => getLngLatFromTileCoord([p.x, p.y], ctx.canonical));\n        });\n    });\n    const ruler = new CheapRuler(polygons[0][0][0][1]);\n    let dist = Infinity;\n    for (const geometry of geometries) {\n        for (const polygon of polygons) {\n            switch (geometry.type) {\n                case 'Point':\n                    dist = Math.min(dist, pointsToPolygonDistance([geometry.coordinates], false, polygon, ruler, dist));\n                    break;\n                case 'LineString':\n                    dist = Math.min(dist, pointsToPolygonDistance(geometry.coordinates, true, polygon, ruler, dist));\n                    break;\n                case 'Polygon':\n                    dist = Math.min(dist, polygonToPolygonDistance(polygon, geometry.coordinates, ruler, dist));\n                    break;\n            }\n            if (dist === 0.0) {\n                return dist;\n            }\n        }\n    }\n    return dist;\n}\nfunction toSimpleGeometry(geometry) {\n    if (geometry.type === 'MultiPolygon') {\n        return geometry.coordinates.map(polygon => {\n            return {\n                type: 'Polygon',\n                coordinates: polygon\n            };\n        });\n    }\n    if (geometry.type === 'MultiLineString') {\n        return geometry.coordinates.map(lineString => {\n            return {\n                type: 'LineString',\n                coordinates: lineString\n            };\n        });\n    }\n    if (geometry.type === 'MultiPoint') {\n        return geometry.coordinates.map(point => {\n            return {\n                type: 'Point',\n                coordinates: point\n            };\n        });\n    }\n    return [geometry];\n}\nclass Distance {\n    constructor(geojson, geometries) {\n        this.type = NumberType;\n        this.geojson = geojson;\n        this.geometries = geometries;\n    }\n    static parse(args, context) {\n        if (args.length !== 2)\n            return context.error(`'distance' expression requires exactly one argument, but found ${args.length - 1} instead.`);\n        if (isValue(args[1])) {\n            const geojson = args[1];\n            if (geojson.type === 'FeatureCollection') {\n                return new Distance(geojson, geojson.features.map(feature => toSimpleGeometry(feature.geometry)).flat());\n            }\n            else if (geojson.type === 'Feature') {\n                return new Distance(geojson, toSimpleGeometry(geojson.geometry));\n            }\n            else if ('type' in geojson && 'coordinates' in geojson) {\n                return new Distance(geojson, toSimpleGeometry(geojson));\n            }\n        }\n        return context.error('\\'distance\\' expression requires valid geojson object that contains polygon geometry type.');\n    }\n    evaluate(ctx) {\n        if (ctx.geometry() != null && ctx.canonicalID() != null) {\n            if (ctx.geometryType() === 'Point') {\n                return pointToGeometryDistance(ctx, this.geometries);\n            }\n            else if (ctx.geometryType() === 'LineString') {\n                return lineStringToGeometryDistance(ctx, this.geometries);\n            }\n            else if (ctx.geometryType() === 'Polygon') {\n                return polygonToGeometryDistance(ctx, this.geometries);\n            }\n        }\n        return NaN;\n    }\n    eachChild() { }\n    outputDefined() {\n        return true;\n    }\n}\n\nconst expressions$1 = {\n    // special forms\n    '==': Equals,\n    '!=': NotEquals,\n    '>': GreaterThan,\n    '<': LessThan,\n    '>=': GreaterThanOrEqual,\n    '<=': LessThanOrEqual,\n    'array': Assertion,\n    'at': At,\n    'boolean': Assertion,\n    'case': Case,\n    'coalesce': Coalesce,\n    'collator': CollatorExpression,\n    'format': FormatExpression,\n    'image': ImageExpression,\n    'in': In,\n    'index-of': IndexOf,\n    'interpolate': Interpolate,\n    'interpolate-hcl': Interpolate,\n    'interpolate-lab': Interpolate,\n    'length': Length,\n    'let': Let,\n    'literal': Literal,\n    'match': Match,\n    'number': Assertion,\n    'number-format': NumberFormat,\n    'object': Assertion,\n    'slice': Slice,\n    'step': Step,\n    'string': Assertion,\n    'to-boolean': Coercion,\n    'to-color': Coercion,\n    'to-number': Coercion,\n    'to-string': Coercion,\n    'var': Var,\n    'within': Within,\n    'distance': Distance\n};\n\nclass CompoundExpression {\n    constructor(name, type, evaluate, args) {\n        this.name = name;\n        this.type = type;\n        this._evaluate = evaluate;\n        this.args = args;\n    }\n    evaluate(ctx) {\n        return this._evaluate(ctx, this.args);\n    }\n    eachChild(fn) {\n        this.args.forEach(fn);\n    }\n    outputDefined() {\n        return false;\n    }\n    static parse(args, context) {\n        const op = args[0];\n        const definition = CompoundExpression.definitions[op];\n        if (!definition) {\n            return context.error(`Unknown expression \"${op}\". If you wanted a literal array, use [\"literal\", [...]].`, 0);\n        }\n        // Now check argument types against each signature\n        const type = Array.isArray(definition) ?\n            definition[0] : definition.type;\n        const availableOverloads = Array.isArray(definition) ?\n            [[definition[1], definition[2]]] :\n            definition.overloads;\n        const overloads = availableOverloads.filter(([signature]) => (!Array.isArray(signature) || // varags\n            signature.length === args.length - 1 // correct param count\n        ));\n        let signatureContext = null;\n        for (const [params, evaluate] of overloads) {\n            // Use a fresh context for each attempted signature so that, if\n            // we eventually succeed, we haven't polluted `context.errors`.\n            signatureContext = new ParsingContext(context.registry, isExpressionConstant, context.path, null, context.scope);\n            // First parse all the args, potentially coercing to the\n            // types expected by this overload.\n            const parsedArgs = [];\n            let argParseFailed = false;\n            for (let i = 1; i < args.length; i++) {\n                const arg = args[i];\n                const expectedType = Array.isArray(params) ?\n                    params[i - 1] :\n                    params.type;\n                const parsed = signatureContext.parse(arg, 1 + parsedArgs.length, expectedType);\n                if (!parsed) {\n                    argParseFailed = true;\n                    break;\n                }\n                parsedArgs.push(parsed);\n            }\n            if (argParseFailed) {\n                // Couldn't coerce args of this overload to expected type, move\n                // on to next one.\n                continue;\n            }\n            if (Array.isArray(params)) {\n                if (params.length !== parsedArgs.length) {\n                    signatureContext.error(`Expected ${params.length} arguments, but found ${parsedArgs.length} instead.`);\n                    continue;\n                }\n            }\n            for (let i = 0; i < parsedArgs.length; i++) {\n                const expected = Array.isArray(params) ? params[i] : params.type;\n                const arg = parsedArgs[i];\n                signatureContext.concat(i + 1).checkSubtype(expected, arg.type);\n            }\n            if (signatureContext.errors.length === 0) {\n                return new CompoundExpression(op, type, evaluate, parsedArgs);\n            }\n        }\n        if (overloads.length === 1) {\n            context.errors.push(...signatureContext.errors);\n        }\n        else {\n            const expected = overloads.length ? overloads : availableOverloads;\n            const signatures = expected\n                .map(([params]) => stringifySignature(params))\n                .join(' | ');\n            const actualTypes = [];\n            // For error message, re-parse arguments without trying to\n            // apply any coercions\n            for (let i = 1; i < args.length; i++) {\n                const parsed = context.parse(args[i], 1 + actualTypes.length);\n                if (!parsed)\n                    return null;\n                actualTypes.push(typeToString(parsed.type));\n            }\n            context.error(`Expected arguments of type ${signatures}, but found (${actualTypes.join(', ')}) instead.`);\n        }\n        return null;\n    }\n    static register(registry, definitions) {\n        CompoundExpression.definitions = definitions;\n        for (const name in definitions) {\n            registry[name] = CompoundExpression;\n        }\n    }\n}\nfunction rgba(ctx, [r, g, b, a]) {\n    r = r.evaluate(ctx);\n    g = g.evaluate(ctx);\n    b = b.evaluate(ctx);\n    const alpha = a ? a.evaluate(ctx) : 1;\n    const error = validateRGBA(r, g, b, alpha);\n    if (error)\n        throw new RuntimeError(error);\n    return new Color(r / 255, g / 255, b / 255, alpha, false);\n}\nfunction has(key, obj) {\n    return key in obj;\n}\nfunction get(key, obj) {\n    const v = obj[key];\n    return typeof v === 'undefined' ? null : v;\n}\nfunction binarySearch(v, a, i, j) {\n    while (i <= j) {\n        const m = (i + j) >> 1;\n        if (a[m] === v)\n            return true;\n        if (a[m] > v)\n            j = m - 1;\n        else\n            i = m + 1;\n    }\n    return false;\n}\nfunction varargs(type) {\n    return { type };\n}\nCompoundExpression.register(expressions$1, {\n    'error': [\n        ErrorType,\n        [StringType],\n        (ctx, [v]) => { throw new RuntimeError(v.evaluate(ctx)); }\n    ],\n    'typeof': [\n        StringType,\n        [ValueType],\n        (ctx, [v]) => typeToString(typeOf(v.evaluate(ctx)))\n    ],\n    'to-rgba': [\n        array(NumberType, 4),\n        [ColorType],\n        (ctx, [v]) => {\n            const [r, g, b, a] = v.evaluate(ctx).rgb;\n            return [r * 255, g * 255, b * 255, a];\n        },\n    ],\n    'rgb': [\n        ColorType,\n        [NumberType, NumberType, NumberType],\n        rgba\n    ],\n    'rgba': [\n        ColorType,\n        [NumberType, NumberType, NumberType, NumberType],\n        rgba\n    ],\n    'has': {\n        type: BooleanType,\n        overloads: [\n            [\n                [StringType],\n                (ctx, [key]) => has(key.evaluate(ctx), ctx.properties())\n            ], [\n                [StringType, ObjectType],\n                (ctx, [key, obj]) => has(key.evaluate(ctx), obj.evaluate(ctx))\n            ]\n        ]\n    },\n    'get': {\n        type: ValueType,\n        overloads: [\n            [\n                [StringType],\n                (ctx, [key]) => get(key.evaluate(ctx), ctx.properties())\n            ], [\n                [StringType, ObjectType],\n                (ctx, [key, obj]) => get(key.evaluate(ctx), obj.evaluate(ctx))\n            ]\n        ]\n    },\n    'feature-state': [\n        ValueType,\n        [StringType],\n        (ctx, [key]) => get(key.evaluate(ctx), ctx.featureState || {})\n    ],\n    'properties': [\n        ObjectType,\n        [],\n        (ctx) => ctx.properties()\n    ],\n    'geometry-type': [\n        StringType,\n        [],\n        (ctx) => ctx.geometryType()\n    ],\n    'id': [\n        ValueType,\n        [],\n        (ctx) => ctx.id()\n    ],\n    'zoom': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.zoom\n    ],\n    'heatmap-density': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.heatmapDensity || 0\n    ],\n    'line-progress': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.lineProgress || 0\n    ],\n    'accumulated': [\n        ValueType,\n        [],\n        (ctx) => ctx.globals.accumulated === undefined ? null : ctx.globals.accumulated\n    ],\n    '+': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => {\n            let result = 0;\n            for (const arg of args) {\n                result += arg.evaluate(ctx);\n            }\n            return result;\n        }\n    ],\n    '*': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => {\n            let result = 1;\n            for (const arg of args) {\n                result *= arg.evaluate(ctx);\n            }\n            return result;\n        }\n    ],\n    '-': {\n        type: NumberType,\n        overloads: [\n            [\n                [NumberType, NumberType],\n                (ctx, [a, b]) => a.evaluate(ctx) - b.evaluate(ctx)\n            ], [\n                [NumberType],\n                (ctx, [a]) => -a.evaluate(ctx)\n            ]\n        ]\n    },\n    '/': [\n        NumberType,\n        [NumberType, NumberType],\n        (ctx, [a, b]) => a.evaluate(ctx) / b.evaluate(ctx)\n    ],\n    '%': [\n        NumberType,\n        [NumberType, NumberType],\n        (ctx, [a, b]) => a.evaluate(ctx) % b.evaluate(ctx)\n    ],\n    'ln2': [\n        NumberType,\n        [],\n        () => Math.LN2\n    ],\n    'pi': [\n        NumberType,\n        [],\n        () => Math.PI\n    ],\n    'e': [\n        NumberType,\n        [],\n        () => Math.E\n    ],\n    '^': [\n        NumberType,\n        [NumberType, NumberType],\n        (ctx, [b, e]) => Math.pow(b.evaluate(ctx), e.evaluate(ctx))\n    ],\n    'sqrt': [\n        NumberType,\n        [NumberType],\n        (ctx, [x]) => Math.sqrt(x.evaluate(ctx))\n    ],\n    'log10': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.log(n.evaluate(ctx)) / Math.LN10\n    ],\n    'ln': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.log(n.evaluate(ctx))\n    ],\n    'log2': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.log(n.evaluate(ctx)) / Math.LN2\n    ],\n    'sin': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.sin(n.evaluate(ctx))\n    ],\n    'cos': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.cos(n.evaluate(ctx))\n    ],\n    'tan': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.tan(n.evaluate(ctx))\n    ],\n    'asin': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.asin(n.evaluate(ctx))\n    ],\n    'acos': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.acos(n.evaluate(ctx))\n    ],\n    'atan': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.atan(n.evaluate(ctx))\n    ],\n    'min': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => Math.min(...args.map(arg => arg.evaluate(ctx)))\n    ],\n    'max': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => Math.max(...args.map(arg => arg.evaluate(ctx)))\n    ],\n    'abs': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.abs(n.evaluate(ctx))\n    ],\n    'round': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => {\n            const v = n.evaluate(ctx);\n            // Javascript's Math.round() rounds towards +Infinity for halfway\n            // values, even when they're negative. It's more common to round\n            // away from 0 (e.g., this is what python and C++ do)\n            return v < 0 ? -Math.round(-v) : Math.round(v);\n        }\n    ],\n    'floor': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.floor(n.evaluate(ctx))\n    ],\n    'ceil': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.ceil(n.evaluate(ctx))\n    ],\n    'filter-==': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => ctx.properties()[k.value] === v.value\n    ],\n    'filter-id-==': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => ctx.id() === v.value\n    ],\n    'filter-type-==': [\n        BooleanType,\n        [StringType],\n        (ctx, [v]) => ctx.geometryDollarType() === v.value\n    ],\n    'filter-<': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[k.value];\n            const b = v.value;\n            return typeof a === typeof b && a < b;\n        }\n    ],\n    'filter-id-<': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = v.value;\n            return typeof a === typeof b && a < b;\n        }\n    ],\n    'filter->': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[k.value];\n            const b = v.value;\n            return typeof a === typeof b && a > b;\n        }\n    ],\n    'filter-id->': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = v.value;\n            return typeof a === typeof b && a > b;\n        }\n    ],\n    'filter-<=': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[k.value];\n            const b = v.value;\n            return typeof a === typeof b && a <= b;\n        }\n    ],\n    'filter-id-<=': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = v.value;\n            return typeof a === typeof b && a <= b;\n        }\n    ],\n    'filter->=': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[k.value];\n            const b = v.value;\n            return typeof a === typeof b && a >= b;\n        }\n    ],\n    'filter-id->=': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = v.value;\n            return typeof a === typeof b && a >= b;\n        }\n    ],\n    'filter-has': [\n        BooleanType,\n        [ValueType],\n        (ctx, [k]) => k.value in ctx.properties()\n    ],\n    'filter-has-id': [\n        BooleanType,\n        [],\n        (ctx) => (ctx.id() !== null && ctx.id() !== undefined)\n    ],\n    'filter-type-in': [\n        BooleanType,\n        [array(StringType)],\n        (ctx, [v]) => v.value.indexOf(ctx.geometryDollarType()) >= 0\n    ],\n    'filter-id-in': [\n        BooleanType,\n        [array(ValueType)],\n        (ctx, [v]) => v.value.indexOf(ctx.id()) >= 0\n    ],\n    'filter-in-small': [\n        BooleanType,\n        [StringType, array(ValueType)],\n        // assumes v is an array literal\n        (ctx, [k, v]) => v.value.indexOf(ctx.properties()[k.value]) >= 0\n    ],\n    'filter-in-large': [\n        BooleanType,\n        [StringType, array(ValueType)],\n        // assumes v is a array literal with values sorted in ascending order and of a single type\n        (ctx, [k, v]) => binarySearch(ctx.properties()[k.value], v.value, 0, v.value.length - 1)\n    ],\n    'all': {\n        type: BooleanType,\n        overloads: [\n            [\n                [BooleanType, BooleanType],\n                (ctx, [a, b]) => a.evaluate(ctx) && b.evaluate(ctx)\n            ],\n            [\n                varargs(BooleanType),\n                (ctx, args) => {\n                    for (const arg of args) {\n                        if (!arg.evaluate(ctx))\n                            return false;\n                    }\n                    return true;\n                }\n            ]\n        ]\n    },\n    'any': {\n        type: BooleanType,\n        overloads: [\n            [\n                [BooleanType, BooleanType],\n                (ctx, [a, b]) => a.evaluate(ctx) || b.evaluate(ctx)\n            ],\n            [\n                varargs(BooleanType),\n                (ctx, args) => {\n                    for (const arg of args) {\n                        if (arg.evaluate(ctx))\n                            return true;\n                    }\n                    return false;\n                }\n            ]\n        ]\n    },\n    '!': [\n        BooleanType,\n        [BooleanType],\n        (ctx, [b]) => !b.evaluate(ctx)\n    ],\n    'is-supported-script': [\n        BooleanType,\n        [StringType],\n        // At parse time this will always return true, so we need to exclude this expression with isGlobalPropertyConstant\n        (ctx, [s]) => {\n            const isSupportedScript = ctx.globals && ctx.globals.isSupportedScript;\n            if (isSupportedScript) {\n                return isSupportedScript(s.evaluate(ctx));\n            }\n            return true;\n        }\n    ],\n    'upcase': [\n        StringType,\n        [StringType],\n        (ctx, [s]) => s.evaluate(ctx).toUpperCase()\n    ],\n    'downcase': [\n        StringType,\n        [StringType],\n        (ctx, [s]) => s.evaluate(ctx).toLowerCase()\n    ],\n    'concat': [\n        StringType,\n        varargs(ValueType),\n        (ctx, args) => args.map(arg => valueToString(arg.evaluate(ctx))).join('')\n    ],\n    'resolved-locale': [\n        StringType,\n        [CollatorType],\n        (ctx, [collator]) => collator.evaluate(ctx).resolvedLocale()\n    ]\n});\nfunction stringifySignature(signature) {\n    if (Array.isArray(signature)) {\n        return `(${signature.map(typeToString).join(', ')})`;\n    }\n    else {\n        return `(${typeToString(signature.type)}...)`;\n    }\n}\nfunction isExpressionConstant(expression) {\n    if (expression instanceof Var) {\n        return isExpressionConstant(expression.boundExpression);\n    }\n    else if (expression instanceof CompoundExpression && expression.name === 'error') {\n        return false;\n    }\n    else if (expression instanceof CollatorExpression) {\n        // Although the results of a Collator expression with fixed arguments\n        // generally shouldn't change between executions, we can't serialize them\n        // as constant expressions because results change based on environment.\n        return false;\n    }\n    else if (expression instanceof Within) {\n        return false;\n    }\n    else if (expression instanceof Distance) {\n        return false;\n    }\n    const isTypeAnnotation = expression instanceof Coercion ||\n        expression instanceof Assertion;\n    let childrenConstant = true;\n    expression.eachChild(child => {\n        // We can _almost_ assume that if `expressions` children are constant,\n        // they would already have been evaluated to Literal values when they\n        // were parsed.  Type annotations are the exception, because they might\n        // have been inferred and added after a child was parsed.\n        // So we recurse into isConstant() for the children of type annotations,\n        // but otherwise simply check whether they are Literals.\n        if (isTypeAnnotation) {\n            childrenConstant = childrenConstant && isExpressionConstant(child);\n        }\n        else {\n            childrenConstant = childrenConstant && child instanceof Literal;\n        }\n    });\n    if (!childrenConstant) {\n        return false;\n    }\n    return isFeatureConstant(expression) &&\n        isGlobalPropertyConstant(expression, ['zoom', 'heatmap-density', 'line-progress', 'accumulated', 'is-supported-script']);\n}\nfunction isFeatureConstant(e) {\n    if (e instanceof CompoundExpression) {\n        if (e.name === 'get' && e.args.length === 1) {\n            return false;\n        }\n        else if (e.name === 'feature-state') {\n            return false;\n        }\n        else if (e.name === 'has' && e.args.length === 1) {\n            return false;\n        }\n        else if (e.name === 'properties' ||\n            e.name === 'geometry-type' ||\n            e.name === 'id') {\n            return false;\n        }\n        else if (/^filter-/.test(e.name)) {\n            return false;\n        }\n    }\n    if (e instanceof Within) {\n        return false;\n    }\n    if (e instanceof Distance) {\n        return false;\n    }\n    let result = true;\n    e.eachChild(arg => {\n        if (result && !isFeatureConstant(arg)) {\n            result = false;\n        }\n    });\n    return result;\n}\nfunction isStateConstant(e) {\n    if (e instanceof CompoundExpression) {\n        if (e.name === 'feature-state') {\n            return false;\n        }\n    }\n    let result = true;\n    e.eachChild(arg => {\n        if (result && !isStateConstant(arg)) {\n            result = false;\n        }\n    });\n    return result;\n}\nfunction isGlobalPropertyConstant(e, properties) {\n    if (e instanceof CompoundExpression && properties.indexOf(e.name) >= 0) {\n        return false;\n    }\n    let result = true;\n    e.eachChild((arg) => {\n        if (result && !isGlobalPropertyConstant(arg, properties)) {\n            result = false;\n        }\n    });\n    return result;\n}\n\nfunction success(value) {\n    return { result: 'success', value };\n}\nfunction error(value) {\n    return { result: 'error', value };\n}\n\nfunction supportsPropertyExpression(spec) {\n    return spec['property-type'] === 'data-driven' || spec['property-type'] === 'cross-faded-data-driven';\n}\nfunction supportsZoomExpression(spec) {\n    return !!spec.expression && spec.expression.parameters.indexOf('zoom') > -1;\n}\nfunction supportsInterpolation(spec) {\n    return !!spec.expression && spec.expression.interpolated;\n}\n\nfunction getType(val) {\n    if (val instanceof Number) {\n        return 'number';\n    }\n    else if (val instanceof String) {\n        return 'string';\n    }\n    else if (val instanceof Boolean) {\n        return 'boolean';\n    }\n    else if (Array.isArray(val)) {\n        return 'array';\n    }\n    else if (val === null) {\n        return 'null';\n    }\n    else {\n        return typeof val;\n    }\n}\n\nfunction isFunction$1(value) {\n    return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\nfunction identityFunction(x) {\n    return x;\n}\nfunction createFunction(parameters, propertySpec) {\n    const isColor = propertySpec.type === 'color';\n    const zoomAndFeatureDependent = parameters.stops && typeof parameters.stops[0][0] === 'object';\n    const featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;\n    const zoomDependent = zoomAndFeatureDependent || !featureDependent;\n    const type = parameters.type || (supportsInterpolation(propertySpec) ? 'exponential' : 'interval');\n    if (isColor || propertySpec.type === 'padding') {\n        const parseFn = isColor ? Color.parse : Padding.parse;\n        parameters = extendBy({}, parameters);\n        if (parameters.stops) {\n            parameters.stops = parameters.stops.map((stop) => {\n                return [stop[0], parseFn(stop[1])];\n            });\n        }\n        if (parameters.default) {\n            parameters.default = parseFn(parameters.default);\n        }\n        else {\n            parameters.default = parseFn(propertySpec.default);\n        }\n    }\n    if (parameters.colorSpace && !isSupportedInterpolationColorSpace(parameters.colorSpace)) {\n        throw new Error(`Unknown color space: \"${parameters.colorSpace}\"`);\n    }\n    let innerFun;\n    let hashedStops;\n    let categoricalKeyType;\n    if (type === 'exponential') {\n        innerFun = evaluateExponentialFunction;\n    }\n    else if (type === 'interval') {\n        innerFun = evaluateIntervalFunction;\n    }\n    else if (type === 'categorical') {\n        innerFun = evaluateCategoricalFunction;\n        // For categorical functions, generate an Object as a hashmap of the stops for fast searching\n        hashedStops = Object.create(null);\n        for (const stop of parameters.stops) {\n            hashedStops[stop[0]] = stop[1];\n        }\n        // Infer key type based on first stop key-- used to encforce strict type checking later\n        categoricalKeyType = typeof parameters.stops[0][0];\n    }\n    else if (type === 'identity') {\n        innerFun = evaluateIdentityFunction;\n    }\n    else {\n        throw new Error(`Unknown function type \"${type}\"`);\n    }\n    if (zoomAndFeatureDependent) {\n        const featureFunctions = {};\n        const zoomStops = [];\n        for (let s = 0; s < parameters.stops.length; s++) {\n            const stop = parameters.stops[s];\n            const zoom = stop[0].zoom;\n            if (featureFunctions[zoom] === undefined) {\n                featureFunctions[zoom] = {\n                    zoom,\n                    type: parameters.type,\n                    property: parameters.property,\n                    default: parameters.default,\n                    stops: []\n                };\n                zoomStops.push(zoom);\n            }\n            featureFunctions[zoom].stops.push([stop[0].value, stop[1]]);\n        }\n        const featureFunctionStops = [];\n        for (const z of zoomStops) {\n            featureFunctionStops.push([featureFunctions[z].zoom, createFunction(featureFunctions[z], propertySpec)]);\n        }\n        const interpolationType = { name: 'linear' };\n        return {\n            kind: 'composite',\n            interpolationType,\n            interpolationFactor: Interpolate.interpolationFactor.bind(undefined, interpolationType),\n            zoomStops: featureFunctionStops.map(s => s[0]),\n            evaluate({ zoom }, properties) {\n                return evaluateExponentialFunction({\n                    stops: featureFunctionStops,\n                    base: parameters.base\n                }, propertySpec, zoom).evaluate(zoom, properties);\n            }\n        };\n    }\n    else if (zoomDependent) {\n        const interpolationType = type === 'exponential' ?\n            { name: 'exponential', base: parameters.base !== undefined ? parameters.base : 1 } : null;\n        return {\n            kind: 'camera',\n            interpolationType,\n            interpolationFactor: Interpolate.interpolationFactor.bind(undefined, interpolationType),\n            zoomStops: parameters.stops.map(s => s[0]),\n            evaluate: ({ zoom }) => innerFun(parameters, propertySpec, zoom, hashedStops, categoricalKeyType)\n        };\n    }\n    else {\n        return {\n            kind: 'source',\n            evaluate(_, feature) {\n                const value = feature && feature.properties ? feature.properties[parameters.property] : undefined;\n                if (value === undefined) {\n                    return coalesce$1(parameters.default, propertySpec.default);\n                }\n                return innerFun(parameters, propertySpec, value, hashedStops, categoricalKeyType);\n            }\n        };\n    }\n}\nfunction coalesce$1(a, b, c) {\n    if (a !== undefined)\n        return a;\n    if (b !== undefined)\n        return b;\n    if (c !== undefined)\n        return c;\n}\nfunction evaluateCategoricalFunction(parameters, propertySpec, input, hashedStops, keyType) {\n    const evaluated = typeof input === keyType ? hashedStops[input] : undefined; // Enforce strict typing on input\n    return coalesce$1(evaluated, parameters.default, propertySpec.default);\n}\nfunction evaluateIntervalFunction(parameters, propertySpec, input) {\n    // Edge cases\n    if (getType(input) !== 'number')\n        return coalesce$1(parameters.default, propertySpec.default);\n    const n = parameters.stops.length;\n    if (n === 1)\n        return parameters.stops[0][1];\n    if (input <= parameters.stops[0][0])\n        return parameters.stops[0][1];\n    if (input >= parameters.stops[n - 1][0])\n        return parameters.stops[n - 1][1];\n    const index = findStopLessThanOrEqualTo(parameters.stops.map((stop) => stop[0]), input);\n    return parameters.stops[index][1];\n}\nfunction evaluateExponentialFunction(parameters, propertySpec, input) {\n    const base = parameters.base !== undefined ? parameters.base : 1;\n    // Edge cases\n    if (getType(input) !== 'number')\n        return coalesce$1(parameters.default, propertySpec.default);\n    const n = parameters.stops.length;\n    if (n === 1)\n        return parameters.stops[0][1];\n    if (input <= parameters.stops[0][0])\n        return parameters.stops[0][1];\n    if (input >= parameters.stops[n - 1][0])\n        return parameters.stops[n - 1][1];\n    const index = findStopLessThanOrEqualTo(parameters.stops.map((stop) => stop[0]), input);\n    const t = interpolationFactor(input, base, parameters.stops[index][0], parameters.stops[index + 1][0]);\n    const outputLower = parameters.stops[index][1];\n    const outputUpper = parameters.stops[index + 1][1];\n    const interp = interpolateFactory[propertySpec.type] || identityFunction;\n    if (typeof outputLower.evaluate === 'function') {\n        return {\n            evaluate(...args) {\n                const evaluatedLower = outputLower.evaluate.apply(undefined, args);\n                const evaluatedUpper = outputUpper.evaluate.apply(undefined, args);\n                // Special case for fill-outline-color, which has no spec default.\n                if (evaluatedLower === undefined || evaluatedUpper === undefined) {\n                    return undefined;\n                }\n                return interp(evaluatedLower, evaluatedUpper, t, parameters.colorSpace);\n            }\n        };\n    }\n    return interp(outputLower, outputUpper, t, parameters.colorSpace);\n}\nfunction evaluateIdentityFunction(parameters, propertySpec, input) {\n    switch (propertySpec.type) {\n        case 'color':\n            input = Color.parse(input);\n            break;\n        case 'formatted':\n            input = Formatted.fromString(input.toString());\n            break;\n        case 'resolvedImage':\n            input = ResolvedImage.fromString(input.toString());\n            break;\n        case 'padding':\n            input = Padding.parse(input);\n            break;\n        default:\n            if (getType(input) !== propertySpec.type && (propertySpec.type !== 'enum' || !propertySpec.values[input])) {\n                input = undefined;\n            }\n    }\n    return coalesce$1(input, parameters.default, propertySpec.default);\n}\n/**\n * Returns a ratio that can be used to interpolate between exponential function\n * stops.\n *\n * How it works:\n * Two consecutive stop values define a (scaled and shifted) exponential\n * function `f(x) = a * base^x + b`, where `base` is the user-specified base,\n * and `a` and `b` are constants affording sufficient degrees of freedom to fit\n * the function to the given stops.\n *\n * Here's a bit of algebra that lets us compute `f(x)` directly from the stop\n * values without explicitly solving for `a` and `b`:\n *\n * First stop value: `f(x0) = y0 = a * base^x0 + b`\n * Second stop value: `f(x1) = y1 = a * base^x1 + b`\n * => `y1 - y0 = a(base^x1 - base^x0)`\n * => `a = (y1 - y0)/(base^x1 - base^x0)`\n *\n * Desired value: `f(x) = y = a * base^x + b`\n * => `f(x) = y0 + a * (base^x - base^x0)`\n *\n * From the above, we can replace the `a` in `a * (base^x - base^x0)` and do a\n * little algebra:\n * ```\n * a * (base^x - base^x0) = (y1 - y0)/(base^x1 - base^x0) * (base^x - base^x0)\n *                     = (y1 - y0) * (base^x - base^x0) / (base^x1 - base^x0)\n * ```\n *\n * If we let `(base^x - base^x0) / (base^x1 base^x0)`, then we have\n * `f(x) = y0 + (y1 - y0) * ratio`.  In other words, `ratio` may be treated as\n * an interpolation factor between the two stops' output values.\n *\n * (Note: a slightly different form for `ratio`,\n * `(base^(x-x0) - 1) / (base^(x1-x0) - 1) `, is equivalent, but requires fewer\n * expensive `Math.pow()` operations.)\n *\n * @private\n */\nfunction interpolationFactor(input, base, lowerValue, upperValue) {\n    const difference = upperValue - lowerValue;\n    const progress = input - lowerValue;\n    if (difference === 0) {\n        return 0;\n    }\n    else if (base === 1) {\n        return progress / difference;\n    }\n    else {\n        return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);\n    }\n}\n\nclass StyleExpression {\n    constructor(expression, propertySpec) {\n        this.expression = expression;\n        this._warningHistory = {};\n        this._evaluator = new EvaluationContext();\n        this._defaultValue = propertySpec ? getDefaultValue(propertySpec) : null;\n        this._enumValues = propertySpec && propertySpec.type === 'enum' ? propertySpec.values : null;\n    }\n    evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {\n        this._evaluator.globals = globals;\n        this._evaluator.feature = feature;\n        this._evaluator.featureState = featureState;\n        this._evaluator.canonical = canonical;\n        this._evaluator.availableImages = availableImages || null;\n        this._evaluator.formattedSection = formattedSection;\n        return this.expression.evaluate(this._evaluator);\n    }\n    evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {\n        this._evaluator.globals = globals;\n        this._evaluator.feature = feature || null;\n        this._evaluator.featureState = featureState || null;\n        this._evaluator.canonical = canonical;\n        this._evaluator.availableImages = availableImages || null;\n        this._evaluator.formattedSection = formattedSection || null;\n        try {\n            const val = this.expression.evaluate(this._evaluator);\n            if (val === null || val === undefined || (typeof val === 'number' && val !== val)) {\n                return this._defaultValue;\n            }\n            if (this._enumValues && !(val in this._enumValues)) {\n                throw new RuntimeError(`Expected value to be one of ${Object.keys(this._enumValues).map(v => JSON.stringify(v)).join(', ')}, but found ${JSON.stringify(val)} instead.`);\n            }\n            return val;\n        }\n        catch (e) {\n            if (!this._warningHistory[e.message]) {\n                this._warningHistory[e.message] = true;\n                if (typeof console !== 'undefined') {\n                    console.warn(e.message);\n                }\n            }\n            return this._defaultValue;\n        }\n    }\n}\nfunction isExpression(expression) {\n    return Array.isArray(expression) && expression.length > 0 &&\n        typeof expression[0] === 'string' && expression[0] in expressions$1;\n}\n/**\n * Parse and typecheck the given style spec JSON expression.  If\n * options.defaultValue is provided, then the resulting StyleExpression's\n * `evaluate()` method will handle errors by logging a warning (once per\n * message) and returning the default value.  Otherwise, it will throw\n * evaluation errors.\n *\n * @private\n */\nfunction createExpression(expression, propertySpec) {\n    const parser = new ParsingContext(expressions$1, isExpressionConstant, [], propertySpec ? getExpectedType(propertySpec) : undefined);\n    // For string-valued properties, coerce to string at the top level rather than asserting.\n    const parsed = parser.parse(expression, undefined, undefined, undefined, propertySpec && propertySpec.type === 'string' ? { typeAnnotation: 'coerce' } : undefined);\n    if (!parsed) {\n        return error(parser.errors);\n    }\n    return success(new StyleExpression(parsed, propertySpec));\n}\nclass ZoomConstantExpression {\n    constructor(kind, expression) {\n        this.kind = kind;\n        this._styleExpression = expression;\n        this.isStateDependent = kind !== 'constant' && !isStateConstant(expression.expression);\n    }\n    evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {\n        return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n    evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {\n        return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n}\nclass ZoomDependentExpression {\n    constructor(kind, expression, zoomStops, interpolationType) {\n        this.kind = kind;\n        this.zoomStops = zoomStops;\n        this._styleExpression = expression;\n        this.isStateDependent = kind !== 'camera' && !isStateConstant(expression.expression);\n        this.interpolationType = interpolationType;\n    }\n    evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {\n        return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n    evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {\n        return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n    interpolationFactor(input, lower, upper) {\n        if (this.interpolationType) {\n            return Interpolate.interpolationFactor(this.interpolationType, input, lower, upper);\n        }\n        else {\n            return 0;\n        }\n    }\n}\nfunction isZoomExpression(expression) {\n    return expression._styleExpression !== undefined;\n}\nfunction createPropertyExpression(expressionInput, propertySpec) {\n    const expression = createExpression(expressionInput, propertySpec);\n    if (expression.result === 'error') {\n        return expression;\n    }\n    const parsed = expression.value.expression;\n    const isFeatureConstantResult = isFeatureConstant(parsed);\n    if (!isFeatureConstantResult && !supportsPropertyExpression(propertySpec)) {\n        return error([new ExpressionParsingError('', 'data expressions not supported')]);\n    }\n    const isZoomConstant = isGlobalPropertyConstant(parsed, ['zoom']);\n    if (!isZoomConstant && !supportsZoomExpression(propertySpec)) {\n        return error([new ExpressionParsingError('', 'zoom expressions not supported')]);\n    }\n    const zoomCurve = findZoomCurve(parsed);\n    if (!zoomCurve && !isZoomConstant) {\n        return error([new ExpressionParsingError('', '\"zoom\" expression may only be used as input to a top-level \"step\" or \"interpolate\" expression.')]);\n    }\n    else if (zoomCurve instanceof ExpressionParsingError) {\n        return error([zoomCurve]);\n    }\n    else if (zoomCurve instanceof Interpolate && !supportsInterpolation(propertySpec)) {\n        return error([new ExpressionParsingError('', '\"interpolate\" expressions cannot be used with this property')]);\n    }\n    if (!zoomCurve) {\n        return success(isFeatureConstantResult ?\n            new ZoomConstantExpression('constant', expression.value) :\n            new ZoomConstantExpression('source', expression.value));\n    }\n    const interpolationType = zoomCurve instanceof Interpolate ? zoomCurve.interpolation : undefined;\n    return success(isFeatureConstantResult ?\n        new ZoomDependentExpression('camera', expression.value, zoomCurve.labels, interpolationType) :\n        new ZoomDependentExpression('composite', expression.value, zoomCurve.labels, interpolationType));\n}\n// serialization wrapper for old-style stop functions normalized to the\n// expression interface\nclass StylePropertyFunction {\n    constructor(parameters, specification) {\n        this._parameters = parameters;\n        this._specification = specification;\n        extendBy(this, createFunction(this._parameters, this._specification));\n    }\n    static deserialize(serialized) {\n        return new StylePropertyFunction(serialized._parameters, serialized._specification);\n    }\n    static serialize(input) {\n        return {\n            _parameters: input._parameters,\n            _specification: input._specification\n        };\n    }\n}\nfunction normalizePropertyExpression(value, specification) {\n    if (isFunction$1(value)) {\n        return new StylePropertyFunction(value, specification);\n    }\n    else if (isExpression(value)) {\n        const expression = createPropertyExpression(value, specification);\n        if (expression.result === 'error') {\n            // this should have been caught in validation\n            throw new Error(expression.value.map(err => `${err.key}: ${err.message}`).join(', '));\n        }\n        return expression.value;\n    }\n    else {\n        let constant = value;\n        if (specification.type === 'color' && typeof value === 'string') {\n            constant = Color.parse(value);\n        }\n        else if (specification.type === 'padding' && (typeof value === 'number' || Array.isArray(value))) {\n            constant = Padding.parse(value);\n        }\n        else if (specification.type === 'variableAnchorOffsetCollection' && Array.isArray(value)) {\n            constant = VariableAnchorOffsetCollection.parse(value);\n        }\n        else if (specification.type === 'projectionDefinition' && typeof value === 'string') {\n            constant = ProjectionDefinition.parse(value);\n        }\n        return {\n            kind: 'constant',\n            evaluate: () => constant\n        };\n    }\n}\n// Zoom-dependent expressions may only use [\"zoom\"] as the input to a top-level \"step\" or \"interpolate\"\n// expression (collectively referred to as a \"curve\"). The curve may be wrapped in one or more \"let\" or\n// \"coalesce\" expressions.\nfunction findZoomCurve(expression) {\n    let result = null;\n    if (expression instanceof Let) {\n        result = findZoomCurve(expression.result);\n    }\n    else if (expression instanceof Coalesce) {\n        for (const arg of expression.args) {\n            result = findZoomCurve(arg);\n            if (result) {\n                break;\n            }\n        }\n    }\n    else if ((expression instanceof Step || expression instanceof Interpolate) &&\n        expression.input instanceof CompoundExpression &&\n        expression.input.name === 'zoom') {\n        result = expression;\n    }\n    if (result instanceof ExpressionParsingError) {\n        return result;\n    }\n    expression.eachChild((child) => {\n        const childResult = findZoomCurve(child);\n        if (childResult instanceof ExpressionParsingError) {\n            result = childResult;\n        }\n        else if (!result && childResult) {\n            result = new ExpressionParsingError('', '\"zoom\" expression may only be used as input to a top-level \"step\" or \"interpolate\" expression.');\n        }\n        else if (result && childResult && result !== childResult) {\n            result = new ExpressionParsingError('', 'Only one zoom-based \"step\" or \"interpolate\" subexpression may be used in an expression.');\n        }\n    });\n    return result;\n}\nfunction getExpectedType(spec) {\n    const types = {\n        color: ColorType,\n        string: StringType,\n        number: NumberType,\n        enum: StringType,\n        boolean: BooleanType,\n        formatted: FormattedType,\n        padding: PaddingType,\n        projectionDefinition: ProjectionDefinitionType,\n        resolvedImage: ResolvedImageType,\n        variableAnchorOffsetCollection: VariableAnchorOffsetCollectionType\n    };\n    if (spec.type === 'array') {\n        return array(types[spec.value] || ValueType, spec.length);\n    }\n    return types[spec.type];\n}\nfunction getDefaultValue(spec) {\n    if (spec.type === 'color' && isFunction$1(spec.default)) {\n        // Special case for heatmap-color: it uses the 'default:' to define a\n        // default color ramp, but createExpression expects a simple value to fall\n        // back to in case of runtime errors\n        return new Color(0, 0, 0, 0);\n    }\n    else if (spec.type === 'color') {\n        return Color.parse(spec.default) || null;\n    }\n    else if (spec.type === 'padding') {\n        return Padding.parse(spec.default) || null;\n    }\n    else if (spec.type === 'variableAnchorOffsetCollection') {\n        return VariableAnchorOffsetCollection.parse(spec.default) || null;\n    }\n    else if (spec.type === 'projectionDefinition') {\n        return ProjectionDefinition.parse(spec.default) || null;\n    }\n    else if (spec.default === undefined) {\n        return null;\n    }\n    else {\n        return spec.default;\n    }\n}\n\nfunction isExpressionFilter(filter) {\n    if (filter === true || filter === false) {\n        return true;\n    }\n    if (!Array.isArray(filter) || filter.length === 0) {\n        return false;\n    }\n    switch (filter[0]) {\n        case 'has':\n            return filter.length >= 2 && filter[1] !== '$id' && filter[1] !== '$type';\n        case 'in':\n            return filter.length >= 3 && (typeof filter[1] !== 'string' || Array.isArray(filter[2]));\n        case '!in':\n        case '!has':\n        case 'none':\n            return false;\n        case '==':\n        case '!=':\n        case '>':\n        case '>=':\n        case '<':\n        case '<=':\n            return filter.length !== 3 || (Array.isArray(filter[1]) || Array.isArray(filter[2]));\n        case 'any':\n        case 'all':\n            for (const f of filter.slice(1)) {\n                if (!isExpressionFilter(f) && typeof f !== 'boolean') {\n                    return false;\n                }\n            }\n            return true;\n        default:\n            return true;\n    }\n}\nconst filterSpec = {\n    'type': 'boolean',\n    'default': false,\n    'transition': false,\n    'property-type': 'data-driven',\n    'expression': {\n        'interpolated': false,\n        'parameters': ['zoom', 'feature']\n    }\n};\n/**\n * Given a filter expressed as nested arrays, return a new function\n * that evaluates whether a given feature (with a .properties or .tags property)\n * passes its test.\n *\n * @private\n * @param {Array} filter MapLibre filter\n * @returns {Function} filter-evaluating function\n */\nfunction featureFilter(filter) {\n    if (filter === null || filter === undefined) {\n        return { filter: () => true, needGeometry: false };\n    }\n    if (!isExpressionFilter(filter)) {\n        filter = convertFilter$1(filter);\n    }\n    const compiled = createExpression(filter, filterSpec);\n    if (compiled.result === 'error') {\n        throw new Error(compiled.value.map(err => `${err.key}: ${err.message}`).join(', '));\n    }\n    else {\n        const needGeometry = geometryNeeded(filter);\n        return { filter: (globalProperties, feature, canonical) => compiled.value.evaluate(globalProperties, feature, {}, canonical),\n            needGeometry };\n    }\n}\n// Comparison function to sort numbers and strings\nfunction compare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\nfunction geometryNeeded(filter) {\n    if (!Array.isArray(filter))\n        return false;\n    if (filter[0] === 'within' || filter[0] === 'distance' || filter[0] === 'geometry-type')\n        return true;\n    for (let index = 1; index < filter.length; index++) {\n        if (geometryNeeded(filter[index]))\n            return true;\n    }\n    return false;\n}\nfunction convertFilter$1(filter) {\n    if (!filter)\n        return true;\n    const op = filter[0];\n    if (filter.length <= 1)\n        return (op !== 'any');\n    const converted = op === '==' ? convertComparisonOp$1(filter[1], filter[2], '==') :\n        op === '!=' ? convertNegation(convertComparisonOp$1(filter[1], filter[2], '==')) :\n            op === '<' ||\n                op === '>' ||\n                op === '<=' ||\n                op === '>=' ? convertComparisonOp$1(filter[1], filter[2], op) :\n                op === 'any' ? convertDisjunctionOp(filter.slice(1)) :\n                    op === 'all' ? ['all'].concat(filter.slice(1).map(convertFilter$1)) :\n                        op === 'none' ? ['all'].concat(filter.slice(1).map(convertFilter$1).map(convertNegation)) :\n                            op === 'in' ? convertInOp$1(filter[1], filter.slice(2)) :\n                                op === '!in' ? convertNegation(convertInOp$1(filter[1], filter.slice(2))) :\n                                    op === 'has' ? convertHasOp$1(filter[1]) :\n                                        op === '!has' ? convertNegation(convertHasOp$1(filter[1])) :\n                                            true;\n    return converted;\n}\nfunction convertComparisonOp$1(property, value, op) {\n    switch (property) {\n        case '$type':\n            return [`filter-type-${op}`, value];\n        case '$id':\n            return [`filter-id-${op}`, value];\n        default:\n            return [`filter-${op}`, property, value];\n    }\n}\nfunction convertDisjunctionOp(filters) {\n    return ['any'].concat(filters.map(convertFilter$1));\n}\nfunction convertInOp$1(property, values) {\n    if (values.length === 0) {\n        return false;\n    }\n    switch (property) {\n        case '$type':\n            return ['filter-type-in', ['literal', values]];\n        case '$id':\n            return ['filter-id-in', ['literal', values]];\n        default:\n            if (values.length > 200 && !values.some(v => typeof v !== typeof values[0])) {\n                return ['filter-in-large', property, ['literal', values.sort(compare)]];\n            }\n            else {\n                return ['filter-in-small', property, ['literal', values]];\n            }\n    }\n}\nfunction convertHasOp$1(property) {\n    switch (property) {\n        case '$type':\n            return true;\n        case '$id':\n            return ['filter-has-id'];\n        default:\n            return ['filter-has', property];\n    }\n}\nfunction convertNegation(filter) {\n    return ['!', filter];\n}\n\n/*\n * Convert the given filter to an expression, storing the expected types for\n * any feature properties referenced in expectedTypes.\n *\n * These expected types are needed in order to construct preflight type checks\n * needed for handling 'any' filters. A preflight type check is necessary in\n * order to mimic legacy filters' semantics around expected type mismatches.\n * For example, consider the legacy filter:\n *\n *     [\"any\", [\"all\", [\">\", \"y\", 0], [\">\", \"y\", 0]], [\">\", \"x\", 0]]\n *\n * Naively, we might convert this to the expression:\n *\n *     [\"any\", [\"all\", [\">\", [\"get\", \"y\"], 0], [\">\", [\"get\", \"z\"], 0]], [\">\", [\"get\", \"x\"], 0]]\n *\n * But if we tried to evaluate this against, say `{x: 1, y: null, z: 0}`, the\n * [\">\", [\"get\", \"y\"], 0] would cause an evaluation error, leading to the\n * entire filter returning false. Legacy filter semantics, though, ask for\n * [\">\", \"y\", 0] to simply return `false` when `y` is of the wrong type,\n * allowing the subsequent terms of the outer \"any\" expression to be evaluated\n * (resulting, in this case, in a `true` value, because x > 0).\n *\n * We account for this by inserting a preflight type-checking expression before\n * each \"any\" term, allowing us to avoid evaluating the actual converted filter\n * if any type mismatches would cause it to produce an evaluation error:\n *\n *     [\"any\",\n *       [\"case\",\n *         [\"all\", [\"==\", [\"typeof\", [\"get\", \"y\"]], \"number\"], [\"==\", [\"typeof\", [\"get\", \"z\"], \"number]],\n *         [\"all\", [\">\", [\"get\", \"y\"], 0], [\">\", [\"get\", \"z\"], 0]],\n *         false\n *       ],\n *       [\"case\",\n *         [\"==\", [\"typeof\", [\"get\", \"x\"], \"number\"]],\n *         [\">\", [\"get\", \"x\"], 0],\n *         false\n *       ]\n *     ]\n *\n * An alternative, possibly more direct approach would be to use type checks\n * in the conversion of each comparison operator, so that the converted version\n * of each individual ==, >=, etc. would mimic the legacy filter semantics. The\n * downside of this approach is that it can lead to many more type checks than\n * would otherwise be necessary: outside the context of an \"any\" expression,\n * bailing out due to a runtime type error (expression semantics) and returning\n * false (legacy filter semantics) are equivalent: they cause the filter to\n * produce a `false` result.\n */\nfunction convertFilter(filter, expectedTypes = {}) {\n    if (isExpressionFilter(filter))\n        return filter;\n    if (!filter)\n        return true;\n    const legacyFilter = filter;\n    const legacyOp = legacyFilter[0];\n    if (filter.length <= 1)\n        return (legacyOp !== 'any');\n    switch (legacyOp) {\n        case '==':\n        case '!=':\n        case '<':\n        case '>':\n        case '<=':\n        case '>=': {\n            const [, property, value] = filter;\n            return convertComparisonOp(property, value, legacyOp, expectedTypes);\n        }\n        case 'any': {\n            const [, ...conditions] = legacyFilter;\n            const children = conditions.map((f) => {\n                const types = {};\n                const child = convertFilter(f, types);\n                const typechecks = runtimeTypeChecks(types);\n                return typechecks === true ? child : ['case', typechecks, child, false];\n            });\n            return ['any', ...children];\n        }\n        case 'all': {\n            const [, ...conditions] = legacyFilter;\n            const children = conditions.map(f => convertFilter(f, expectedTypes));\n            return children.length > 1 ? ['all', ...children] : children[0];\n        }\n        case 'none': {\n            const [, ...conditions] = legacyFilter;\n            return ['!', convertFilter(['any', ...conditions], {})];\n        }\n        case 'in': {\n            const [, property, ...values] = legacyFilter;\n            return convertInOp(property, values);\n        }\n        case '!in': {\n            const [, property, ...values] = legacyFilter;\n            return convertInOp(property, values, true);\n        }\n        case 'has':\n            return convertHasOp(legacyFilter[1]);\n        case '!has':\n            return ['!', convertHasOp(legacyFilter[1])];\n        default:\n            return true;\n    }\n}\n// Given a set of feature properties and an expected type for each one,\n// construct an boolean expression that tests whether each property has the\n// right type.\n// E.g.: for {name: 'string', population: 'number'}, return\n// [ 'all',\n//   ['==', ['typeof', ['get', 'name'], 'string']],\n//   ['==', ['typeof', ['get', 'population'], 'number]]\n// ]\nfunction runtimeTypeChecks(expectedTypes) {\n    const conditions = [];\n    for (const property in expectedTypes) {\n        const get = property === '$id' ? ['id'] : ['get', property];\n        conditions.push(['==', ['typeof', get], expectedTypes[property]]);\n    }\n    if (conditions.length === 0)\n        return true;\n    if (conditions.length === 1)\n        return conditions[0];\n    return ['all', ...conditions];\n}\nfunction convertComparisonOp(property, value, op, expectedTypes) {\n    let get;\n    if (property === '$type') {\n        return convertInOp('$type', [value], op === '!=');\n    }\n    else if (property === '$id') {\n        get = ['id'];\n    }\n    else {\n        get = ['get', property];\n    }\n    if (expectedTypes && value !== null) {\n        const type = typeof value;\n        expectedTypes[property] = type;\n    }\n    if (op === '==' && property !== '$id' && value === null) {\n        return [\n            'all',\n            ['has', property], // missing property != null for legacy filters\n            ['==', get, null]\n        ];\n    }\n    else if (op === '!=' && property !== '$id' && value === null) {\n        return [\n            'any',\n            ['!', ['has', property]], // missing property != null for legacy filters\n            ['!=', get, null]\n        ];\n    }\n    return [op, get, value];\n}\nfunction convertInOp(property, values, negate = false) {\n    if (values.length === 0)\n        return negate;\n    let get;\n    if (property === '$type') {\n        const len = values.length;\n        for (let i = 0; i < len; i++) {\n            values.push(`Multi${values[i]}`);\n        }\n        get = ['geometry-type'];\n    }\n    else if (property === '$id') {\n        get = ['id'];\n    }\n    else {\n        get = ['get', property];\n    }\n    // Determine if the list of values to be searched is homogenously typed.\n    // If so (and if the type is string or number), then we can use a\n    // [match, input, [...values], true, false] construction rather than a\n    // bunch of `==` tests.\n    let uniformTypes = true;\n    const type = typeof values[0];\n    for (const value of values) {\n        if (typeof value !== type) {\n            uniformTypes = false;\n            break;\n        }\n    }\n    if (uniformTypes && (type === 'string' || type === 'number')) {\n        // Match expressions must have unique values.\n        const uniqueValues = values.sort().filter((v, i) => i === 0 || values[i - 1] !== v);\n        return ['match', get, uniqueValues, !negate, negate];\n    }\n    if (negate) {\n        return ['all', ...values.map(v => ['!=', get, v])];\n    }\n    else {\n        return ['any', ...values.map(v => ['==', get, v])];\n    }\n}\nfunction convertHasOp(property) {\n    if (property === '$type') {\n        return true;\n    }\n    else if (property === '$id') {\n        return ['!=', ['id'], null];\n    }\n    else {\n        return ['has', property];\n    }\n}\n\nfunction convertLiteral(value) {\n    return typeof value === 'object' ? ['literal', value] : value;\n}\nfunction convertFunction(parameters, propertySpec) {\n    let stops = parameters.stops;\n    if (!stops) {\n        // identity function\n        return convertIdentityFunction(parameters, propertySpec);\n    }\n    const zoomAndFeatureDependent = stops && typeof stops[0][0] === 'object';\n    const featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;\n    const zoomDependent = zoomAndFeatureDependent || !featureDependent;\n    stops = stops.map((stop) => {\n        if (!featureDependent && propertySpec.tokens && typeof stop[1] === 'string') {\n            return [stop[0], convertTokenString(stop[1])];\n        }\n        return [stop[0], convertLiteral(stop[1])];\n    });\n    if (zoomAndFeatureDependent) {\n        return convertZoomAndPropertyFunction(parameters, propertySpec, stops);\n    }\n    else if (zoomDependent) {\n        return convertZoomFunction(parameters, propertySpec, stops);\n    }\n    else {\n        return convertPropertyFunction(parameters, propertySpec, stops);\n    }\n}\nfunction convertIdentityFunction(parameters, propertySpec) {\n    const get = ['get', parameters.property];\n    if (parameters.default === undefined) {\n        // By default, expressions for string-valued properties get coerced. To preserve\n        // legacy function semantics, insert an explicit assertion instead.\n        return propertySpec.type === 'string' ? ['string', get] : get;\n    }\n    else if (propertySpec.type === 'enum') {\n        return [\n            'match',\n            get,\n            Object.keys(propertySpec.values),\n            get,\n            parameters.default\n        ];\n    }\n    else {\n        const expression = [propertySpec.type === 'color' ? 'to-color' : propertySpec.type, get, convertLiteral(parameters.default)];\n        if (propertySpec.type === 'array') {\n            expression.splice(1, 0, propertySpec.value, propertySpec.length || null);\n        }\n        return expression;\n    }\n}\nfunction getInterpolateOperator(parameters) {\n    switch (parameters.colorSpace) {\n        case 'hcl': return 'interpolate-hcl';\n        case 'lab': return 'interpolate-lab';\n        default: return 'interpolate';\n    }\n}\nfunction convertZoomAndPropertyFunction(parameters, propertySpec, stops) {\n    const featureFunctionParameters = {};\n    const featureFunctionStops = {};\n    const zoomStops = [];\n    for (let s = 0; s < stops.length; s++) {\n        const stop = stops[s];\n        const zoom = stop[0].zoom;\n        if (featureFunctionParameters[zoom] === undefined) {\n            featureFunctionParameters[zoom] = {\n                zoom,\n                type: parameters.type,\n                property: parameters.property,\n                default: parameters.default,\n            };\n            featureFunctionStops[zoom] = [];\n            zoomStops.push(zoom);\n        }\n        featureFunctionStops[zoom].push([stop[0].value, stop[1]]);\n    }\n    // the interpolation type for the zoom dimension of a zoom-and-property\n    // function is determined directly from the style property specification\n    // for which it's being used: linear for interpolatable properties, step\n    // otherwise.\n    const functionType = getFunctionType({}, propertySpec);\n    if (functionType === 'exponential') {\n        const expression = [getInterpolateOperator(parameters), ['linear'], ['zoom']];\n        for (const z of zoomStops) {\n            const output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);\n            appendStopPair(expression, z, output, false);\n        }\n        return expression;\n    }\n    else {\n        const expression = ['step', ['zoom']];\n        for (const z of zoomStops) {\n            const output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);\n            appendStopPair(expression, z, output, true);\n        }\n        fixupDegenerateStepCurve(expression);\n        return expression;\n    }\n}\nfunction coalesce(a, b) {\n    if (a !== undefined)\n        return a;\n    if (b !== undefined)\n        return b;\n}\nfunction getFallback(parameters, propertySpec) {\n    const defaultValue = convertLiteral(coalesce(parameters.default, propertySpec.default));\n    /*\n     * Some fields with type: resolvedImage have an undefined default.\n     * Because undefined is an invalid value for resolvedImage, set fallback to\n     * an empty string instead of undefined to ensure output\n     * passes validation.\n     */\n    if (defaultValue === undefined && propertySpec.type === 'resolvedImage') {\n        return '';\n    }\n    return defaultValue;\n}\nfunction convertPropertyFunction(parameters, propertySpec, stops) {\n    const type = getFunctionType(parameters, propertySpec);\n    const get = ['get', parameters.property];\n    if (type === 'categorical' && typeof stops[0][0] === 'boolean') {\n        const expression = ['case'];\n        for (const stop of stops) {\n            expression.push(['==', get, stop[0]], stop[1]);\n        }\n        expression.push(getFallback(parameters, propertySpec));\n        return expression;\n    }\n    else if (type === 'categorical') {\n        const expression = ['match', get];\n        for (const stop of stops) {\n            appendStopPair(expression, stop[0], stop[1], false);\n        }\n        expression.push(getFallback(parameters, propertySpec));\n        return expression;\n    }\n    else if (type === 'interval') {\n        const expression = ['step', ['number', get]];\n        for (const stop of stops) {\n            appendStopPair(expression, stop[0], stop[1], true);\n        }\n        fixupDegenerateStepCurve(expression);\n        return parameters.default === undefined ? expression : [\n            'case',\n            ['==', ['typeof', get], 'number'],\n            expression,\n            convertLiteral(parameters.default)\n        ];\n    }\n    else if (type === 'exponential') {\n        const base = parameters.base !== undefined ? parameters.base : 1;\n        const expression = [\n            getInterpolateOperator(parameters),\n            base === 1 ? ['linear'] : ['exponential', base],\n            ['number', get]\n        ];\n        for (const stop of stops) {\n            appendStopPair(expression, stop[0], stop[1], false);\n        }\n        return parameters.default === undefined ? expression : [\n            'case',\n            ['==', ['typeof', get], 'number'],\n            expression,\n            convertLiteral(parameters.default)\n        ];\n    }\n    else {\n        throw new Error(`Unknown property function type ${type}`);\n    }\n}\nfunction convertZoomFunction(parameters, propertySpec, stops, input = ['zoom']) {\n    const type = getFunctionType(parameters, propertySpec);\n    let expression;\n    let isStep = false;\n    if (type === 'interval') {\n        expression = ['step', input];\n        isStep = true;\n    }\n    else if (type === 'exponential') {\n        const base = parameters.base !== undefined ? parameters.base : 1;\n        expression = [getInterpolateOperator(parameters), base === 1 ? ['linear'] : ['exponential', base], input];\n    }\n    else {\n        throw new Error(`Unknown zoom function type \"${type}\"`);\n    }\n    for (const stop of stops) {\n        appendStopPair(expression, stop[0], stop[1], isStep);\n    }\n    fixupDegenerateStepCurve(expression);\n    return expression;\n}\nfunction fixupDegenerateStepCurve(expression) {\n    // degenerate step curve (i.e. a constant function): add a noop stop\n    if (expression[0] === 'step' && expression.length === 3) {\n        expression.push(0);\n        expression.push(expression[3]);\n    }\n}\nfunction appendStopPair(curve, input, output, isStep) {\n    // Skip duplicate stop values. They were not validated for functions, but they are for expressions.\n    // https://github.com/mapbox/mapbox-gl-js/issues/4107\n    if (curve.length > 3 && input === curve[curve.length - 2]) {\n        return;\n    }\n    // step curves don't get the first input value, as it is redundant.\n    if (!(isStep && curve.length === 2)) {\n        curve.push(input);\n    }\n    curve.push(output);\n}\nfunction getFunctionType(parameters, propertySpec) {\n    if (parameters.type) {\n        return parameters.type;\n    }\n    else {\n        return propertySpec.expression.interpolated ? 'exponential' : 'interval';\n    }\n}\n// \"String with {name} token\" => [\"concat\", \"String with \", [\"get\", \"name\"], \" token\"]\nfunction convertTokenString(s) {\n    const result = ['concat'];\n    const re = /{([^{}]+)}/g;\n    let pos = 0;\n    for (let match = re.exec(s); match !== null; match = re.exec(s)) {\n        const literal = s.slice(pos, re.lastIndex - match[0].length);\n        pos = re.lastIndex;\n        if (literal.length > 0)\n            result.push(literal);\n        result.push(['get', match[1]]);\n    }\n    if (result.length === 1) {\n        return s;\n    }\n    if (pos < s.length) {\n        result.push(s.slice(pos));\n    }\n    else if (result.length === 2) {\n        return ['to-string', result[1]];\n    }\n    return result;\n}\n\nfunction getPropertyReference(propertyName) {\n    for (let i = 0; i < v8Spec.layout.length; i++) {\n        for (const key in v8Spec[v8Spec.layout[i]]) {\n            if (key === propertyName)\n                return v8Spec[v8Spec.layout[i]][key];\n        }\n    }\n    for (let i = 0; i < v8Spec.paint.length; i++) {\n        for (const key in v8Spec[v8Spec.paint[i]]) {\n            if (key === propertyName)\n                return v8Spec[v8Spec.paint[i]][key];\n        }\n    }\n    return null;\n}\nfunction eachSource(style, callback) {\n    for (const k in style.sources) {\n        callback(style.sources[k]);\n    }\n}\nfunction eachLayer(style, callback) {\n    for (const layer of style.layers) {\n        callback(layer);\n    }\n}\nfunction eachProperty(style, options, callback) {\n    function inner(layer, propertyType) {\n        const properties = layer[propertyType];\n        if (!properties)\n            return;\n        Object.keys(properties).forEach((key) => {\n            callback({\n                path: [layer.id, propertyType, key],\n                key,\n                value: properties[key],\n                reference: getPropertyReference(key),\n                set(x) {\n                    properties[key] = x;\n                }\n            });\n        });\n    }\n    eachLayer(style, (layer) => {\n        if (options.paint) {\n            inner(layer, 'paint');\n        }\n        if (options.layout) {\n            inner(layer, 'layout');\n        }\n    });\n}\n\nfunction stringify$1(obj) {\n    const type = typeof obj;\n    if (type === 'number' || type === 'boolean' || type === 'string' || obj === undefined || obj === null)\n        return JSON.stringify(obj);\n    if (Array.isArray(obj)) {\n        let str = '[';\n        for (const val of obj) {\n            str += `${stringify$1(val)},`;\n        }\n        return `${str}]`;\n    }\n    const keys = Object.keys(obj).sort();\n    let str = '{';\n    for (let i = 0; i < keys.length; i++) {\n        str += `${JSON.stringify(keys[i])}:${stringify$1(obj[keys[i]])},`;\n    }\n    return `${str}}`;\n}\nfunction getKey(layer) {\n    let key = '';\n    for (const k of refProperties) {\n        key += `/${stringify$1(layer[k])}`;\n    }\n    return key;\n}\n/**\n * Given an array of layers, return an array of arrays of layers where all\n * layers in each group have identical layout-affecting properties. These\n * are the properties that were formerly used by explicit `ref` mechanism\n * for layers: 'type', 'source', 'source-layer', 'minzoom', 'maxzoom',\n * 'filter', and 'layout'.\n *\n * The input is not modified. The output layers are references to the\n * input layers.\n *\n * @private\n * @param {Array<Layer>} layers\n * @param {Object} [cachedKeys] - an object to keep already calculated keys.\n * @returns {Array<Array<Layer>>}\n */\nfunction groupByLayout(layers, cachedKeys) {\n    const groups = {};\n    for (let i = 0; i < layers.length; i++) {\n        const k = (cachedKeys && cachedKeys[layers[i].id]) || getKey(layers[i]);\n        // update the cache if there is one\n        if (cachedKeys)\n            cachedKeys[layers[i].id] = k;\n        let group = groups[k];\n        if (!group) {\n            group = groups[k] = [];\n        }\n        group.push(layers[i]);\n    }\n    const result = [];\n    for (const k in groups) {\n        result.push(groups[k]);\n    }\n    return result;\n}\n\nfunction emptyStyle() {\n    const style = {};\n    const version = v8Spec['$version'];\n    for (const styleKey in v8Spec['$root']) {\n        const specification = v8Spec['$root'][styleKey];\n        if (specification.required) {\n            let value = null;\n            if (styleKey === 'version') {\n                value = version;\n            }\n            else {\n                if (specification.type === 'array') {\n                    value = [];\n                }\n                else {\n                    value = {};\n                }\n            }\n            if (value != null) {\n                style[styleKey] = value;\n            }\n        }\n    }\n    return style;\n}\n\nfunction validateConstants(options) {\n    const key = options.key;\n    const constants = options.value;\n    if (constants) {\n        return [new ValidationError(key, constants, 'constants have been deprecated as of v8')];\n    }\n    else {\n        return [];\n    }\n}\n\n// Turn jsonlint-lines-primitives objects into primitive objects\nfunction unbundle(value) {\n    if (value instanceof Number || value instanceof String || value instanceof Boolean) {\n        return value.valueOf();\n    }\n    else {\n        return value;\n    }\n}\nfunction deepUnbundle(value) {\n    if (Array.isArray(value)) {\n        return value.map(deepUnbundle);\n    }\n    else if (value instanceof Object && !(value instanceof Number || value instanceof String || value instanceof Boolean)) {\n        const unbundledValue = {};\n        for (const key in value) {\n            unbundledValue[key] = deepUnbundle(value[key]);\n        }\n        return unbundledValue;\n    }\n    return unbundle(value);\n}\n\nfunction validateObject(options) {\n    const key = options.key;\n    const object = options.value;\n    const elementSpecs = options.valueSpec || {};\n    const elementValidators = options.objectElementValidators || {};\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    const validateSpec = options.validateSpec;\n    let errors = [];\n    const type = getType(object);\n    if (type !== 'object') {\n        return [new ValidationError(key, object, `object expected, ${type} found`)];\n    }\n    for (const objectKey in object) {\n        const elementSpecKey = objectKey.split('.')[0]; // treat 'paint.*' as 'paint'\n        const elementSpec = elementSpecs[elementSpecKey] || elementSpecs['*'];\n        let validateElement;\n        if (elementValidators[elementSpecKey]) {\n            validateElement = elementValidators[elementSpecKey];\n        }\n        else if (elementSpecs[elementSpecKey]) {\n            validateElement = validateSpec;\n        }\n        else if (elementValidators['*']) {\n            validateElement = elementValidators['*'];\n        }\n        else if (elementSpecs['*']) {\n            validateElement = validateSpec;\n        }\n        else {\n            errors.push(new ValidationError(key, object[objectKey], `unknown property \"${objectKey}\"`));\n            continue;\n        }\n        errors = errors.concat(validateElement({\n            key: (key ? `${key}.` : key) + objectKey,\n            value: object[objectKey],\n            valueSpec: elementSpec,\n            style,\n            styleSpec,\n            object,\n            objectKey,\n            validateSpec,\n        }, object));\n    }\n    for (const elementSpecKey in elementSpecs) {\n        // Don't check `required` when there's a custom validator for that property.\n        if (elementValidators[elementSpecKey]) {\n            continue;\n        }\n        if (elementSpecs[elementSpecKey].required && elementSpecs[elementSpecKey]['default'] === undefined && object[elementSpecKey] === undefined) {\n            errors.push(new ValidationError(key, object, `missing required property \"${elementSpecKey}\"`));\n        }\n    }\n    return errors;\n}\n\nfunction validateArray(options) {\n    const array = options.value;\n    const arraySpec = options.valueSpec;\n    const validateSpec = options.validateSpec;\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    const key = options.key;\n    const validateArrayElement = options.arrayElementValidator || validateSpec;\n    if (getType(array) !== 'array') {\n        return [new ValidationError(key, array, `array expected, ${getType(array)} found`)];\n    }\n    if (arraySpec.length && array.length !== arraySpec.length) {\n        return [new ValidationError(key, array, `array length ${arraySpec.length} expected, length ${array.length} found`)];\n    }\n    if (arraySpec['min-length'] && array.length < arraySpec['min-length']) {\n        return [new ValidationError(key, array, `array length at least ${arraySpec['min-length']} expected, length ${array.length} found`)];\n    }\n    let arrayElementSpec = {\n        'type': arraySpec.value,\n        'values': arraySpec.values\n    };\n    if (styleSpec.$version < 7) {\n        arrayElementSpec['function'] = arraySpec.function;\n    }\n    if (getType(arraySpec.value) === 'object') {\n        arrayElementSpec = arraySpec.value;\n    }\n    let errors = [];\n    for (let i = 0; i < array.length; i++) {\n        errors = errors.concat(validateArrayElement({\n            array,\n            arrayIndex: i,\n            value: array[i],\n            valueSpec: arrayElementSpec,\n            validateSpec: options.validateSpec,\n            style,\n            styleSpec,\n            key: `${key}[${i}]`\n        }));\n    }\n    return errors;\n}\n\nfunction validateNumber(options) {\n    const key = options.key;\n    const value = options.value;\n    const valueSpec = options.valueSpec;\n    let type = getType(value);\n    if (type === 'number' && value !== value) {\n        type = 'NaN';\n    }\n    if (type !== 'number') {\n        return [new ValidationError(key, value, `number expected, ${type} found`)];\n    }\n    if ('minimum' in valueSpec && value < valueSpec.minimum) {\n        return [new ValidationError(key, value, `${value} is less than the minimum value ${valueSpec.minimum}`)];\n    }\n    if ('maximum' in valueSpec && value > valueSpec.maximum) {\n        return [new ValidationError(key, value, `${value} is greater than the maximum value ${valueSpec.maximum}`)];\n    }\n    return [];\n}\n\nfunction validateFunction(options) {\n    const functionValueSpec = options.valueSpec;\n    const functionType = unbundle(options.value.type);\n    let stopKeyType;\n    let stopDomainValues = {};\n    let previousStopDomainValue;\n    let previousStopDomainZoom;\n    const isZoomFunction = functionType !== 'categorical' && options.value.property === undefined;\n    const isPropertyFunction = !isZoomFunction;\n    const isZoomAndPropertyFunction = getType(options.value.stops) === 'array' &&\n        getType(options.value.stops[0]) === 'array' &&\n        getType(options.value.stops[0][0]) === 'object';\n    const errors = validateObject({\n        key: options.key,\n        value: options.value,\n        valueSpec: options.styleSpec.function,\n        validateSpec: options.validateSpec,\n        style: options.style,\n        styleSpec: options.styleSpec,\n        objectElementValidators: {\n            stops: validateFunctionStops,\n            default: validateFunctionDefault\n        }\n    });\n    if (functionType === 'identity' && isZoomFunction) {\n        errors.push(new ValidationError(options.key, options.value, 'missing required property \"property\"'));\n    }\n    if (functionType !== 'identity' && !options.value.stops) {\n        errors.push(new ValidationError(options.key, options.value, 'missing required property \"stops\"'));\n    }\n    if (functionType === 'exponential' && options.valueSpec.expression && !supportsInterpolation(options.valueSpec)) {\n        errors.push(new ValidationError(options.key, options.value, 'exponential functions not supported'));\n    }\n    if (options.styleSpec.$version >= 8) {\n        if (isPropertyFunction && !supportsPropertyExpression(options.valueSpec)) {\n            errors.push(new ValidationError(options.key, options.value, 'property functions not supported'));\n        }\n        else if (isZoomFunction && !supportsZoomExpression(options.valueSpec)) {\n            errors.push(new ValidationError(options.key, options.value, 'zoom functions not supported'));\n        }\n    }\n    if ((functionType === 'categorical' || isZoomAndPropertyFunction) && options.value.property === undefined) {\n        errors.push(new ValidationError(options.key, options.value, '\"property\" property is required'));\n    }\n    return errors;\n    function validateFunctionStops(options) {\n        if (functionType === 'identity') {\n            return [new ValidationError(options.key, options.value, 'identity function may not have a \"stops\" property')];\n        }\n        let errors = [];\n        const value = options.value;\n        errors = errors.concat(validateArray({\n            key: options.key,\n            value,\n            valueSpec: options.valueSpec,\n            validateSpec: options.validateSpec,\n            style: options.style,\n            styleSpec: options.styleSpec,\n            arrayElementValidator: validateFunctionStop\n        }));\n        if (getType(value) === 'array' && value.length === 0) {\n            errors.push(new ValidationError(options.key, value, 'array must have at least one stop'));\n        }\n        return errors;\n    }\n    function validateFunctionStop(options) {\n        let errors = [];\n        const value = options.value;\n        const key = options.key;\n        if (getType(value) !== 'array') {\n            return [new ValidationError(key, value, `array expected, ${getType(value)} found`)];\n        }\n        if (value.length !== 2) {\n            return [new ValidationError(key, value, `array length 2 expected, length ${value.length} found`)];\n        }\n        if (isZoomAndPropertyFunction) {\n            if (getType(value[0]) !== 'object') {\n                return [new ValidationError(key, value, `object expected, ${getType(value[0])} found`)];\n            }\n            if (value[0].zoom === undefined) {\n                return [new ValidationError(key, value, 'object stop key must have zoom')];\n            }\n            if (value[0].value === undefined) {\n                return [new ValidationError(key, value, 'object stop key must have value')];\n            }\n            if (previousStopDomainZoom && previousStopDomainZoom > unbundle(value[0].zoom)) {\n                return [new ValidationError(key, value[0].zoom, 'stop zoom values must appear in ascending order')];\n            }\n            if (unbundle(value[0].zoom) !== previousStopDomainZoom) {\n                previousStopDomainZoom = unbundle(value[0].zoom);\n                previousStopDomainValue = undefined;\n                stopDomainValues = {};\n            }\n            errors = errors.concat(validateObject({\n                key: `${key}[0]`,\n                value: value[0],\n                valueSpec: { zoom: {} },\n                validateSpec: options.validateSpec,\n                style: options.style,\n                styleSpec: options.styleSpec,\n                objectElementValidators: { zoom: validateNumber, value: validateStopDomainValue }\n            }));\n        }\n        else {\n            errors = errors.concat(validateStopDomainValue({\n                key: `${key}[0]`,\n                value: value[0],\n                valueSpec: {},\n                validateSpec: options.validateSpec,\n                style: options.style,\n                styleSpec: options.styleSpec\n            }, value));\n        }\n        if (isExpression(deepUnbundle(value[1]))) {\n            return errors.concat([new ValidationError(`${key}[1]`, value[1], 'expressions are not allowed in function stops.')]);\n        }\n        return errors.concat(options.validateSpec({\n            key: `${key}[1]`,\n            value: value[1],\n            valueSpec: functionValueSpec,\n            validateSpec: options.validateSpec,\n            style: options.style,\n            styleSpec: options.styleSpec\n        }));\n    }\n    function validateStopDomainValue(options, stop) {\n        const type = getType(options.value);\n        const value = unbundle(options.value);\n        const reportValue = options.value !== null ? options.value : stop;\n        if (!stopKeyType) {\n            stopKeyType = type;\n        }\n        else if (type !== stopKeyType) {\n            return [new ValidationError(options.key, reportValue, `${type} stop domain type must match previous stop domain type ${stopKeyType}`)];\n        }\n        if (type !== 'number' && type !== 'string' && type !== 'boolean') {\n            return [new ValidationError(options.key, reportValue, 'stop domain value must be a number, string, or boolean')];\n        }\n        if (type !== 'number' && functionType !== 'categorical') {\n            let message = `number expected, ${type} found`;\n            if (supportsPropertyExpression(functionValueSpec) && functionType === undefined) {\n                message += '\\nIf you intended to use a categorical function, specify `\"type\": \"categorical\"`.';\n            }\n            return [new ValidationError(options.key, reportValue, message)];\n        }\n        if (functionType === 'categorical' && type === 'number' && (!isFinite(value) || Math.floor(value) !== value)) {\n            return [new ValidationError(options.key, reportValue, `integer expected, found ${value}`)];\n        }\n        if (functionType !== 'categorical' && type === 'number' && previousStopDomainValue !== undefined && value < previousStopDomainValue) {\n            return [new ValidationError(options.key, reportValue, 'stop domain values must appear in ascending order')];\n        }\n        else {\n            previousStopDomainValue = value;\n        }\n        if (functionType === 'categorical' && value in stopDomainValues) {\n            return [new ValidationError(options.key, reportValue, 'stop domain values must be unique')];\n        }\n        else {\n            stopDomainValues[value] = true;\n        }\n        return [];\n    }\n    function validateFunctionDefault(options) {\n        return options.validateSpec({\n            key: options.key,\n            value: options.value,\n            valueSpec: functionValueSpec,\n            validateSpec: options.validateSpec,\n            style: options.style,\n            styleSpec: options.styleSpec\n        });\n    }\n}\n\nfunction validateExpression(options) {\n    const expression = (options.expressionContext === 'property' ? createPropertyExpression : createExpression)(deepUnbundle(options.value), options.valueSpec);\n    if (expression.result === 'error') {\n        return expression.value.map((error) => {\n            return new ValidationError(`${options.key}${error.key}`, options.value, error.message);\n        });\n    }\n    const expressionObj = expression.value.expression || expression.value._styleExpression.expression;\n    if (options.expressionContext === 'property' && (options.propertyKey === 'text-font') &&\n        !expressionObj.outputDefined()) {\n        return [new ValidationError(options.key, options.value, `Invalid data expression for \"${options.propertyKey}\". Output values must be contained as literals within the expression.`)];\n    }\n    if (options.expressionContext === 'property' && options.propertyType === 'layout' &&\n        (!isStateConstant(expressionObj))) {\n        return [new ValidationError(options.key, options.value, '\"feature-state\" data expressions are not supported with layout properties.')];\n    }\n    if (options.expressionContext === 'filter' && !isStateConstant(expressionObj)) {\n        return [new ValidationError(options.key, options.value, '\"feature-state\" data expressions are not supported with filters.')];\n    }\n    if (options.expressionContext && options.expressionContext.indexOf('cluster') === 0) {\n        if (!isGlobalPropertyConstant(expressionObj, ['zoom', 'feature-state'])) {\n            return [new ValidationError(options.key, options.value, '\"zoom\" and \"feature-state\" expressions are not supported with cluster properties.')];\n        }\n        if (options.expressionContext === 'cluster-initial' && !isFeatureConstant(expressionObj)) {\n            return [new ValidationError(options.key, options.value, 'Feature data expressions are not supported with initial expression part of cluster properties.')];\n        }\n    }\n    return [];\n}\n\nfunction validateBoolean(options) {\n    const value = options.value;\n    const key = options.key;\n    const type = getType(value);\n    if (type !== 'boolean') {\n        return [new ValidationError(key, value, `boolean expected, ${type} found`)];\n    }\n    return [];\n}\n\nfunction validateColor(options) {\n    const key = options.key;\n    const value = options.value;\n    const type = getType(value);\n    if (type !== 'string') {\n        return [new ValidationError(key, value, `color expected, ${type} found`)];\n    }\n    if (!Color.parse(String(value))) { // cast String object to string primitive\n        return [new ValidationError(key, value, `color expected, \"${value}\" found`)];\n    }\n    return [];\n}\n\nfunction validateEnum(options) {\n    const key = options.key;\n    const value = options.value;\n    const valueSpec = options.valueSpec;\n    const errors = [];\n    if (Array.isArray(valueSpec.values)) { // <=v7\n        if (valueSpec.values.indexOf(unbundle(value)) === -1) {\n            errors.push(new ValidationError(key, value, `expected one of [${valueSpec.values.join(', ')}], ${JSON.stringify(value)} found`));\n        }\n    }\n    else { // >=v8\n        if (Object.keys(valueSpec.values).indexOf(unbundle(value)) === -1) {\n            errors.push(new ValidationError(key, value, `expected one of [${Object.keys(valueSpec.values).join(', ')}], ${JSON.stringify(value)} found`));\n        }\n    }\n    return errors;\n}\n\nfunction validateFilter(options) {\n    if (isExpressionFilter(deepUnbundle(options.value))) {\n        return validateExpression(extendBy({}, options, {\n            expressionContext: 'filter',\n            valueSpec: { value: 'boolean' }\n        }));\n    }\n    else {\n        return validateNonExpressionFilter(options);\n    }\n}\nfunction validateNonExpressionFilter(options) {\n    const value = options.value;\n    const key = options.key;\n    if (getType(value) !== 'array') {\n        return [new ValidationError(key, value, `array expected, ${getType(value)} found`)];\n    }\n    const styleSpec = options.styleSpec;\n    let type;\n    let errors = [];\n    if (value.length < 1) {\n        return [new ValidationError(key, value, 'filter array must have at least 1 element')];\n    }\n    errors = errors.concat(validateEnum({\n        key: `${key}[0]`,\n        value: value[0],\n        valueSpec: styleSpec.filter_operator,\n        style: options.style,\n        styleSpec: options.styleSpec\n    }));\n    switch (unbundle(value[0])) {\n        case '<':\n        case '<=':\n        case '>':\n        case '>=':\n            if (value.length >= 2 && unbundle(value[1]) === '$type') {\n                errors.push(new ValidationError(key, value, `\"$type\" cannot be use with operator \"${value[0]}\"`));\n            }\n        /* falls through */\n        case '==':\n        case '!=':\n            if (value.length !== 3) {\n                errors.push(new ValidationError(key, value, `filter array for operator \"${value[0]}\" must have 3 elements`));\n            }\n        /* falls through */\n        case 'in':\n        case '!in':\n            if (value.length >= 2) {\n                type = getType(value[1]);\n                if (type !== 'string') {\n                    errors.push(new ValidationError(`${key}[1]`, value[1], `string expected, ${type} found`));\n                }\n            }\n            for (let i = 2; i < value.length; i++) {\n                type = getType(value[i]);\n                if (unbundle(value[1]) === '$type') {\n                    errors = errors.concat(validateEnum({\n                        key: `${key}[${i}]`,\n                        value: value[i],\n                        valueSpec: styleSpec.geometry_type,\n                        style: options.style,\n                        styleSpec: options.styleSpec\n                    }));\n                }\n                else if (type !== 'string' && type !== 'number' && type !== 'boolean') {\n                    errors.push(new ValidationError(`${key}[${i}]`, value[i], `string, number, or boolean expected, ${type} found`));\n                }\n            }\n            break;\n        case 'any':\n        case 'all':\n        case 'none':\n            for (let i = 1; i < value.length; i++) {\n                errors = errors.concat(validateNonExpressionFilter({\n                    key: `${key}[${i}]`,\n                    value: value[i],\n                    style: options.style,\n                    styleSpec: options.styleSpec\n                }));\n            }\n            break;\n        case 'has':\n        case '!has':\n            type = getType(value[1]);\n            if (value.length !== 2) {\n                errors.push(new ValidationError(key, value, `filter array for \"${value[0]}\" operator must have 2 elements`));\n            }\n            else if (type !== 'string') {\n                errors.push(new ValidationError(`${key}[1]`, value[1], `string expected, ${type} found`));\n            }\n            break;\n    }\n    return errors;\n}\n\nfunction validateProperty(options, propertyType) {\n    const key = options.key;\n    const validateSpec = options.validateSpec;\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    const value = options.value;\n    const propertyKey = options.objectKey;\n    const layerSpec = styleSpec[`${propertyType}_${options.layerType}`];\n    if (!layerSpec)\n        return [];\n    const transitionMatch = propertyKey.match(/^(.*)-transition$/);\n    if (propertyType === 'paint' && transitionMatch && layerSpec[transitionMatch[1]] && layerSpec[transitionMatch[1]].transition) {\n        return validateSpec({\n            key,\n            value,\n            valueSpec: styleSpec.transition,\n            style,\n            styleSpec\n        });\n    }\n    const valueSpec = options.valueSpec || layerSpec[propertyKey];\n    if (!valueSpec) {\n        return [new ValidationError(key, value, `unknown property \"${propertyKey}\"`)];\n    }\n    let tokenMatch;\n    if (getType(value) === 'string' && supportsPropertyExpression(valueSpec) && !valueSpec.tokens && (tokenMatch = /^{([^}]+)}$/.exec(value))) {\n        return [new ValidationError(key, value, `\"${propertyKey}\" does not support interpolation syntax\\n` +\n                `Use an identity property function instead: \\`{ \"type\": \"identity\", \"property\": ${JSON.stringify(tokenMatch[1])} }\\`.`)];\n    }\n    const errors = [];\n    if (options.layerType === 'symbol') {\n        if (propertyKey === 'text-field' && style && !style.glyphs) {\n            errors.push(new ValidationError(key, value, 'use of \"text-field\" requires a style \"glyphs\" property'));\n        }\n        if (propertyKey === 'text-font' && isFunction$1(deepUnbundle(value)) && unbundle(value.type) === 'identity') {\n            errors.push(new ValidationError(key, value, '\"text-font\" does not support identity functions'));\n        }\n    }\n    return errors.concat(validateSpec({\n        key: options.key,\n        value,\n        valueSpec,\n        style,\n        styleSpec,\n        expressionContext: 'property',\n        propertyType,\n        propertyKey\n    }));\n}\n\nfunction validatePaintProperty(options) {\n    return validateProperty(options, 'paint');\n}\n\nfunction validateLayoutProperty(options) {\n    return validateProperty(options, 'layout');\n}\n\nfunction validateLayer(options) {\n    let errors = [];\n    const layer = options.value;\n    const key = options.key;\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    if (!layer.type && !layer.ref) {\n        errors.push(new ValidationError(key, layer, 'either \"type\" or \"ref\" is required'));\n    }\n    let type = unbundle(layer.type);\n    const ref = unbundle(layer.ref);\n    if (layer.id) {\n        const layerId = unbundle(layer.id);\n        for (let i = 0; i < options.arrayIndex; i++) {\n            const otherLayer = style.layers[i];\n            if (unbundle(otherLayer.id) === layerId) {\n                errors.push(new ValidationError(key, layer.id, `duplicate layer id \"${layer.id}\", previously used at line ${otherLayer.id.__line__}`));\n            }\n        }\n    }\n    if ('ref' in layer) {\n        ['type', 'source', 'source-layer', 'filter', 'layout'].forEach((p) => {\n            if (p in layer) {\n                errors.push(new ValidationError(key, layer[p], `\"${p}\" is prohibited for ref layers`));\n            }\n        });\n        let parent;\n        style.layers.forEach((layer) => {\n            if (unbundle(layer.id) === ref)\n                parent = layer;\n        });\n        if (!parent) {\n            errors.push(new ValidationError(key, layer.ref, `ref layer \"${ref}\" not found`));\n        }\n        else if (parent.ref) {\n            errors.push(new ValidationError(key, layer.ref, 'ref cannot reference another ref layer'));\n        }\n        else {\n            type = unbundle(parent.type);\n        }\n    }\n    else if (type !== 'background') {\n        if (!layer.source) {\n            errors.push(new ValidationError(key, layer, 'missing required property \"source\"'));\n        }\n        else {\n            const source = style.sources && style.sources[layer.source];\n            const sourceType = source && unbundle(source.type);\n            if (!source) {\n                errors.push(new ValidationError(key, layer.source, `source \"${layer.source}\" not found`));\n            }\n            else if (sourceType === 'vector' && type === 'raster') {\n                errors.push(new ValidationError(key, layer.source, `layer \"${layer.id}\" requires a raster source`));\n            }\n            else if (sourceType !== 'raster-dem' && type === 'hillshade') {\n                errors.push(new ValidationError(key, layer.source, `layer \"${layer.id}\" requires a raster-dem source`));\n            }\n            else if (sourceType === 'raster' && type !== 'raster') {\n                errors.push(new ValidationError(key, layer.source, `layer \"${layer.id}\" requires a vector source`));\n            }\n            else if (sourceType === 'vector' && !layer['source-layer']) {\n                errors.push(new ValidationError(key, layer, `layer \"${layer.id}\" must specify a \"source-layer\"`));\n            }\n            else if (sourceType === 'raster-dem' && type !== 'hillshade') {\n                errors.push(new ValidationError(key, layer.source, 'raster-dem source can only be used with layer type \\'hillshade\\'.'));\n            }\n            else if (type === 'line' && layer.paint && layer.paint['line-gradient'] &&\n                (sourceType !== 'geojson' || !source.lineMetrics)) {\n                errors.push(new ValidationError(key, layer, `layer \"${layer.id}\" specifies a line-gradient, which requires a GeoJSON source with \\`lineMetrics\\` enabled.`));\n            }\n        }\n    }\n    errors = errors.concat(validateObject({\n        key,\n        value: layer,\n        valueSpec: styleSpec.layer,\n        style: options.style,\n        styleSpec: options.styleSpec,\n        validateSpec: options.validateSpec,\n        objectElementValidators: {\n            '*'() {\n                return [];\n            },\n            // We don't want to enforce the spec's `\"requires\": true` for backward compatibility with refs;\n            // the actual requirement is validated above. See https://github.com/mapbox/mapbox-gl-js/issues/5772.\n            type() {\n                return options.validateSpec({\n                    key: `${key}.type`,\n                    value: layer.type,\n                    valueSpec: styleSpec.layer.type,\n                    style: options.style,\n                    styleSpec: options.styleSpec,\n                    validateSpec: options.validateSpec,\n                    object: layer,\n                    objectKey: 'type'\n                });\n            },\n            filter: validateFilter,\n            layout(options) {\n                return validateObject({\n                    layer,\n                    key: options.key,\n                    value: options.value,\n                    style: options.style,\n                    styleSpec: options.styleSpec,\n                    validateSpec: options.validateSpec,\n                    objectElementValidators: {\n                        '*'(options) {\n                            return validateLayoutProperty(extendBy({ layerType: type }, options));\n                        }\n                    }\n                });\n            },\n            paint(options) {\n                return validateObject({\n                    layer,\n                    key: options.key,\n                    value: options.value,\n                    style: options.style,\n                    styleSpec: options.styleSpec,\n                    validateSpec: options.validateSpec,\n                    objectElementValidators: {\n                        '*'(options) {\n                            return validatePaintProperty(extendBy({ layerType: type }, options));\n                        }\n                    }\n                });\n            }\n        }\n    }));\n    return errors;\n}\n\nfunction validateString(options) {\n    const value = options.value;\n    const key = options.key;\n    const type = getType(value);\n    if (type !== 'string') {\n        return [new ValidationError(key, value, `string expected, ${type} found`)];\n    }\n    return [];\n}\n\nfunction validateRasterDEMSource(options) {\n    var _a;\n    const sourceName = (_a = options.sourceName) !== null && _a !== void 0 ? _a : '';\n    const rasterDEM = options.value;\n    const styleSpec = options.styleSpec;\n    const rasterDEMSpec = styleSpec.source_raster_dem;\n    const style = options.style;\n    let errors = [];\n    const rootType = getType(rasterDEM);\n    if (rasterDEM === undefined) {\n        return errors;\n    }\n    else if (rootType !== 'object') {\n        errors.push(new ValidationError('source_raster_dem', rasterDEM, `object expected, ${rootType} found`));\n        return errors;\n    }\n    const encoding = unbundle(rasterDEM.encoding);\n    const isCustomEncoding = encoding === 'custom';\n    const customEncodingKeys = ['redFactor', 'greenFactor', 'blueFactor', 'baseShift'];\n    const encodingName = options.value.encoding ? `\"${options.value.encoding}\"` : 'Default';\n    for (const key in rasterDEM) {\n        if (!isCustomEncoding && customEncodingKeys.includes(key)) {\n            errors.push(new ValidationError(key, rasterDEM[key], `In \"${sourceName}\": \"${key}\" is only valid when \"encoding\" is set to \"custom\". ${encodingName} encoding found`));\n        }\n        else if (rasterDEMSpec[key]) {\n            errors = errors.concat(options.validateSpec({\n                key,\n                value: rasterDEM[key],\n                valueSpec: rasterDEMSpec[key],\n                validateSpec: options.validateSpec,\n                style,\n                styleSpec\n            }));\n        }\n        else {\n            errors.push(new ValidationError(key, rasterDEM[key], `unknown property \"${key}\"`));\n        }\n    }\n    return errors;\n}\n\nconst objectElementValidators = {\n    promoteId: validatePromoteId\n};\nfunction validateSource(options) {\n    const value = options.value;\n    const key = options.key;\n    const styleSpec = options.styleSpec;\n    const style = options.style;\n    const validateSpec = options.validateSpec;\n    if (!value.type) {\n        return [new ValidationError(key, value, '\"type\" is required')];\n    }\n    const type = unbundle(value.type);\n    let errors;\n    switch (type) {\n        case 'vector':\n        case 'raster':\n            errors = validateObject({\n                key,\n                value,\n                valueSpec: styleSpec[`source_${type.replace('-', '_')}`],\n                style: options.style,\n                styleSpec,\n                objectElementValidators,\n                validateSpec,\n            });\n            return errors;\n        case 'raster-dem':\n            errors = validateRasterDEMSource({\n                sourceName: key,\n                value,\n                style: options.style,\n                styleSpec,\n                validateSpec,\n            });\n            return errors;\n        case 'geojson':\n            errors = validateObject({\n                key,\n                value,\n                valueSpec: styleSpec.source_geojson,\n                style,\n                styleSpec,\n                validateSpec,\n                objectElementValidators\n            });\n            if (value.cluster) {\n                for (const prop in value.clusterProperties) {\n                    const [operator, mapExpr] = value.clusterProperties[prop];\n                    const reduceExpr = typeof operator === 'string' ? [operator, ['accumulated'], ['get', prop]] : operator;\n                    errors.push(...validateExpression({\n                        key: `${key}.${prop}.map`,\n                        value: mapExpr,\n                        validateSpec,\n                        expressionContext: 'cluster-map'\n                    }));\n                    errors.push(...validateExpression({\n                        key: `${key}.${prop}.reduce`,\n                        value: reduceExpr,\n                        validateSpec,\n                        expressionContext: 'cluster-reduce'\n                    }));\n                }\n            }\n            return errors;\n        case 'video':\n            return validateObject({\n                key,\n                value,\n                valueSpec: styleSpec.source_video,\n                style,\n                validateSpec,\n                styleSpec\n            });\n        case 'image':\n            return validateObject({\n                key,\n                value,\n                valueSpec: styleSpec.source_image,\n                style,\n                validateSpec,\n                styleSpec\n            });\n        case 'canvas':\n            return [new ValidationError(key, null, 'Please use runtime APIs to add canvas sources, rather than including them in stylesheets.', 'source.canvas')];\n        default:\n            return validateEnum({\n                key: `${key}.type`,\n                value: value.type,\n                valueSpec: { values: ['vector', 'raster', 'raster-dem', 'geojson', 'video', 'image'] },\n                style,\n                validateSpec,\n                styleSpec\n            });\n    }\n}\nfunction validatePromoteId({ key, value }) {\n    if (getType(value) === 'string') {\n        return validateString({ key, value });\n    }\n    else {\n        const errors = [];\n        for (const prop in value) {\n            errors.push(...validateString({ key: `${key}.${prop}`, value: value[prop] }));\n        }\n        return errors;\n    }\n}\n\nfunction validateLight(options) {\n    const light = options.value;\n    const styleSpec = options.styleSpec;\n    const lightSpec = styleSpec.light;\n    const style = options.style;\n    let errors = [];\n    const rootType = getType(light);\n    if (light === undefined) {\n        return errors;\n    }\n    else if (rootType !== 'object') {\n        errors = errors.concat([new ValidationError('light', light, `object expected, ${rootType} found`)]);\n        return errors;\n    }\n    for (const key in light) {\n        const transitionMatch = key.match(/^(.*)-transition$/);\n        if (transitionMatch && lightSpec[transitionMatch[1]] && lightSpec[transitionMatch[1]].transition) {\n            errors = errors.concat(options.validateSpec({\n                key,\n                value: light[key],\n                valueSpec: styleSpec.transition,\n                validateSpec: options.validateSpec,\n                style,\n                styleSpec\n            }));\n        }\n        else if (lightSpec[key]) {\n            errors = errors.concat(options.validateSpec({\n                key,\n                value: light[key],\n                valueSpec: lightSpec[key],\n                validateSpec: options.validateSpec,\n                style,\n                styleSpec\n            }));\n        }\n        else {\n            errors = errors.concat([new ValidationError(key, light[key], `unknown property \"${key}\"`)]);\n        }\n    }\n    return errors;\n}\n\nfunction validateSky(options) {\n    const sky = options.value;\n    const styleSpec = options.styleSpec;\n    const skySpec = styleSpec.sky;\n    const style = options.style;\n    const rootType = getType(sky);\n    if (sky === undefined) {\n        return [];\n    }\n    else if (rootType !== 'object') {\n        return [new ValidationError('sky', sky, `object expected, ${rootType} found`)];\n    }\n    let errors = [];\n    for (const key in sky) {\n        if (skySpec[key]) {\n            errors = errors.concat(options.validateSpec({\n                key,\n                value: sky[key],\n                valueSpec: skySpec[key],\n                style,\n                styleSpec\n            }));\n        }\n        else {\n            errors = errors.concat([new ValidationError(key, sky[key], `unknown property \"${key}\"`)]);\n        }\n    }\n    return errors;\n}\n\nfunction validateTerrain(options) {\n    const terrain = options.value;\n    const styleSpec = options.styleSpec;\n    const terrainSpec = styleSpec.terrain;\n    const style = options.style;\n    let errors = [];\n    const rootType = getType(terrain);\n    if (terrain === undefined) {\n        return errors;\n    }\n    else if (rootType !== 'object') {\n        errors = errors.concat([new ValidationError('terrain', terrain, `object expected, ${rootType} found`)]);\n        return errors;\n    }\n    for (const key in terrain) {\n        if (terrainSpec[key]) {\n            errors = errors.concat(options.validateSpec({\n                key,\n                value: terrain[key],\n                valueSpec: terrainSpec[key],\n                validateSpec: options.validateSpec,\n                style,\n                styleSpec\n            }));\n        }\n        else {\n            errors = errors.concat([new ValidationError(key, terrain[key], `unknown property \"${key}\"`)]);\n        }\n    }\n    return errors;\n}\n\nfunction validateFormatted(options) {\n    if (validateString(options).length === 0) {\n        return [];\n    }\n    return validateExpression(options);\n}\n\nfunction validateImage(options) {\n    if (validateString(options).length === 0) {\n        return [];\n    }\n    return validateExpression(options);\n}\n\nfunction validatePadding(options) {\n    const key = options.key;\n    const value = options.value;\n    const type = getType(value);\n    if (type === 'array') {\n        if (value.length < 1 || value.length > 4) {\n            return [new ValidationError(key, value, `padding requires 1 to 4 values; ${value.length} values found`)];\n        }\n        const arrayElementSpec = {\n            type: 'number'\n        };\n        let errors = [];\n        for (let i = 0; i < value.length; i++) {\n            errors = errors.concat(options.validateSpec({\n                key: `${key}[${i}]`,\n                value: value[i],\n                validateSpec: options.validateSpec,\n                valueSpec: arrayElementSpec\n            }));\n        }\n        return errors;\n    }\n    else {\n        return validateNumber({\n            key,\n            value,\n            valueSpec: {}\n        });\n    }\n}\n\nfunction validateVariableAnchorOffsetCollection(options) {\n    const key = options.key;\n    const value = options.value;\n    const type = getType(value);\n    const styleSpec = options.styleSpec;\n    if (type !== 'array' || value.length < 1 || value.length % 2 !== 0) {\n        return [new ValidationError(key, value, 'variableAnchorOffsetCollection requires a non-empty array of even length')];\n    }\n    let errors = [];\n    for (let i = 0; i < value.length; i += 2) {\n        // Elements in even positions should be values from text-anchor enum\n        errors = errors.concat(validateEnum({\n            key: `${key}[${i}]`,\n            value: value[i],\n            valueSpec: styleSpec['layout_symbol']['text-anchor']\n        }));\n        // Elements in odd positions should be points (2-element numeric arrays)\n        errors = errors.concat(validateArray({\n            key: `${key}[${i + 1}]`,\n            value: value[i + 1],\n            valueSpec: {\n                length: 2,\n                value: 'number'\n            },\n            validateSpec: options.validateSpec,\n            style: options.style,\n            styleSpec\n        }));\n    }\n    return errors;\n}\n\nfunction validateSprite(options) {\n    let errors = [];\n    const sprite = options.value;\n    const key = options.key;\n    if (!Array.isArray(sprite)) {\n        return validateString({\n            key,\n            value: sprite\n        });\n    }\n    else {\n        const allSpriteIds = [];\n        const allSpriteURLs = [];\n        for (const i in sprite) {\n            if (sprite[i].id && allSpriteIds.includes(sprite[i].id))\n                errors.push(new ValidationError(key, sprite, `all the sprites' ids must be unique, but ${sprite[i].id} is duplicated`));\n            allSpriteIds.push(sprite[i].id);\n            if (sprite[i].url && allSpriteURLs.includes(sprite[i].url))\n                errors.push(new ValidationError(key, sprite, `all the sprites' URLs must be unique, but ${sprite[i].url} is duplicated`));\n            allSpriteURLs.push(sprite[i].url);\n            const pairSpec = {\n                id: {\n                    type: 'string',\n                    required: true,\n                },\n                url: {\n                    type: 'string',\n                    required: true,\n                }\n            };\n            errors = errors.concat(validateObject({\n                key: `${key}[${i}]`,\n                value: sprite[i],\n                valueSpec: pairSpec,\n                validateSpec: options.validateSpec,\n            }));\n        }\n        return errors;\n    }\n}\n\nfunction validateProjection(options) {\n    const projection = options.value;\n    const styleSpec = options.styleSpec;\n    const projectionSpec = styleSpec.projection;\n    const style = options.style;\n    const rootType = getType(projection);\n    if (projection === undefined) {\n        return [];\n    }\n    else if (rootType !== 'object') {\n        return [new ValidationError('projection', projection, `object expected, ${rootType} found`)];\n    }\n    let errors = [];\n    for (const key in projection) {\n        if (projectionSpec[key]) {\n            errors = errors.concat(options.validateSpec({\n                key,\n                value: projection[key],\n                valueSpec: projectionSpec[key],\n                style,\n                styleSpec\n            }));\n        }\n        else {\n            errors = errors.concat([new ValidationError(key, projection[key], `unknown property \"${key}\"`)]);\n        }\n    }\n    return errors;\n}\n\nfunction validateProjectionDefinition(options) {\n    const key = options.key;\n    let value = options.value;\n    value = value instanceof String ? value.valueOf() : value;\n    const type = getType(value);\n    if (type === 'array' && !isProjectionDefinitionValue(value) && !isPropertyValueSpecification(value)) {\n        return [new ValidationError(key, value, `projection expected, invalid array ${JSON.stringify(value)} found`)];\n    }\n    else if (!['array', 'string'].includes(type)) {\n        return [new ValidationError(key, value, `projection expected, invalid type \"${type}\" found`)];\n    }\n    return [];\n}\nfunction isPropertyValueSpecification(value) {\n    if (['interpolate', 'step', 'literal'].includes(value[0])) {\n        return true;\n    }\n    return false;\n}\nfunction isProjectionDefinitionValue(value) {\n    return Array.isArray(value) &&\n        value.length === 3 &&\n        typeof value[0] === 'string' &&\n        typeof value[1] === 'string' &&\n        typeof value[2] === 'number';\n}\n\nconst VALIDATORS = {\n    '*'() {\n        return [];\n    },\n    'array': validateArray,\n    'boolean': validateBoolean,\n    'number': validateNumber,\n    'color': validateColor,\n    'constants': validateConstants,\n    'enum': validateEnum,\n    'filter': validateFilter,\n    'function': validateFunction,\n    'layer': validateLayer,\n    'object': validateObject,\n    'source': validateSource,\n    'light': validateLight,\n    'sky': validateSky,\n    'terrain': validateTerrain,\n    'projection': validateProjection,\n    'projectionDefinition': validateProjectionDefinition,\n    'string': validateString,\n    'formatted': validateFormatted,\n    'resolvedImage': validateImage,\n    'padding': validatePadding,\n    'variableAnchorOffsetCollection': validateVariableAnchorOffsetCollection,\n    'sprite': validateSprite,\n};\n/**\n * Main recursive validation function used internally.\n * You should use `validateStyleMin` in the browser or `validateStyle` in node env.\n * @param options - the options object\n * @param options.key - string representing location of validation in style tree. Used only\n * for more informative error reporting.\n * @param options.value - current value from style being evaluated. May be anything from a\n * high level object that needs to be descended into deeper or a simple\n * scalar value.\n * @param options.valueSpec - current spec being evaluated. Tracks value.\n * @param options.styleSpec - current full spec being evaluated.\n * @param options.validateSpec - the validate function itself\n * @param options.style - the style object\n * @param options.objectElementValidators - optional object of functions that will be called\n * @returns an array of errors, or an empty array if no errors are found.\n */\nfunction validate(options) {\n    const value = options.value;\n    const valueSpec = options.valueSpec;\n    const styleSpec = options.styleSpec;\n    options.validateSpec = validate;\n    if (valueSpec.expression && isFunction$1(unbundle(value))) {\n        return validateFunction(options);\n    }\n    else if (valueSpec.expression && isExpression(deepUnbundle(value))) {\n        return validateExpression(options);\n    }\n    else if (valueSpec.type && VALIDATORS[valueSpec.type]) {\n        return VALIDATORS[valueSpec.type](options);\n    }\n    else {\n        const valid = validateObject(extendBy({}, options, {\n            valueSpec: valueSpec.type ? styleSpec[valueSpec.type] : valueSpec\n        }));\n        return valid;\n    }\n}\n\nfunction validateGlyphsUrl(options) {\n    const value = options.value;\n    const key = options.key;\n    const errors = validateString(options);\n    if (errors.length)\n        return errors;\n    if (value.indexOf('{fontstack}') === -1) {\n        errors.push(new ValidationError(key, value, '\"glyphs\" url must include a \"{fontstack}\" token'));\n    }\n    if (value.indexOf('{range}') === -1) {\n        errors.push(new ValidationError(key, value, '\"glyphs\" url must include a \"{range}\" token'));\n    }\n    return errors;\n}\n\n/**\n * Validate a MapLibre style against the style specification.\n * Use this when running in the browser.\n *\n * @param style - The style to be validated.\n * @param styleSpec - The style specification to validate against.\n * If omitted, the latest style spec is used.\n * @returns an array of errors, or an empty array if no errors are found.\n * @example\n *   const validate = require('@maplibre/maplibre-gl-style-spec/').validateStyleMin;\n *   const errors = validate(style);\n */\nfunction validateStyleMin(style, styleSpec = v8Spec) {\n    let errors = [];\n    errors = errors.concat(validate({\n        key: '',\n        value: style,\n        valueSpec: styleSpec.$root,\n        styleSpec,\n        style,\n        validateSpec: validate,\n        objectElementValidators: {\n            glyphs: validateGlyphsUrl,\n            '*'() {\n                return [];\n            }\n        }\n    }));\n    if (style['constants']) {\n        errors = errors.concat(validateConstants({\n            key: 'constants',\n            value: style['constants'],\n            style,\n            styleSpec,\n            validateSpec: validate,\n        }));\n    }\n    return sortErrors(errors);\n}\nvalidateStyleMin.source = wrapCleanErrors(injectValidateSpec(validateSource));\nvalidateStyleMin.sprite = wrapCleanErrors(injectValidateSpec(validateSprite));\nvalidateStyleMin.glyphs = wrapCleanErrors(injectValidateSpec(validateGlyphsUrl));\nvalidateStyleMin.light = wrapCleanErrors(injectValidateSpec(validateLight));\nvalidateStyleMin.sky = wrapCleanErrors(injectValidateSpec(validateSky));\nvalidateStyleMin.terrain = wrapCleanErrors(injectValidateSpec(validateTerrain));\nvalidateStyleMin.layer = wrapCleanErrors(injectValidateSpec(validateLayer));\nvalidateStyleMin.filter = wrapCleanErrors(injectValidateSpec(validateFilter));\nvalidateStyleMin.paintProperty = wrapCleanErrors(injectValidateSpec(validatePaintProperty));\nvalidateStyleMin.layoutProperty = wrapCleanErrors(injectValidateSpec(validateLayoutProperty));\nfunction injectValidateSpec(validator) {\n    return function (options) {\n        return validator({\n            ...options,\n            validateSpec: validate,\n        });\n    };\n}\nfunction sortErrors(errors) {\n    return [].concat(errors).sort((a, b) => {\n        return a.line - b.line;\n    });\n}\nfunction wrapCleanErrors(inner) {\n    return function (...args) {\n        return sortErrors(inner.apply(this, args));\n    };\n}\n\n// Note: This regex matches even invalid JSON strings, but since we’re\n// working on the output of `JSON.stringify` we know that only valid strings\n// are present (unless the user supplied a weird `options.indent` but in\n// that case we don’t care since the output would be invalid anyway).\nconst stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,]/g;\n\nfunction stringify(passedObj, options = {}) {\n  const indent = JSON.stringify(\n    [1],\n    undefined,\n    options.indent === undefined ? 2 : options.indent\n  ).slice(2, -3);\n\n  const maxLength =\n    indent === \"\"\n      ? Infinity\n      : options.maxLength === undefined\n      ? 80\n      : options.maxLength;\n\n  let { replacer } = options;\n\n  return (function _stringify(obj, currentIndent, reserved) {\n    if (obj && typeof obj.toJSON === \"function\") {\n      obj = obj.toJSON();\n    }\n\n    const string = JSON.stringify(obj, replacer);\n\n    if (string === undefined) {\n      return string;\n    }\n\n    const length = maxLength - currentIndent.length - reserved;\n\n    if (string.length <= length) {\n      const prettified = string.replace(\n        stringOrChar,\n        (match, stringLiteral) => {\n          return stringLiteral || `${match} `;\n        }\n      );\n      if (prettified.length <= length) {\n        return prettified;\n      }\n    }\n\n    if (replacer != null) {\n      obj = JSON.parse(string);\n      replacer = undefined;\n    }\n\n    if (typeof obj === \"object\" && obj !== null) {\n      const nextIndent = currentIndent + indent;\n      const items = [];\n      let index = 0;\n      let start;\n      let end;\n\n      if (Array.isArray(obj)) {\n        start = \"[\";\n        end = \"]\";\n        const { length } = obj;\n        for (; index < length; index++) {\n          items.push(\n            _stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) ||\n              \"null\"\n          );\n        }\n      } else {\n        start = \"{\";\n        end = \"}\";\n        const keys = Object.keys(obj);\n        const { length } = keys;\n        for (; index < length; index++) {\n          const key = keys[index];\n          const keyPart = `${JSON.stringify(key)}: `;\n          const value = _stringify(\n            obj[key],\n            nextIndent,\n            keyPart.length + (index === length - 1 ? 0 : 1)\n          );\n          if (value !== undefined) {\n            items.push(keyPart + value);\n          }\n        }\n      }\n\n      if (items.length > 0) {\n        return [start, indent + items.join(`,\\n${nextIndent}`), end].join(\n          `\\n${currentIndent}`\n        );\n      }\n    }\n\n    return string;\n  })(passedObj, \"\", 0);\n}\n\nfunction sortKeysBy(obj, reference) {\n    const result = {};\n    for (const key in reference) {\n        if (obj[key] !== undefined) {\n            result[key] = obj[key];\n        }\n    }\n    for (const key in obj) {\n        if (result[key] === undefined) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n/**\n * Format a MapLibre Style.  Returns a stringified style with its keys\n * sorted in the same order as the reference style.\n *\n * The optional `space` argument is passed to\n * [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n * to generate formatted output.\n *\n * If `space` is unspecified, a default of `2` spaces will be used.\n *\n * @private\n * @param {Object} style a MapLibre Style\n * @param {number} [space] space argument to pass to `JSON.stringify`\n * @returns {string} stringified formatted JSON\n * @example\n * var fs = require('fs');\n * var format = require('maplibre-gl-style-spec').format;\n * var style = fs.readFileSync('./source.json', 'utf8');\n * fs.writeFileSync('./dest.json', format(style));\n * fs.writeFileSync('./dest.min.json', format(style, 0));\n */\nfunction format(style, space = 2) {\n    style = sortKeysBy(style, v8Spec.$root);\n    if (style.layers) {\n        style.layers = style.layers.map((layer) => sortKeysBy(layer, v8Spec.layer));\n    }\n    return stringify(style, { indent: space });\n}\n\nfunction eachLayout(layer, callback) {\n    for (const k in layer) {\n        if (k.indexOf('layout') === 0) {\n            callback(layer[k], k);\n        }\n    }\n}\nfunction eachPaint(layer, callback) {\n    for (const k in layer) {\n        if (k.indexOf('paint') === 0) {\n            callback(layer[k], k);\n        }\n    }\n}\nfunction resolveConstant(style, value) {\n    if (typeof value === 'string' && value[0] === '@') {\n        return resolveConstant(style, style.constants[value]);\n    }\n    else {\n        return value;\n    }\n}\nfunction isFunction(value) {\n    return Array.isArray(value.stops);\n}\nfunction renameProperty(obj, from, to) {\n    obj[to] = obj[from];\n    delete obj[from];\n}\nfunction migrateV8(style) {\n    style.version = 8;\n    // Rename properties, reverse coordinates in source and layers\n    eachSource(style, (source) => {\n        if (source.type === 'video' && source['url'] !== undefined) {\n            renameProperty(source, 'url', 'urls');\n        }\n        if (source.type === 'video') {\n            source.coordinates.forEach((coord) => {\n                return coord.reverse();\n            });\n        }\n    });\n    eachLayer(style, (layer) => {\n        eachLayout(layer, (layout) => {\n            if (layout['symbol-min-distance'] !== undefined) {\n                renameProperty(layout, 'symbol-min-distance', 'symbol-spacing');\n            }\n        });\n        eachPaint(layer, (paint) => {\n            if (paint['background-image'] !== undefined) {\n                renameProperty(paint, 'background-image', 'background-pattern');\n            }\n            if (paint['line-image'] !== undefined) {\n                renameProperty(paint, 'line-image', 'line-pattern');\n            }\n            if (paint['fill-image'] !== undefined) {\n                renameProperty(paint, 'fill-image', 'fill-pattern');\n            }\n        });\n    });\n    // Inline Constants\n    eachProperty(style, { paint: true, layout: true }, (property) => {\n        const value = resolveConstant(style, property.value);\n        if (isFunction(value)) {\n            value.stops.forEach((stop) => {\n                stop[1] = resolveConstant(style, stop[1]);\n            });\n        }\n        property.set(value);\n    });\n    delete style['constants'];\n    eachLayer(style, (layer) => {\n        // get rid of text-max-size, icon-max-size\n        // turn text-size, icon-size into layout properties\n        // https://github.com/mapbox/mapbox-gl-style-spec/issues/255\n        eachLayout(layer, (layout) => {\n            delete layout['text-max-size'];\n            delete layout['icon-max-size'];\n        });\n        eachPaint(layer, (paint) => {\n            if (paint['text-size']) {\n                if (!layer.layout)\n                    layer.layout = {};\n                layer.layout['text-size'] = paint['text-size'];\n                delete paint['text-size'];\n            }\n            if (paint['icon-size']) {\n                if (!layer.layout)\n                    layer.layout = {};\n                layer.layout['icon-size'] = paint['icon-size'];\n                delete paint['icon-size'];\n            }\n        });\n    });\n    function migrateFontStack(font) {\n        function splitAndTrim(string) {\n            return string.split(',').map((s) => {\n                return s.trim();\n            });\n        }\n        if (Array.isArray(font)) {\n            // Assume it's a previously migrated font-array.\n            return font;\n        }\n        else if (typeof font === 'string') {\n            return splitAndTrim(font);\n        }\n        else if (typeof font === 'object') {\n            font.stops.forEach((stop) => {\n                stop[1] = splitAndTrim(stop[1]);\n            });\n            return font;\n        }\n        else {\n            throw new Error('unexpected font value');\n        }\n    }\n    eachLayer(style, (layer) => {\n        eachLayout(layer, (layout) => {\n            if (layout['text-font']) {\n                layout['text-font'] = migrateFontStack(layout['text-font']);\n            }\n        });\n    });\n    // Reverse order of symbol layers. This is an imperfect migration.\n    //\n    // The order of a symbol layer in the layers list affects two things:\n    // - how it is drawn relative to other layers (like oneway arrows below bridges)\n    // - the placement priority compared to other layers\n    //\n    // It's impossible to reverse the placement priority without breaking the draw order\n    // in some cases. This migration only reverses the order of symbol layers that\n    // are above all other types of layers.\n    //\n    // Symbol layers that are at the top of the map preserve their priority.\n    // Symbol layers that are below another type (line, fill) of layer preserve their draw order.\n    let firstSymbolLayer = 0;\n    for (let i = style.layers.length - 1; i >= 0; i--) {\n        const layer = style.layers[i];\n        if (layer.type !== 'symbol') {\n            firstSymbolLayer = i + 1;\n            break;\n        }\n    }\n    const symbolLayers = style.layers.splice(firstSymbolLayer);\n    symbolLayers.reverse();\n    style.layers = style.layers.concat(symbolLayers);\n    return style;\n}\n\n/**\n * Migrate the given style object in place to use expressions. Specifically,\n * this will convert (a) \"stop\" functions, and (b) legacy filters to their\n * expression equivalents.\n * @param style The style object to migrate.\n * @returns The migrated style object.\n */\nfunction expressions(style) {\n    const converted = [];\n    eachLayer(style, (layer) => {\n        if (layer.filter) {\n            layer.filter = convertFilter(layer.filter);\n        }\n    });\n    eachProperty(style, { paint: true, layout: true }, ({ path, value, reference, set }) => {\n        if (isExpression(value))\n            return;\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            set(convertFunction(value, reference));\n            converted.push(path.join('.'));\n        }\n        else if (reference.tokens && typeof value === 'string') {\n            set(convertTokenString(value));\n        }\n    });\n    return style;\n}\n\n/**\n * Migrate color style values to supported format.\n *\n * @param colorToMigrate Color value to migrate, could be a string or an expression.\n * @returns Color style value in supported format.\n */\nfunction migrateColors(colorToMigrate) {\n    return JSON.parse(migrateHslColors(JSON.stringify(colorToMigrate)));\n}\n/**\n * Created to migrate from colors supported by the former CSS color parsing\n * library `csscolorparser` but not compliant with the CSS Color specification,\n * like `hsl(900, 0.15, 90%)`.\n *\n * @param colorToMigrate Serialized color style value.\n * @returns A serialized color style value in which all non-standard hsl color values\n * have been converted to a format that complies with the CSS Color specification.\n *\n * @example\n * migrateHslColors('\"hsl(900, 0.15, 90%)\"'); // returns '\"hsl(900, 15%, 90%)\"'\n * migrateHslColors('\"hsla(900, .15, .9)\"'); // returns '\"hsl(900, 15%, 90%)\"'\n * migrateHslColors('\"hsl(900, 15%, 90%)\"'); // returns '\"hsl(900, 15%, 90%)\"' - no changes\n */\nfunction migrateHslColors(colorToMigrate) {\n    return colorToMigrate.replace(/\"hsla?\\((.+?)\\)\"/gi, (match, hslArgs) => {\n        const argsMatch = hslArgs.match(/^(.+?)\\s*,\\s*(.+?)\\s*,\\s*(.+?)(?:\\s*,\\s*(.+))?$/i);\n        if (argsMatch) {\n            let [h, s, l, a] = argsMatch.slice(1);\n            [s, l] = [s, l].map(v => v.endsWith('%') ? v : `${parseFloat(v) * 100}%`);\n            return `\"hsl${typeof a === 'string' ? 'a' : ''}(${[h, s, l, a].filter(Boolean).join(',')})\"`;\n        }\n        return match;\n    });\n}\n\n/**\n * Migrate a Mapbox/MapLibre GL Style to the latest version.\n *\n * @param style - a MapLibre Style\n * @returns a migrated style\n * @example\n * const fs = require('fs');\n * const migrate = require('@maplibre/maplibre-gl-style-spec').migrate;\n * const style = fs.readFileSync('./style.json', 'utf8');\n * fs.writeFileSync('./style.json', JSON.stringify(migrate(style)));\n */\nfunction migrate(style) {\n    let migrated = false;\n    if (style.version === 7) {\n        style = migrateV8(style);\n        migrated = true;\n    }\n    if (style.version === 8) {\n        migrated = !!expressions(style);\n        migrated = true;\n    }\n    eachProperty(style, { paint: true, layout: true }, ({ value, reference, set }) => {\n        if (reference.type === 'color') {\n            set(migrateColors(value));\n        }\n    });\n    if (!migrated) {\n        throw new Error(`Cannot migrate from ${style.version}`);\n    }\n    return style;\n}\n\nconst v8 = v8Spec;\nconst expression = {\n    StyleExpression,\n    StylePropertyFunction,\n    ZoomConstantExpression,\n    ZoomDependentExpression,\n    createExpression,\n    createPropertyExpression,\n    isExpression,\n    isExpressionFilter,\n    isZoomExpression,\n    normalizePropertyExpression,\n};\nconst styleFunction = {\n    convertFunction,\n    createFunction,\n    isFunction: isFunction$1\n};\nconst visit = { eachLayer, eachProperty, eachSource };\n\nexport { Color, ColorType, CompoundExpression, EvaluationContext, FormatExpression, Formatted, FormattedSection, FormattedType, Interpolate, Literal, NullType, Padding, ParsingError, ProjectionDefinition, ProjectionDefinitionType, ResolvedImage, Step, StyleExpression, StylePropertyFunction, ValidationError, VariableAnchorOffsetCollection, ZoomConstantExpression, ZoomDependentExpression, classifyRings, convertFilter, convertFunction, createExpression, createFunction, createPropertyExpression, derefLayers, diff, emptyStyle, expression, expressions$1 as expressions, featureFilter, format, styleFunction as function, groupByLayout, interpolateFactory as interpolates, isExpression, isFunction$1 as isFunction, isZoomExpression, v8Spec as latest, migrate, normalizePropertyExpression, supportsPropertyExpression, typeToString as toString, typeOf, v8, validate, validateStyleMin, visit };\n//# sourceMappingURL=index.mjs.map\n","\nimport type {\n\tIControl,\n\tMap,\n\tControlPosition,\n} from 'maplibre-gl';\n\nimport { expression } from \"@maplibre/maplibre-gl-style-spec\";\nimport type { Expression } from \"@maplibre/maplibre-gl-style-spec\";\n\ntype Options = {\n  title: string;    // show title at the top of the color bar\n  unit: string;     // show unit at the bottom of the color bar\n\tposition?: ControlPosition;   // Optional position with a default top-left position\n  width?: string;   // Optional width with a default 56px\n  height?: string;  // Optional width with a default 272px\n  max?: number;     // Optional max with a default 30\n  decimal?: number; // Optional decimal with a default 1\n};\n\ninterface ColorStep {\n  speed: number;\n  color: string;\n}\n\nexport default class ColorBar implements IControl {\n\tprivate map: Map | undefined;\n\tprivate options: Options;\n\n  private colorSteps: ColorStep[];\n  private container: HTMLElement;\n  private outContainer: HTMLElement;\n  private titleDiv: HTMLElement;\n  private unitDiv: HTMLElement;\n  private legendItems: HTMLElement[] = [];\n\n  propertySpec: Record<string, any>;\n\n  constructor(propertySpec: any, options: Options) {\n    if (!propertySpec) {\n      this.propertySpec = {\n        \"fill-color\": {\n          default: [\n            \"step\",\n            [\"get\", \"speed\"],\n            \"#ff3f00\", // Default color for speed < 0.10\n            0.10, \"#ff7e00\",\n            0.15, \"#ffbe00\",\n            0.20, \"#fffd00\",\n            0.25, \"#c0ff00\",\n            0.30, \"#81ff00\",\n            0.35, \"#41ff00\",\n            0.40, \"#02ff00\",\n            0.45, \"#00ff3d\",\n            0.50, \"#00ff7c\",\n            0.55, \"#00ffbc\",\n            0.60, \"#00fffb\",\n            0.65, \"#00c2ff\",\n            0.70, \"#0083ff\",\n            0.75, \"#0043ff\",\n            0.80, \"#0004ff\",\n            0.85, \"#3b00ff\",\n            0.90, \"#7a00ff\",\n            0.95, \"#ba00ff\",\n            0.98, \"#f900ff\",\n            1.00, \"#f900ff\",\n          ],\n          doc: \"The color of each pixel of this layer\",\n          expression: {\n            interpolated: true,\n            parameters: [\"zoom\", \"feature\"]\n          },\n          \"property-type\": \"data-driven\"\n        },\n        \"fill-opacity\": {\n          type: \"number\",\n          default: 0.5,\n          minimum: 0,\n          maximum: 1,\n          transition: true,\n          expression: {\n            interpolated: true,\n            parameters: [\"zoom\"]\n          },\n          \"property-type\": \"data-constant\"\n        }\n      };\n    } else {\n      this.propertySpec = propertySpec;\n    }\n\n\t\tthis.options = {\n\t    position: \"top-left\",\n      width: \"56px\",    // Default width\n      height: \"272px\",  // Default width\n      max: 30,          // Default max\n      decimal: 1,          // Default max\n      ...options,       // Override with user-provided options\n    };\n\n    this.colorSteps = this.getColorSteps();\n\n    const { outContainer, innerContainer } = this.createContainer();\n    this.outContainer = outContainer;\n    this.container = innerContainer;\n    this.titleDiv = this.createTitleDiv(this.options.title);\n    this.unitDiv = this.createUnitDiv(this.options.unit);\n\n    this.container.appendChild(this.titleDiv);\n    this.container.appendChild(this.unitDiv);\n\n  }\n\n\tprivate getWidth(): string {\n\t\treturn this.options.width || \"52px\";\n\t}\n\n\tprivate getHeight(): string {\n\t\treturn this.options.height || \"272px\";\n\t}\n\n  private getHeightInPixels(): number {\n    const heightExpression = this.getHeight();\n    if (heightExpression.endsWith('px')) {\n      return parseFloat(heightExpression);\n    }\n\n    if (heightExpression.endsWith('%')) {\n      const parentHeight = this.outContainer.offsetHeight;\n      const percentage = parseFloat(heightExpression) / 100;\n      return parentHeight * percentage;\n    }\n\n    return 272;\n  }\n\n\tprivate createContainer(): { outContainer: HTMLElement; innerContainer: HTMLElement } {\n\t  // Outer container\n\t  const outContainer = document.createElement(\"div\");\n\t  outContainer.classList.add(\"maplibregl-ctrl\");\n\t\n\t  // Outer container styles\n\t  outContainer.style.height = \"100%\"; // Fixed or dynamically adjustable height\n\t  outContainer.style.display = \"flex\";\n\t  outContainer.style.flexDirection = \"column\";\n\t  outContainer.style.alignItems = \"center\";\n    outContainer.style.backgroundColor = \"transparent\"; \n\n\t  // Inner container\n    const group = this.options.position?.endsWith(\"left\")\n     ? \"map-colorbar-left-group\"\n     : \"map-colorbar-right-group\";\n\t  const innerContainer = document.createElement(\"div\");\n\t  innerContainer.classList.add(group);\n\t\n\t  // Inner container styles\n\t  innerContainer.style.width = this.getWidth();\n\t  innerContainer.style.height = `calc(min((100% - 29px), ${this.getHeight()}))`;\n\t  innerContainer.style.backgroundColor = \"rgba(0, 36, 71, 0.8)\";\n\t  innerContainer.style.display = \"flex\";\n\t  innerContainer.style.flexDirection = \"column\";\n\t\tinnerContainer.style.borderRadius = \"10px\";\n\t\n\t  // Add inner container to outer container\n\t  outContainer.appendChild(innerContainer);\n\t\n\t  // Return the inner container for further manipulation\n\t  return { outContainer, innerContainer };\n\t}\n\n  private createTitleDiv(title: string): HTMLElement {\n    const titleDiv = document.createElement(\"div\");\n    titleDiv.innerHTML = title;\n    titleDiv.style.marginTop = \"6px\";\n    titleDiv.style.marginBottom = \"8px\";\n    titleDiv.style.display = \"flex\";\n\t\ttitleDiv.style.justifyContent = \"center\"; \n\t\ttitleDiv.style.textAlign = \"center\";\n    titleDiv.style.fontSize = \"11px\";\n\t\ttitleDiv.style.lineHeight = \"14px\";\n    titleDiv.style.color = \"white\";\n\t  titleDiv.style.width = this.getWidth();\n    return titleDiv;\n  }\n\n  private createUnitDiv(unit: string): HTMLElement {\n    const unitDiv = document.createElement(\"div\");\n    unitDiv.classList.add(\"map_colorbar_unit\");\n    unitDiv.innerHTML = `(${unit})`;\n    unitDiv.style.marginTop = \"8px\";\n\t  unitDiv.style.width = this.getWidth(); // Fixed or dynamically adjustable width\n    unitDiv.style.display = \"flex\";\n\t\tunitDiv.style.justifyContent = \"center\"; \n    unitDiv.style.color = \"white\";\n    unitDiv.style.fontSize = \"12px\";\n\t\tunitDiv.style.textAlign = \"center\";\n    return unitDiv;\n  }\n\n  private createColorBox(color: string): HTMLElement {\n    const colorBox = document.createElement(\"div\");\n    colorBox.classList.add(\"map_colorbar_color_box\");\n    colorBox.style.width = \"12px\";\n    colorBox.style.backgroundColor = color;\n    return colorBox;\n  }\n\n  private createLabel(_step: ColorStep): HTMLElement {\n    const label = document.createElement(\"div\");\n    label.classList.add(\"map_colorbar_label\");\n    label.style.marginLeft = \"0px\";\n    label.style.marginRight = \"2px\";\n    label.style.color = \"white\";\n    label.style.fontSize = \"10px\";\n    label.textContent = \"\";\n    return label;\n  }\n\n  private initializeLegendItems(): void {\n    this.colorSteps.forEach(({ speed, color }) => {\n      const legendItem = document.createElement(\"div\");\n      legendItem.classList.add(\"map_colorbar_item\");\n      legendItem.style.display = \"flex\";\n      legendItem.style.alignItems = \"center\";\n      legendItem.style.marginBottom = \"0px\";\n      legendItem.style.marginLeft = \"10px\";\n\n      const colorBox = this.createColorBox(color);\n      const label = this.createLabel({speed, color});\n\n      legendItem.appendChild(colorBox);\n      legendItem.appendChild(label);\n      this.legendItems.push(legendItem);\n      this.container.insertBefore(legendItem, this.unitDiv); // 插入 unitDiv 之前\n    });\n  }\n\n  private calculateHeights(): { stepHeight: number; showInterval: number } {\n    const h = this.getHeightInPixels();\n    const containerHeight = (this.container.getBoundingClientRect().height\n                               ? this.container.getBoundingClientRect().height\n                               : h);\n    const totalMargin = 6 + 8 + 8;\n    const stepsHeight = (containerHeight - this.titleDiv.offsetHeight\n                        - this.unitDiv.offsetHeight - totalMargin);\n\n    const stepHeight = Math.max(Math.floor(stepsHeight / this.colorSteps.length), 5);\n    const showInterval = Math.ceil(20 * this.colorSteps.length / stepsHeight);\n\n    return { stepHeight, showInterval };\n  }\n\n  public update(): void {\n    this.updateInnerContainerStyle(this.outContainer, this.container);\n    const { stepHeight, showInterval } = this.calculateHeights();\n\n    [...this.legendItems].reverse().forEach((legendItem, index) => {\n      const colorBox = legendItem.querySelector(\".map_colorbar_color_box\") as HTMLElement;\n      const label = legendItem.querySelector(\".map_colorbar_label\") as HTMLElement;\n\n      legendItem.style.height = `${stepHeight}px`;\n      colorBox.style.height = `${stepHeight}px`;\n      let reverseIndex = this.colorSteps.length - 1 - index;\n\n      if (\n        index % showInterval !== 0\n      ) {\n        label.textContent = \"\";\n      } else {\n        label.textContent = `- ${this.colorSteps[reverseIndex]\n                                  .speed.toFixed(this.options.decimal)}`;\n      }\n    });\n  }\n\n  onAdd(map: Map): HTMLElement {\n    this.map = map;\n\t\tmap.getContainer().appendChild(this.outContainer);\n\n    this.initializeLegendItems();\n    this.update();\n\n\t\tthis.map.once('styledata', () => {\n\t\t\tthis.refresh();\n\t\t});\n\n    this.map.on('resize', () => {\n      this.update();\n    });\n\n\t\treturn this.outContainer;\n  }\n\n  onRemove(): void {\n    if (this.map) {\n      this.map.off('resize', this.update);\n      this.map.off('styledata', this.refresh);\n    }\n    this.container.parentNode?.removeChild(this.container);\n    this.outContainer.parentNode?.removeChild(this.outContainer);\n\t\tthis.map = undefined;\n  }\n\n\trefresh() {\n\t}\n\n  getDefaultPosition(): ControlPosition {\n    return this.options.position || 'top-left';\n  };\n\n\tupdateInnerContainerStyle(outContainer: HTMLElement, container: HTMLElement): void {\n    if (!this.map) {\n      return;\n    }\n    const parentContainer = this.map.getContainer();\n\t  const parentWidth = parentContainer.offsetWidth;\n\t  const parentHeight = parentContainer.offsetHeight;\n\n    outContainer.style.height = `${parentHeight}px`;\n\n\t  // Default styles\n\t  let marginTop = 10;\n\t  let marginBottom = 10;\n\t\tlet defMarginLeft = Math.max(\n\t\t  10,\n\t\t  parseFloat(\n\t\t    getComputedStyle(parentContainer)\n\t\t\t\t\t.getPropertyValue('env(safe-area-inset-left)') || '0'\n\t\t  )\n\t\t);\n    let defMarginRight = Math.max(\n\t\t  10,\n\t\t  parseFloat(\n\t\t    getComputedStyle(parentContainer)\n\t\t\t\t\t.getPropertyValue('env(safe-area-inset-right)') || '0'\n\t\t  )\n\t\t);\n\t\tlet marginLeft = defMarginLeft;\n\t\tlet marginRight = defMarginRight;\n\t\n\t  // Update styles based on parent dimensions\n\t  if (parentWidth >= 480) {\n\t    marginTop = 15;\n\t    marginBottom = 15;\n\t    marginLeft = Math.max(15, defMarginLeft);\n\t    marginRight = Math.max(15, defMarginRight);\n\t  }\n\n\t  if (parentWidth >= 992 && parentHeight >= 992) {\n\t    marginTop = 40;\n\t    marginBottom = 40;\n\t    marginLeft = Math.max(40, defMarginLeft);\n\t    marginRight = Math.max(40, defMarginRight);\n    }\n\n    if (this.options.position?.endsWith(\"left\")) {\n      container.style.marginLeft = `${marginLeft}px`;\n      container.style.marginRight = `${defMarginRight}px`;\n    } else {\n      container.style.marginLeft = `${defMarginLeft}px`;\n      container.style.marginRight = `${marginRight}px`;\n\t\t}\n\n    // Apply styles to innerContainer\n    container.style.marginTop = `${marginTop}px`;\n    container.style.marginBottom = `${marginBottom}px`;\n  \n    container.style.alignItems = 'flex-start';\n    container.style.display = 'flex'; // Ensures `align-items` works\n\t  container.style.height = `calc(min((100% - 29px), ${this.getHeight()}))`;\n  }\n\n  /**\n   * Parses the \"fill-color\" property and extracts speed-to-color mappings.\n   * @returns An array of speed thresholds and their corresponding colors.\n   */\n  getColorSteps(): ColorStep[] {\n    const colorSpec = this.propertySpec[\"fill-color\"];\n    if (!colorSpec) {\n      throw new Error(\"Missing 'fill-color' specification.\");\n    }\n  \n    const colorSteps = colorSpec.default || colorSpec;\n    const stepType = colorSteps[0];\n  \n    if (stepType !== \"step\") {\n      throw new Error(\"Only 'step' expressions are supported.\");\n    }\n  \n    const steps: ColorStep[] = [];\n    const [, , defaultColor, ...pairs] = colorSteps;\n  \n    const maxSpeed: number = this.options?.max || 30;\n  \n    // Add default color for speed < first threshold\n    steps.push({ speed: 0, color: defaultColor });\n  \n    // Extract speed thresholds and colors\n    for (let i = 0; i < pairs.length; i += 2) {\n      const speed = pairs[i] as number;\n      const absSpeed = speed * maxSpeed;\n      const color = pairs[i + 1] as string;\n      steps.push({ speed: absSpeed, color });\n    }\n  \n    // Sort steps by speed in ascending order\n    return steps.sort((a, b) => b.speed - a.speed);\n  }\n\n\n  /**\n   * Sets a property using a Mapbox style expression.\n   * @param prop The property name.\n   * @param value The Mapbox style expression.\n   */\n  setProperty(prop: string, value: Expression) {\n    const spec = this.propertySpec[prop];\n    if (!spec) {\n      throw new Error(`Property \"${prop}\" is not defined in the specification.`);\n    }\n\n    const expr = expression.createPropertyExpression(value, spec);\n    if (expr.result === \"success\") {\n      switch (expr.value.kind) {\n        case \"camera\":\n        case \"composite\":\n          // Example: handle zoom-dependent properties\n          console.log(`Camera/composite expression set for property \"${prop}\"`);\n          break;\n        default:\n          // Example: handle constant or other property types\n          console.log(`Property \"${prop}\" set with value`, expr.value);\n          break;\n      }\n    } else {\n      throw new Error(`Invalid expression for property \"${prop}\": ${expr.value}`);\n    }\n  }\n}\n\n"],"names":["pauseSvg","playSvg","reloadSvg","skipBackwardSvg","skipForwardSvg","ACTIVE_BUTTON_COLOR","makeImg","svg","img","timerId","makeContainer","length","interval","onSliderValueChange","container","titleDiv","slider","buttonsDiv","setLoopEnabled","enabled","loopButton","isLoopEnabled","decrement","increment","prevButton","pause","pauseButton","playButton","isPlaying","play","nextButton","TemporalControl","temporalFrames","options","__publicField","containerOptions","idx","map","_a","sliderValue","visibleLayerIds","layer","temporalFrame","isVisible","_b","_c","_d","opacity","extendBy","output","inputs","input","k","ExpressionParsingError","key","message","Scope","parent","bindings","name","expression","NullType","NumberType","StringType","BooleanType","ColorType","ProjectionDefinitionType","ObjectType","ValueType","ErrorType","CollatorType","FormattedType","PaddingType","ResolvedImageType","VariableAnchorOffsetCollectionType","array","itemType","N","typeToString","type","valueMemberTypes","checkSubtype","expected","t","memberType","isValidType","provided","allowedTypes","isValidNativeType","verifyType","sample","Xn","Yn","Zn","t0","t1","t2","t3","deg2rad","rad2deg","constrainAngle","angle","rgbToLab","r","g","b","alpha","rgb2xyz","x","z","y","xyz2lab","l","labToRgb","a","lab2xyz","xyz2rgb","rgbToHcl","rgbColor","c","hclToRgb","h","hslToRgb","s","f","n","parseCssColor","namedColorsMatch","namedColors","step","i","parseHex","rgbRegExp","rgbMatch","_","rp","f1","gp","f2","bp","f3","ap","argFormat","valFormat","maxValue","rgba","clamp","parseAlpha","validateNumbers","hslRegExp","hslMatch","hsla","hex","asPercentage","min","max","interpolateNumber","from","to","interpolateArray","d","isSupportedInterpolationColorSpace","colorSpace","Color","premultiplied","getterKey","lazyValue","spaceKey","hue0","chroma0","light0","alphaF","hue1","chroma1","light1","alphaT","hue","chroma","dh","Collator","caseSensitive","diacriticSensitive","locale","lhs","rhs","FormattedSection","text","image","scale","fontStack","textColor","Formatted","sections","unformatted","section","Padding","values","val","RuntimeError","anchors","VariableAnchorOffsetCollection","anchorValue","offsetValue","fromValues","toValues","fx","fy","tx","ty","ResolvedImage","ProjectionDefinition","transition","validateRGBA","isValue","mixed","item","typeOf","value","valueToString","Literal","args","context","types$1","Assertion","parsed","ctx","fn","arg","types","Coercion","error","pad","coll","num","classifyRings","rings","maxRings","polygons","polygon","ccw","ring","area","calculateSignedArea","sum","len","j","p1","p2","hasMultipleOuterRings","direction","geometryTypes","simpleGeometryType","EvaluationContext","geometryType","geom","cached","ParsingContext","registry","isConstantFunc","path","expectedType","scope","errors","part","expr","index","annotate","typeAnnotation","op","Expr","actual","ec","e","keys","Let","result","binding","Var","boundExpression","At","In","needle","haystack","IndexOf","fromIndex","rawIndex","Match","inputType","outputType","cases","outputs","otherwise","labels","labelContext","label","out","Case","branches","test","Slice","beginIndex","endIndex","findStopLessThanOrEqualTo","stops","lastIndex","lowerIndex","upperIndex","currentIndex","currentValue","nextValue","Step","labelKey","valueKey","stopCount","getDefaultExportFromCjs","unitbezier","hasRequiredUnitbezier","requireUnitbezier","UnitBezier","p1x","p1y","p2x","p2y","epsilon","x2","d2","unitbezierExports","Interpolate","operator","interpolation","lower","upper","exponentialInterpolation","rest","base","controlPoints","outputLower","outputUpper","lowerValue","upperValue","difference","progress","interpolateFactory","Coalesce","parsedArgs","argCount","requestedImageName","isComparableType","eq","neq","lt","gt","lteq","gteq","eqCollate","neqCollate","ltCollate","gtCollate","lteqCollate","gteqCollate","makeComparison","compareBasic","compareWithCollator","isOrderComparison","Comparison","collator","rt","Equals","NotEquals","LessThan","GreaterThan","LessThanOrEqual","GreaterThanOrEqual","CollatorExpression","NumberFormat","number","currency","minFractionDigits","maxFractionDigits","FormatExpression","firstArg","nextTokenMayBeObject","font","lastExpression","content","kind","evaluateSection","evaluatedContent","ImageExpression","evaluatedImageName","Length","EXTENT","getTileCoordinates","p","canonical","mercatorXfromLng","mercatorYfromLat","tilesAtZoom","getLngLatFromTileCoord","coord","lngFromMercatorXfromLng","latFromMercatorY","lng","mercatorX","lat","mercatorY","updateBBox","bbox","boxWithinBox","bbox1","bbox2","rayIntersect","pointOnBoundary","x1","y1","y2","segmentIntersectSegment","vectorP","vectorQ","perp","twoSided","lineIntersectPolygon","pointWithinPolygon","point","trueIfOnBoundary","inside","pointWithinPolygons","lineStringWithinPolygon","line","lineStringWithinPolygons","v1","v2","q1","q2","x3","y3","det1","det2","getTilePolygon","coordinates","getTilePolygons","updatePoint","polyBBox","worldSize","halfWorldSize","shift","resetBBox","getTilePoints","geometry","pointBBox","shifts","tilePoints","points","getTileLines","lineBBox","tileLines","tileLine","pointsWithinPolygons","polygonGeometry","tilePolygon","tilePolygons","linesWithinPolygons","Within","geojson","geometries","polygonsCoords","multipolygonWrapper","TinyQueue","data","compare","top","bottom","pos","current","halfLength","bestChild","right","RE","FE","E2","RAD","CheapRuler","m","coslat","w2","w","dx","dy","minDist","minX","minY","minI","minT","sqDist","deg","MinPointsSize","MinLinePointsSize","compareDistPair","getRangeSize","range","isRangeSafe","threshold","splitRange","isLine","size","size1","getBBox","coords","getPolygonBBox","isValidBBox","bboxToBBoxDistance","ruler","pointToLineDistance","nearestPoint","segmentToSegmentDistance","dist1","dist2","lineToLineDistance","line1","range1","line2","range2","dist","pointsToPointsDistance","points1","points2","pointToPolygonDistance","front","back","lineToPolygonDistance","polygonIntersect","poly1","poly2","polygonToPolygonDistance","polygon1","polygon2","currentMiniDist","ring1","len1","ring2","len2","updateQueue","distQueue","miniDist","rangeA","tempDist","updateQueueTwoSets","pointSet1","pointSet2","pointsToPolygonDistance","distPair","newRangesA","pointSetToPointSetDistance","isLine1","isLine2","rangeB","threshold1","threshold2","sublibe","newRangesB","pointToGeometryDistance","pointPosition","lineStringToGeometryDistance","linePositions","polygonToGeometryDistance","toSimpleGeometry","lineString","Distance","feature","expressions$1","CompoundExpression","evaluate","definition","availableOverloads","overloads","signature","signatureContext","params","isExpressionConstant","argParseFailed","signatures","stringifySignature","actualTypes","definitions","has","obj","get","v","binarySearch","varargs","isSupportedScript","isTypeAnnotation","childrenConstant","child","isFeatureConstant","isGlobalPropertyConstant","isStateConstant","properties","success","supportsPropertyExpression","spec","supportsZoomExpression","supportsInterpolation","getType","isFunction$1","identityFunction","createFunction","parameters","propertySpec","isColor","zoomAndFeatureDependent","featureDependent","zoomDependent","parseFn","stop","innerFun","hashedStops","categoricalKeyType","evaluateExponentialFunction","evaluateIntervalFunction","evaluateCategoricalFunction","evaluateIdentityFunction","featureFunctions","zoomStops","zoom","featureFunctionStops","interpolationType","coalesce$1","keyType","evaluated","interpolationFactor","interp","evaluatedLower","evaluatedUpper","StyleExpression","getDefaultValue","globals","featureState","availableImages","formattedSection","isExpression","createExpression","parser","getExpectedType","ZoomConstantExpression","ZoomDependentExpression","isZoomExpression","createPropertyExpression","expressionInput","isFeatureConstantResult","isZoomConstant","zoomCurve","findZoomCurve","StylePropertyFunction","specification","serialized","normalizePropertyExpression","err","constant","childResult","isExpressionFilter","filter","ColorBar","outContainer","innerContainer","heightExpression","parentHeight","percentage","group","title","unit","unitDiv","color","colorBox","_step","speed","legendItem","stepsHeight","stepHeight","showInterval","reverseIndex","parentContainer","parentWidth","marginTop","marginBottom","defMarginLeft","defMarginRight","marginLeft","marginRight","colorSpec","colorSteps","steps","defaultColor","pairs","maxSpeed","absSpeed","prop"],"mappings":"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","x_google_ignoreList":[2]}